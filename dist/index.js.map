{"mappings":"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","sources":["index.js","src/items.js","src/utils/getLatestVersion.js","src/utils/sanitizeText.js","src/utils/itemUtils.js","src/utils/constants.js","src/utils/downloadImages.js","src/champions.js"],"sourcesContent":["import { info, setFailed } from \"@actions/core\";\r\nimport { getItems } from \"./src/items.js\";\r\nimport { getChampions } from \"./src/champions.js\";\r\n\r\nconst main = async () => {\r\n  try {\r\n    await getItems();\r\n    info(\"Successfully merged items.json\\n\");\r\n    await getChampions();\r\n    info(\"Successfully merged champions.json\\n\");\r\n    info(\"Successfully generated custom files.\");\r\n  } catch (error) {\r\n    setFailed(error.message);\r\n  }\r\n};\r\n\r\nmain();\r\n","import axios from \"axios\";\r\nimport { info, setFailed } from \"@actions/core\";\r\nimport _ from \"lodash\";\r\nimport { readFileSync, existsSync, mkdirSync } from \"fs\";\r\nimport { getLatestVersion } from \"./utils/getLatestVersion.js\";\r\nimport { sanitizeText } from \"./utils/sanitizeText.js\";\r\nimport {\r\n  getCommunityDragonData,\r\n  getMerakiData,\r\n  getBlitzData,\r\n  writeItems,\r\n} from \"./utils/itemUtils.js\";\r\nimport {\r\n  requiredKeysMeraki,\r\n  admittedClasses,\r\n  defaultValues,\r\n} from \"./utils/constants.js\";\r\nimport downloadImage from \"./utils/downloadImages.js\";\r\n// Load env variables from .env file\r\nimport \"dotenv/config\";\r\n\r\nconst mergeItems = async (endpoints, latestVersion) => {\r\n  // Create a new array to store the items.json files\r\n  let itemEndpoints = [];\r\n  let itemPromises = [];\r\n  endpoints.forEach((endpoint) => {\r\n    let promise = axios.get(endpoint.url).then((response) => {\r\n      itemEndpoints.push({ name: endpoint.name, data: response.data });\r\n    });\r\n    itemPromises.push(promise);\r\n  });\r\n  await Promise.all(itemPromises);\r\n\r\n  let mergedItems = {};\r\n  itemEndpoints.forEach((endpoint) => {\r\n    switch (endpoint.name) {\r\n      case \"Blitz\":\r\n        Object.assign(mergedItems, getBlitzData(endpoint));\r\n        break;\r\n\r\n      case \"MerakiAnalytics\":\r\n        Object.entries(endpoint.data).forEach((item) => {\r\n          const key = item[0];\r\n          const values = item[1];\r\n\r\n          let { filteredItem, classes } = getMerakiData(\r\n            values,\r\n            requiredKeysMeraki,\r\n            admittedClasses,\r\n            itemEndpoints\r\n          );\r\n\r\n          // Append the filteredItem and the classes to the mergedItems in the corresponding key\r\n          mergedItems[key] = {\r\n            ...mergedItems[key],\r\n            ...filteredItem,\r\n            classes: classes,\r\n          };\r\n        });\r\n        break;\r\n\r\n      case \"CommunityDragon\":\r\n        getCommunityDragonData(endpoint, mergedItems);\r\n        break;\r\n    }\r\n  });\r\n\r\n  // Merge the default values with every item in mergedItems\r\n  mergedItems = _.mapValues(mergedItems, (item) => {\r\n    return _.defaults(item, defaultValues);\r\n  });\r\n\r\n  console.log(`Merged ${Object.keys(mergedItems).length} items`);\r\n\r\n  // Sanitize item description for each item in mergedItems\r\n  Object.entries(mergedItems).forEach(([key, value]) => {\r\n    let description = value.description;\r\n    if (description) {\r\n      description = sanitizeText(value);\r\n      mergedItems[key].description = description;\r\n    }\r\n    if (value.icon) {\r\n      let iconName = value.icon.split(\"/\").pop().split(\".\")[0] || \"\";\r\n      if (iconName && iconName.length > 0) {\r\n        downloadImage(`data/img/items/${iconName}.webp`, value.icon);\r\n      }\r\n    }\r\n  });\r\n\r\n  writeItems(latestVersion, mergedItems);\r\n};\r\n\r\n// Get the items.json file from the different endpoints specified in items.json\r\n// Return the custom merged items.json file\r\nexport const getItems = async () => {\r\n  // Read the items.json configuration file\r\n  const itemsConfig = JSON.parse(readFileSync(\"endpoints/items.json\"));\r\n  // Fetch the latest version of DDragon\r\n  const latestVersion = await getLatestVersion();\r\n  let endpoints = [];\r\n  // Fetch the items.json from the itemsConfig\r\n  itemsConfig.forEach((endpoint) => {\r\n    console.log(\"Fetching items.json from \" + endpoint.name);\r\n    const url = `${endpoint.baseUrl}${\r\n      endpoint.needsLatest ? latestVersion : \"\"\r\n    }${endpoint.resource}`;\r\n    endpoints.push({ name: endpoint.name, url: url });\r\n    console.log(endpoint.name + \" items URL: \" + url);\r\n  });\r\n  // Create a folder in /data if it doesn't exist for the latest version\r\n  if (!existsSync(`data/${latestVersion}`)) {\r\n    mkdirSync(`data/${latestVersion}`);\r\n  }\r\n  // Create the folder latest in /data if it doesn't exist\r\n  if (!existsSync(`data/latest`)) {\r\n    mkdirSync(`data/latest`);\r\n  }\r\n  await mergeItems(endpoints, latestVersion);\r\n};\r\n\r\nconst main = async () => {\r\n  try {\r\n    await getItems();\r\n    info(\"Successfully merged items.json\");\r\n  } catch (error) {\r\n    setFailed(error.message);\r\n    console.log(\"Error: \" + error.message);\r\n  }\r\n};\r\n\r\n// Only run main if running locally\r\nif (process.env.GITHUB_ACTIONS !== \"true\") {\r\n  main();\r\n}\r\n","import axios from \"axios\";\r\n\r\n/**\r\n * Gets the latest version of DDragon from https://ddragon.leagueoflegends.com/api/versions.json\r\n * @returns {string} The latest version of the game.\r\n */\r\nconst getLatestVersion = async () => {\r\n  const response = await axios.get(\r\n    \"https://ddragon.leagueoflegends.com/api/versions.json\"\r\n  );\r\n  let latestVersion = response.data[0];\r\n  // Sanitize latest version, only accept numbers and dots\r\n  latestVersion = latestVersion.replace(/[^0-9.]/g, \"\");\r\n  return latestVersion;\r\n};\r\nconst _getLatestVersion = getLatestVersion;\r\nexport { _getLatestVersion as getLatestVersion };\r\n","import _ from \"lodash\";\r\nimport createDOMPurify from \"dompurify\";\r\nimport { JSDOM } from \"jsdom\";\r\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\r\n\r\n/**\r\n * Function to convert a string from camel case or snake case to pascal case\r\n * @param {string} str - The string to convert to PascalCase.\r\n */\r\nconst toPascalCase = (str) => {\r\n  return str\r\n    .split(\"_\")\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\"\");\r\n};\r\n\r\n/**\r\n * It takes a string, sanitizes it, parses it, and returns a string.\r\n * @param {itemsSchema} item - {\r\n * @returns {string} A string of XML.\r\n */\r\nexport const sanitizeText = (item) => {\r\n  if (!item) return \"\";\r\n  let text = item.description;\r\n  if (!text) {\r\n    return;\r\n  }\r\n  // Remove curly braces from API placeholders\r\n  text = text.replaceAll(\"{\", \"\");\r\n  text = text.replaceAll(\"}\", \"\");\r\n  const pascalCaseTags = [\r\n    \"Active\",\r\n    \"Attention\",\r\n    \"FlavorText\",\r\n    \"Healing\",\r\n    \"KeywordStealth\",\r\n    \"MagicDamage\",\r\n    \"MainText\",\r\n    \"Passive\",\r\n    \"PhysicalDamage\",\r\n    \"RarityGeneric\",\r\n    \"RarityLegendary\",\r\n    \"RarityMythic\",\r\n    \"Rules\",\r\n    \"ScaleLevel\",\r\n    \"ScaleMana\",\r\n    \"Stats\",\r\n    \"Status\",\r\n    \"TrueDamage\",\r\n  ];\r\n  // Sanitize text with dompurify\r\n  const window = new JSDOM(\"\").window;\r\n  const DOMPurify = createDOMPurify(window);\r\n  let sanitizedText = DOMPurify.sanitize(text, {\r\n    ADD_TAGS: [\r\n      \"active\",\r\n      \"attention\",\r\n      \"flavorText\",\r\n      \"healing\",\r\n      \"keywordStealth\",\r\n      \"magicDamage\",\r\n      \"mainText\",\r\n      \"passive\",\r\n      \"physicalDamage\",\r\n      \"rarityGeneric\",\r\n      \"rarityLegendary\",\r\n      \"rarityMythic\",\r\n      \"rules\",\r\n      \"scaleLevel\",\r\n      \"scaleMana\",\r\n      \"stats\",\r\n      \"status\",\r\n      \"trueDamage\",\r\n    ],\r\n    FORBID_TAGS: [\"br\"],\r\n  });\r\n\r\n  // Replace all lowercase words inside the sanitizedText with the camelCaseTags version\r\n  pascalCaseTags.forEach((tag) => {\r\n    const lowercaseTag = tag.toLowerCase();\r\n    // Replace lowercase tag with tag\r\n    sanitizedText = _.replace(\r\n      sanitizedText,\r\n      new RegExp(lowercaseTag, \"g\"),\r\n      tag\r\n    );\r\n  });\r\n\r\n  // Parse with fast-xml-parser\r\n  const parser = new XMLParser({\r\n    preserveOrder: true,\r\n  });\r\n  const xml = parser.parse(sanitizedText);\r\n  // Remove stats from the xml object\r\n  if (xml.mainText?.stats) {\r\n    for (let key in xml.mainText.stats) {\r\n      delete xml.mainText.stats[key];\r\n    }\r\n  }\r\n  // Convert xml object to XML string\r\n  const builder = new XMLBuilder({\r\n    preserveOrder: true,\r\n  });\r\n  let xmlString = builder.build(xml);\r\n\r\n  // Add stats between <Stats> tag and </Stats> tag\r\n  xmlString = parseStats(xmlString, item);\r\n\r\n  xmlString = parseActives(xmlString);\r\n\r\n  // Replace in xmlString:\r\n  // Add a whitespace (' ') before a less than character ('<') if the preceding character is a letter (a-z, A-Z) or a colon (':')\r\n  const lessThanRegex = /([a-zA-Z,:])</g;\r\n  xmlString = xmlString.replace(lessThanRegex, \"$1 <\");\r\n\r\n  return xmlString;\r\n};\r\n\r\n/**\r\n * Takes an XML string and an item object, and replaces the string with a JSX element\r\n * @param {string} xmlString - The string of the xml file\r\n * @param {itemsSchema} item - The item object that contains the stats\r\n * @returns {string} The xmlString is being returned with the stats of the item.\r\n * @example\r\n * Returns: <Stats><Stat name=\"Attack Speed\">1.5</Stat></Stats>\r\n */\r\nexport function parseStats(xmlString, item) {\r\n  const statsRegex = /<Stats>(.*?)<\\/Stats>/g;\r\n  const statsMatch = xmlString.match(statsRegex);\r\n  if (statsMatch) {\r\n    const statsTag = statsMatch[0];\r\n    let statsString = \"\";\r\n\r\n    // Create the stats string with the stats of the item\r\n    if (item.stats) {\r\n      Object.entries(item.stats).forEach(([keyItem, value]) => {\r\n        Object.entries(value).forEach(([key2, value2]) => {\r\n          let statName = toPascalCase(key2) + toPascalCase(keyItem);\r\n          statsString += `<Stat name=\"${statName}\">${value2}${\r\n            key2.includes(\"percent\") ? \"%\" : \"\"\r\n          }</Stat>`;\r\n        });\r\n      });\r\n    }\r\n\r\n    const statText = `<Stats>${statsString}</Stats>`;\r\n    xmlString = _.replace(xmlString, statsTag, statText);\r\n  }\r\n  return xmlString;\r\n}\r\n\r\n/** Combine all two adjacent Active tags when the first one is \"Active -\"\r\n * @param {string} xmlString - The string of the xml file\r\n * @returns {string} Parsed string\r\n * @example\r\n * Input: <Active>Active -</Active><Active>Lorem ipsum</Active>\r\n * Result:  <Active>Active - Lorem ipsum</Active>\r\n */\r\nexport function parseActives(xmlString) {\r\n  const activeRegex = /<Active>(.*?)<\\/Active>/g;\r\n  const activeMatch = xmlString.match(activeRegex);\r\n  let skipNext = false;\r\n  if (activeMatch) {\r\n    // Loop through each match\r\n    for (const match of activeMatch) {\r\n      // If skipNext is set to true, skip the next match\r\n      if (skipNext === true) {\r\n        skipNext = false;\r\n        // Delete the match from the xmlString\r\n        xmlString = _.replace(xmlString, match, \"\");\r\n        continue;\r\n      }\r\n      // Get the content of the match\r\n      const tagContent = match.replace(/<\\/?Active>/g, \"\");\r\n      // Check if the content is \"Active -\"\r\n      if (tagContent === \"Active -\") {\r\n        // Replace the match with the \"Active - \" and the content of the next match\r\n        const nextTagContent = activeMatch[activeMatch.indexOf(match) + 1]\r\n          .replace(/<\\/?Active>/g, \"\")\r\n          .trim();\r\n\r\n        xmlString = _.replace(\r\n          xmlString,\r\n          match,\r\n          `<Active>Active - ${nextTagContent}</Active>`\r\n        );\r\n        // Skip the next match\r\n        skipNext = true;\r\n      }\r\n    }\r\n  }\r\n  return xmlString;\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport _ from \"lodash\";\r\n\r\n// Function to convert a string from snake case to camel case\r\nexport const snakeToCamel = (str) => {\r\n  return str.replace(/(_\\w)/g, (m) => m[1].toUpperCase());\r\n};\r\n\r\nexport function writeItems(latestVersion, mergedItems) {\r\n  // Write the merged items.json file in the latestVersion folder \"./data/\" + latestVersion + \"/items.json\";\r\n  let rootPath = \"data/\";\r\n  let latestVersionPath = path.join(rootPath, latestVersion, \"/items.json\");\r\n  // Sanitize path to avoid directory traversal\r\n  latestVersionPath = path.normalize(latestVersionPath);\r\n  // deepcode ignore PT: Wont fix this right away\r\n  fs.writeFileSync(latestVersionPath, JSON.stringify(mergedItems));\r\n  // Also save a copy in the latest folder\r\n  fs.writeFileSync(`data/latest/items.json`, JSON.stringify(mergedItems));\r\n}\r\n\r\nexport function getCommunityDragonData(endpoint, mergedItems) {\r\n  let requiredKeysCD = [\"categories\", \"inStore\", \"maxStacks\"];\r\n  endpoint.data.forEach((item) => {\r\n    const key = item.id;\r\n    let filteredItem = _.pick(item, requiredKeysCD);\r\n    // Append the filteredItem to the mergedItems in the corresponding key\r\n    mergedItems[key] = { ...mergedItems[key], ...filteredItem };\r\n  });\r\n}\r\n\r\nexport function getMerakiData(\r\n  values,\r\n  requiredKeysMeraki,\r\n  admittedClasses,\r\n  itemEndpoints\r\n) {\r\n  let filteredItem = _.pick(values, requiredKeysMeraki);\r\n\r\n  // Get an array of champion classes from nested object property\r\n  let classes = _.get(values, \"shop.tags\");\r\n  if (classes.length > 0) {\r\n    classes = _.filter(classes, (className) =>\r\n      admittedClasses.includes(className)\r\n    );\r\n  }\r\n  // Remove empty keys from stats to reduce the size of the json file\r\n  let stats = _.get(values, \"stats\");\r\n  if (stats) {\r\n    Object.entries(stats).forEach((stat) => {\r\n      const [key2, value2] = stat;\r\n      // Convert key2 from snake case to camel case\r\n      const camelCaseKey2 = snakeToCamel(key2);\r\n      // Replace key2\r\n      if (key2 !== camelCaseKey2) {\r\n        Object.defineProperty(\r\n          stats,\r\n          camelCaseKey2,\r\n          Object.getOwnPropertyDescriptor(stats, key2)\r\n        );\r\n        delete stats[key2];\r\n      }\r\n\r\n      Object.entries(value2).forEach((stat2) => {\r\n        const [key3, value3] = stat2;\r\n        if (value3 === 0) {\r\n          delete values[\"stats\"][camelCaseKey2][key3];\r\n        }\r\n      });\r\n    });\r\n  }\r\n  // Validate that the icon is a valid URL\r\n  if (\r\n    !filteredItem.icon ||\r\n    (filteredItem.icon && !filteredItem.icon.startsWith(\"http\"))\r\n  ) {\r\n    // Get item from CommunityDragon endpoint data\r\n    let CDragonIconPath = _.chain(itemEndpoints)\r\n      .find({ name: \"CommunityDragon\" })\r\n      .get(\"data\")\r\n      .find({ id: values.id })\r\n      .get(\"iconPath\")\r\n      .value();\r\n\r\n    if (CDragonIconPath) {\r\n      // Strip text after Icons2d/ from the icon path\r\n      CDragonIconPath = CDragonIconPath.split(\"Icons2D/\")[1].toLowerCase();\r\n      // Set fallback icon if the icon is not a valid URL\r\n      filteredItem.icon =\r\n        \"https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/assets/items/icons2d/\" +\r\n        CDragonIconPath;\r\n\r\n      console.warn(\r\n        `Item ${values.name}-${values.id} has an invalid icon URL, using fallback icon`\r\n      );\r\n    }\r\n  }\r\n  return { filteredItem, classes };\r\n}\r\n\r\nexport function getBlitzData(endpoint) {\r\n  let data = endpoint.data.data;\r\n  // Parse numbers\r\n  Object.entries(data).forEach((entry) => {\r\n    const [key, value] = entry;\r\n    Object.entries(value).forEach((item) => {\r\n      const [key2, value2] = item;\r\n      if (key2 === \"id\") {\r\n        data[key][key2] = parseInt(value2);\r\n      } else if (\r\n        (key2 === \"maps\" || key2 === \"from\" || key2 === \"into\") &&\r\n        value2 !== null\r\n      ) {\r\n        data[key][key2] = value2.map(Number);\r\n      } else if (key2 === \"depth\") {\r\n        // Delete the depth key\r\n        delete data[key][\"depth\"];\r\n      } else if (key2 === \"stats\") {\r\n        // Delete stats from blitzEndpoint\r\n        delete data[key][\"stats\"];\r\n      }\r\n    });\r\n  });\r\n  return data;\r\n}\r\n","export const requiredKeysMeraki = [\r\n  \"icon\",\r\n  \"iconOverlay\",\r\n  \"nicknames\",\r\n  \"requiredChampion\",\r\n  \"simpleDescription\",\r\n  \"tier\",\r\n  \"stats\",\r\n];\r\n\r\nexport const admittedClasses = [\r\n  \"MAGE\",\r\n  \"SUPPORT\",\r\n  \"TANK\",\r\n  \"FIGHTER\",\r\n  \"MARKSMAN\",\r\n  \"ASSASSIN\",\r\n];\r\n\r\n// Set default values for required keys\r\nexport const defaultValues = {\r\n  categories: [],\r\n  classes: [],\r\n  description: null,\r\n  from: [],\r\n  gold: { base: 0, purchasable: false, total: 0, sell: 0 },\r\n  icon: \"\",\r\n  iconOverlay: false,\r\n  id: -1,\r\n  inStore: false,\r\n  into: [],\r\n  maps: [],\r\n  maxStacks: 0,\r\n  mythic: false,\r\n  name: \"\",\r\n  nicknames: [],\r\n  requiredChampion: \"\",\r\n  simpleDescription: \"\",\r\n  stats: {},\r\n  tier: 0,\r\n};\r\n","import sharp from \"sharp\";\r\nimport { existsSync, mkdirSync } from \"fs\";\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * &gt;&gt;&gt; downloadImage(\"data/img/items/image.png\", \"http://www.example.com/image.png\")\r\n * @param {string} filename - The path of the file to be downloaded. Include the subfolder for champion or items\r\n * @param {string} url - The URL path to the image you want to download.\r\n */\r\nasync function downloadImage(filename, url) {\r\n  if (!filename || !url) return;\r\n\r\n  // Create folders\r\n  if (!existsSync(\"data/img/champions\")) {\r\n    mkdirSync(\"data/img/champions\", { recursive: true });\r\n  }\r\n  if (!existsSync(\"data/img/items\")) {\r\n    mkdirSync(\"data/img/items\", { recursive: true });\r\n  }\r\n\r\n  await axios\r\n    .get(url, { responseType: \"arraybuffer\" })\r\n    .then((res) => {\r\n      sharp(res.data).toFile(filename, (err) => err && console.error(err));\r\n      console.log(\"Saving image \" + filename);\r\n    })\r\n    .catch((err) => console.error(err));\r\n}\r\n\r\nexport default downloadImage;\r\n","import { info, setFailed } from \"@actions/core\";\r\nimport { writeFileSync, readFileSync, existsSync, mkdirSync } from \"fs\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport { getLatestVersion } from \"./utils/getLatestVersion.js\";\r\n// Load env variables from .env file\r\nimport \"dotenv/config\";\r\nimport downloadImage from \"./utils/downloadImages.js\";\r\n\r\nconst mergeChampions = async (endpoints, latestVersion) => {\r\n  const queryString = JSON.stringify({\r\n    query: `query ChampionsInfo{\r\n      info: queryChampionsV1Contents(top:0){\r\n          flatData{\r\n              name\r\n              slug\r\n              antiDive\r\n              burst\r\n              control\r\n              damage\r\n              damageType\r\n              divePotential\r\n              engage\r\n              gankDenial\r\n              gankReliability\r\n              gankTurnAround\r\n              kite\r\n              mobility\r\n              pick\r\n              poke\r\n              preControl\r\n              preDamage\r\n              preMobility\r\n              preToughness\r\n              postControl\r\n              postDamage\r\n              postMobility\r\n              postToughness\r\n              skirmish\r\n              split\r\n              sustained\r\n              tags\r\n              toughness\r\n              utility\r\n              waveclear\r\n              powerSpikes{\r\n                  early\r\n                  mid\r\n                  late\r\n              }\r\n              key: riotId\r\n              riotSlug\r\n              difficultyLevel\r\n              difficulty{\r\n                  flatData{\r\n                      slug\r\n                      name\r\n                      level\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }`,\r\n    variables: {},\r\n  });\r\n  let mobalyticsConfig = {\r\n    method: \"post\",\r\n    url: \"https://app.mobalytics.gg/api/league/gql/static/v1\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    data: queryString,\r\n  };\r\n  let championEndpoints = [];\r\n  let championPromises = [];\r\n  let mobalyticsData = [];\r\n  let mergedChampionData = {};\r\n\r\n  // Fetch the champions.json from the endpoints\r\n  endpoints.forEach((endpoint) => {\r\n    let promise = axios.get(endpoint.url).then((response) => {\r\n      championEndpoints.push({ name: endpoint.name, data: response.data });\r\n    });\r\n    championPromises.push(promise);\r\n  });\r\n\r\n  await Promise.all(championPromises);\r\n  championPromises = [];\r\n\r\n  // Get data from Mobalytics GraphQL API\r\n  let mobalyticsPromise = axios(mobalyticsConfig)\r\n    .then(function (response) {\r\n      mobalyticsData = _.chain(response.data.data.info)\r\n        .flatMap(({ flatData }) => flatData)\r\n        .keyBy(\"riotSlug\")\r\n        .value();\r\n\r\n      console.log(\"Mobalytics data fetched\");\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n  championPromises.push(mobalyticsPromise);\r\n  await Promise.all(championPromises);\r\n\r\n  // Get data from endpoints\r\n  championEndpoints.forEach((endpoint) => {\r\n    if (endpoint.name === \"MerakiAnalytics\") {\r\n      let data = endpoint.data;\r\n      Object.assign(mergedChampionData, data);\r\n    }\r\n  });\r\n\r\n  // Merge mobalytics data with mergedChampionData\r\n  mergedChampionData = _.merge(mergedChampionData, mobalyticsData);\r\n\r\n  // Create a copy of the mergedChampionData\r\n  let lightweightChampionData = _.cloneDeep(mergedChampionData);\r\n\r\n  Object.keys(lightweightChampionData).forEach((key) => {\r\n    // Delete unneeded keys (abilities, skins, stats, key, slug)\r\n    delete lightweightChampionData[key].abilities;\r\n    delete lightweightChampionData[key].skins;\r\n    delete lightweightChampionData[key].stats;\r\n    delete lightweightChampionData[key].key;\r\n    delete lightweightChampionData[key].slug;\r\n\r\n    // Save champion images\r\n    let icon = lightweightChampionData[key].icon;\r\n    if (icon) {\r\n      let iconName = icon.split(\"/\").pop().split(\".\")[0] || \"\";\r\n      if (iconName && iconName.length > 0) {\r\n        downloadImage(`data/img/champions/${iconName}.webp`, icon);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Write the merged champions.json file\r\n  // deepcode ignore PT: Wont fix this right away\r\n  writeFileSync(\r\n    `data/${latestVersion}/champions.json`,\r\n    JSON.stringify(mergedChampionData)\r\n  );\r\n  writeFileSync(\r\n    `data/latest/champions.json`,\r\n    JSON.stringify(mergedChampionData)\r\n  );\r\n  // deepcode ignore PT: Wont fix this right away\r\n  writeFileSync(\r\n    `data/${latestVersion}/champions-summary.json`,\r\n    JSON.stringify(lightweightChampionData)\r\n  );\r\n  writeFileSync(\r\n    `data/latest/champions-summary.json`,\r\n    JSON.stringify(lightweightChampionData)\r\n  );\r\n};\r\n\r\n// Get the champions.json file from the different endpoints specified in champions.json\r\n// Return the custom merged champions.json file\r\nexport const getChampions = async () => {\r\n  // Read the champions.json configuration file\r\n  const championsConfig = JSON.parse(readFileSync(\"endpoints/champions.json\"));\r\n  const latestVersion = await getLatestVersion();\r\n  let endpoints = [];\r\n  // Create an endpoints array from the configuration file\r\n  championsConfig.forEach((endpoint) => {\r\n    console.log(\"Fetching champions.json from \" + endpoint.name);\r\n    const url = `${endpoint.baseUrl}${\r\n      endpoint.needsLatest ? latestVersion : \"\"\r\n    }${endpoint.resource}`;\r\n    endpoints.push({ name: endpoint.name, url: url });\r\n    console.log(endpoint.name + \" champions URL: \" + url);\r\n  });\r\n  // Create a folder in /data if it doesn't exist for the latest version\r\n  if (!existsSync(`data/${latestVersion}`)) {\r\n    mkdirSync(`data/${latestVersion}`);\r\n  }\r\n  // Create the folder latest in /data if it doesn't exist\r\n  if (!existsSync(`data/latest`)) {\r\n    mkdirSync(`data/latest`);\r\n  }\r\n  await mergeChampions(endpoints, latestVersion);\r\n};\r\n\r\nconst main = async () => {\r\n  try {\r\n    await getChampions();\r\n    info(\"Successfully merged champions.json\");\r\n  } catch (error) {\r\n    setFailed(error.message);\r\n  }\r\n};\r\n\r\n// Only run main if running locally\r\nif (process.env.GITHUB_ACTIONS !== \"true\") {\r\n  main();\r\n}\r\n"],"names":["info","setFailed","getItems","getChampions","main","error","message","axios","_","readFileSync","existsSync","mkdirSync","getLatestVersion","sanitizeText","getCommunityDragonData","getMerakiData","getBlitzData","writeItems","requiredKeysMeraki","admittedClasses","defaultValues","downloadImage","mergeItems","endpoints","latestVersion","itemEndpoints","itemPromises","forEach","endpoint","promise","get","url","then","response","push","name","data","Promise","all","mergedItems","Object","assign","entries","item","key","values","filteredItem","classes","mapValues","defaults","console","log","keys","length","value","description","icon","iconName","split","pop","itemsConfig","JSON","parse","baseUrl","needsLatest","resource","process","env","GITHUB_ACTIONS","replace","_getLatestVersion","createDOMPurify","JSDOM","XMLParser","XMLBuilder","toPascalCase","str","map","word","charAt","toUpperCase","slice","join","text","replaceAll","pascalCaseTags","window","DOMPurify","sanitizedText","sanitize","ADD_TAGS","FORBID_TAGS","tag","lowercaseTag","toLowerCase","RegExp","parser","preserveOrder","xml","mainText","stats","builder","xmlString","build","parseStats","parseActives","lessThanRegex","statsRegex","statsMatch","match","statsTag","statsString","keyItem","key2","value2","statName","includes","statText","activeRegex","activeMatch","skipNext","tagContent","nextTagContent","indexOf","trim","path","fs","snakeToCamel","m","rootPath","latestVersionPath","normalize","writeFileSync","stringify","requiredKeysCD","id","pick","filter","className","stat","camelCaseKey2","defineProperty","getOwnPropertyDescriptor","stat2","key3","value3","startsWith","CDragonIconPath","chain","find","warn","entry","parseInt","Number","categories","from","gold","base","purchasable","total","sell","iconOverlay","inStore","into","maps","maxStacks","mythic","nicknames","requiredChampion","simpleDescription","tier","sharp","filename","recursive","responseType","res","toFile","err","catch","mergeChampions","queryString","query","variables","mobalyticsConfig","method","headers","championEndpoints","championPromises","mobalyticsData","mergedChampionData","mobalyticsPromise","flatMap","flatData","keyBy","merge","lightweightChampionData","cloneDeep","abilities","skins","slug","championsConfig"],"version":3,"file":"index.js.map"}