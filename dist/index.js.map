{"version":3,"sources":["../src/index.ts","../src/parsers/champions.ts","../src/utils/downloadImages.ts","../src/utils/blurhashDataURL.ts","../src/utils/getLatestVersion.ts","../src/utils/championQuery.ts","../src/utils/endpointUtils.ts","../src/parsers/items.ts","../src/utils/sanitizeText.ts","../src/utils/itemUtils.ts","../src/types/items.ts","../src/utils/constants.ts"],"sourcesContent":["import { info } from \"@actions/core\";\nimport { getChampions } from \"./parsers/champions.js\";\nimport { getItems } from \"./parsers/items.js\";\n\nconst main = async () => {\n  await getItems();\n  info(\"Successfully merged items.json\\n\");\n  await getChampions();\n  info(\"Successfully merged champions.json\\n\");\n  info(\"Successfully generated custom files.\");\n};\n\nmain();\n","import { writeFileSync, existsSync, mkdirSync } from \"fs\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\n// Load env variables from .env file\nimport \"dotenv/config\";\nimport { downloadImage } from \"src/utils/downloadImages.js\";\nimport { getLatestVersion } from \"src/utils/getLatestVersion.js\";\nimport championsConfig from \"endpoints/champions.json\";\n\nimport {\n  Endpoint,\n  EndpointChampionData,\n  EndpointNames,\n} from \"src/types/global.js\";\n\nimport { queryString } from \"src/utils/championQuery.js\";\nimport { MergedChampionDataObject } from \"src/types/champions.js\";\nimport { getEndpoints, readJsonFile } from \"../utils/endpointUtils.js\";\n\nconst mergeChampions = async (endpoints: Endpoint[], latestVersion: string) => {\n  let mobalyticsConfig = {\n    method: \"post\",\n    url: \"https://app.mobalytics.gg/api/league/gql/static/v1\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      \"Accept-Encoding\": \"identity\",\n    },\n    data: queryString,\n  };\n  let championEndpoints: EndpointChampionData[] = [];\n  let championPromises: Promise<void>[] = [];\n  let mobalyticsData: _.Dictionary<any> = [];\n  let mergedChampionData: MergedChampionDataObject = {};\n\n  // Fetch the champions.json from the endpoints\n  endpoints.forEach((endpoint) => {\n    let promise = axios\n      .get(endpoint.url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Accept-Encoding\": \"identity\",\n        },\n      })\n      .then((response) => {\n        championEndpoints.push({ name: endpoint.name, data: response.data });\n      });\n    championPromises.push(promise);\n  });\n\n  await Promise.all(championPromises);\n  championPromises = [];\n\n  // Get data from Mobalytics GraphQL API\n  let mobalyticsPromise = axios(mobalyticsConfig)\n    .then(function (response) {\n      mobalyticsData = _.chain(response.data.data.info)\n        .flatMap(({ flatData }) => flatData)\n        .keyBy(\"riotSlug\")\n        .value();\n\n      console.log(\"Mobalytics data fetched\");\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  championPromises.push(mobalyticsPromise);\n  await Promise.all(championPromises);\n\n  // Get data from endpoints\n  championEndpoints.forEach((endpoint) => {\n    if (endpoint.name === EndpointNames.MerakiAnalytics) {\n      let data = endpoint.data;\n      Object.assign(mergedChampionData, data);\n    }\n  });\n\n  // Merge mobalytics data with mergedChampionData\n  mergedChampionData = _.merge(mergedChampionData, mobalyticsData);\n\n  for (const key of Object.keys(mergedChampionData)) {\n    // Save champion images\n    let icon = mergedChampionData[key].icon;\n    if (icon) {\n      let iconName = icon.split(\"/\").pop()?.split(\".\")[0] || \"\";\n      if (iconName && iconName.length > 0) {\n        // deepcode ignore PrototypePollution: won't fix\n        mergedChampionData[key].placeholder = await downloadImage(\n          `data/img/champions/${iconName}.webp`,\n          icon\n        );\n        // deepcode ignore PrototypePollution: won't fix\n        mergedChampionData[key].icon = `data/img/champions/${iconName}.webp`;\n      }\n    }\n  }\n\n  // Create a copy of the mergedChampionData\n  let lightweightChampionData = _.cloneDeep(mergedChampionData);\n\n  Object.keys(lightweightChampionData).forEach((key) => {\n    // Delete unneeded keys (abilities, skins, stats, key, slug)\n    delete lightweightChampionData[key].abilities;\n    delete lightweightChampionData[key].skins;\n    delete lightweightChampionData[key].stats;\n    delete lightweightChampionData[key].key;\n    delete lightweightChampionData[key].slug;\n  });\n\n  console.info(\"Writing champions data to file...\");\n\n  // Write the merged champions.json file\n  // deepcode ignore PT: Wont fix this right away\n  writeFileSync(\n    `data/${latestVersion}/champions.json`,\n    JSON.stringify(mergedChampionData)\n  );\n  writeFileSync(\n    `data/latest/champions.json`,\n    JSON.stringify(mergedChampionData)\n  );\n  // deepcode ignore PT: Wont fix this right away\n  writeFileSync(\n    `data/${latestVersion}/champions-summary.json`,\n    JSON.stringify(lightweightChampionData)\n  );\n  writeFileSync(\n    `data/latest/champions-summary.json`,\n    JSON.stringify(lightweightChampionData)\n  );\n};\n\n// Get the champions.json file from the different endpoints specified in champions.json\n// Return the custom merged champions.json file\nexport async function getChampions() {\n  const latestVersion = await getLatestVersion();\n  // const championsConfig = readJsonFile(\"endpoints/champions.json\");\n  let endpoints: Endpoint[] = getEndpoints(championsConfig, latestVersion);\n  // Create a folder in /data if it doesn't exist for the latest version\n  if (!existsSync(`data/${latestVersion}`)) {\n    mkdirSync(`data/${latestVersion}`);\n  }\n  // Create the folder latest in /data if it doesn't exist\n  if (!existsSync(`data/latest`)) {\n    mkdirSync(`data/latest`);\n  }\n  await mergeChampions(endpoints, latestVersion);\n}\n\n// const main = async () => {\n//   try {\n//     await getChampions();\n//     info(\"Successfully merged champions.json\");\n//   } catch (error) {\n//     setFailed(error.message);\n//   }\n// };\n\n// // Only run main if running locally\n// if (process.env.GITHUB_ACTIONS !== \"true\") {\n//   main();\n// }\n","import sharp from \"sharp\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport axios from \"axios\";\nimport { encode } from \"blurhash\";\n\nimport { blurHashToDataURL } from \"./blurhashDataURL.js\";\n\n/**\n * &gt;&gt;&gt; downloadImage(\"data/img/items/image.png\", \"http://www.example.com/image.png\")\n * @param {string} filename - The path of the file to be downloaded. Include the subfolder for champion or items\n * @param {string} url - The URL path to the image you want to download.\n * @returns {Promise<string>} Blurhash placeholder with a 4x4 size.\n */\nexport async function downloadImage(\n  filename: string,\n  url: string\n): Promise<string> {\n  if (!filename || !url) {\n    console.warn(\"No filename or url specified\");\n    return \"\";\n  }\n  let placeholder = \"\";\n\n  // Create folders\n  if (!existsSync(\"data/img/champions\")) {\n    mkdirSync(\"data/img/champions\", { recursive: true });\n  }\n  if (!existsSync(\"data/img/items\")) {\n    mkdirSync(\"data/img/items\", { recursive: true });\n  }\n  let axiosResponse = await axios\n    .get(url, {\n      responseType: \"arraybuffer\",\n      headers: {\n        \"Accept-Encoding\": \"identity\",\n      },\n    })\n    .catch((err) => console.error(err));\n  if (axiosResponse) {\n    console.log(\"Saving image \" + filename);\n    // Save the image as a file\n    await sharp(axiosResponse.data)\n      .toFile(filename)\n      .catch((err) => {\n        console.error(err);\n      });\n    // Create a placeholder\n    const { data, info } = await sharp(filename)\n      .raw()\n      .ensureAlpha()\n      .toBuffer({ resolveWithObject: true });\n\n    const clamped = new Uint8ClampedArray(data);\n    const blurhash = encode(clamped, info.width, info.height, 4, 4);\n    placeholder = blurhash;\n  }\n\n  return placeholder;\n}\n\n// test\n// eslint-disable-next-line no-unused-vars\nconst test = async () => {\n  let placeholder = \"\";\n  let blurhash = await downloadImage(\n    \"data/img/champions/Aatrox.png\",\n    \"https://ddragon.leagueoflegends.com/cdn/12.13.1/img/champion/Aatrox.png\"\n  );\n  console.log(\"Blurhash: \" + blurhash);\n  // Generate a 32x32 image from the blurhash\n  const base64 = blurHashToDataURL(blurhash, 32, 32);\n  if (base64) placeholder = base64;\n  console.log(\"Converted (base64): \" + placeholder);\n};\n\n// Run only if this file is called directly\n// if (!process.env.GITHUB_ACTIONS || process.env.GITHUB_ACTIONS === \"false\") {\n//   test();\n// }\n","import { decodeBlurHash } from \"fast-blurhash\";\n\nconst cache: Record<string, string> = {};\n\nexport function blurHashToDataURL(\n  hash: string | undefined,\n  width: number,\n  height: number\n): string | undefined {\n  if (!hash) return undefined;\n\n  const cachedBlurDataURL = cache[hash];\n\n  if (cachedBlurDataURL) {\n    return cachedBlurDataURL;\n  }\n\n  const pixels = decodeBlurHash(hash, width, height);\n  const dataURL = parsePixels(pixels, width, height);\n  cache[hash] = dataURL;\n  return dataURL;\n}\n\n// thanks to https://github.com/wheany/js-png-encoder\nfunction parsePixels(pixels: Uint8ClampedArray, width: number, height: number) {\n  const pixelsString = [...pixels]\n    .map((byte) => String.fromCharCode(byte))\n    .join(\"\");\n  const pngString = generatePng(width, height, pixelsString);\n  const dataURL =\n    typeof Buffer !== \"undefined\"\n      ? Buffer.from(getPngArray(pngString)).toString(\"base64\")\n      : btoa(pngString);\n  return \"data:image/png;base64,\" + dataURL;\n}\n\nfunction getPngArray(pngString: string) {\n  const pngArray = new Uint8Array(pngString.length);\n  for (let i = 0; i < pngString.length; i++) {\n    pngArray[i] = pngString.charCodeAt(i);\n  }\n  return pngArray;\n}\n\nfunction generatePng(width: number, height: number, rgbaString: string) {\n  const DEFLATE_METHOD = String.fromCharCode(0x78, 0x01);\n  const CRC_TABLE: number[] = [];\n  const SIGNATURE = String.fromCharCode(137, 80, 78, 71, 13, 10, 26, 10);\n  const NO_FILTER = String.fromCharCode(0);\n\n  let n, c, k;\n\n  // make crc table\n  for (n = 0; n < 256; n++) {\n    c = n;\n    for (k = 0; k < 8; k++) {\n      if (c & 1) {\n        c = 0xedb88320 ^ (c >>> 1);\n      } else {\n        c = c >>> 1;\n      }\n    }\n    CRC_TABLE[n] = c;\n  }\n\n  // Functions\n  function inflateStore(data: string) {\n    const MAX_STORE_LENGTH = 65535;\n    let storeBuffer = \"\";\n    let remaining;\n    let blockType;\n\n    for (let i = 0; i < data.length; i += MAX_STORE_LENGTH) {\n      remaining = data.length - i;\n      blockType = \"\";\n\n      if (remaining <= MAX_STORE_LENGTH) {\n        blockType = String.fromCharCode(0x01);\n      } else {\n        remaining = MAX_STORE_LENGTH;\n        blockType = String.fromCharCode(0x00);\n      }\n      // little-endian\n      storeBuffer +=\n        blockType +\n        String.fromCharCode(remaining & 0xff, (remaining & 0xff00) >>> 8);\n      storeBuffer += String.fromCharCode(\n        ~remaining & 0xff,\n        (~remaining & 0xff00) >>> 8\n      );\n\n      storeBuffer += data.substring(i, i + remaining);\n    }\n\n    return storeBuffer;\n  }\n\n  function adler32(data: string) {\n    let MOD_ADLER = 65521;\n    let a = 1;\n    let b = 0;\n\n    for (let i = 0; i < data.length; i++) {\n      a = (a + data.charCodeAt(i)) % MOD_ADLER;\n      b = (b + a) % MOD_ADLER;\n    }\n\n    return (b << 16) | a;\n  }\n\n  function updateCrc(crc: number, buf: string) {\n    let c = crc;\n    let b: number;\n\n    for (let n = 0; n < buf.length; n++) {\n      b = buf.charCodeAt(n);\n      c = CRC_TABLE[(c ^ b) & 0xff] ^ (c >>> 8);\n    }\n    return c;\n  }\n\n  function crc(buf: string) {\n    return updateCrc(0xffffffff, buf) ^ 0xffffffff;\n  }\n\n  function dwordAsString(dword: number) {\n    return String.fromCharCode(\n      (dword & 0xff000000) >>> 24,\n      (dword & 0x00ff0000) >>> 16,\n      (dword & 0x0000ff00) >>> 8,\n      dword & 0x000000ff\n    );\n  }\n\n  function createChunk(length: number, type: string, data: string) {\n    const CRC = crc(type + data);\n\n    return dwordAsString(length) + type + data + dwordAsString(CRC);\n  }\n\n  function createIHDR(width: number, height: number) {\n    const IHDRdata =\n      dwordAsString(width) +\n      dwordAsString(height) +\n      // bit depth\n      String.fromCharCode(8) +\n      // color type: 6=truecolor with alpha\n      String.fromCharCode(6) +\n      // compression method: 0=deflate, only allowed value\n      String.fromCharCode(0) +\n      // filtering: 0=adaptive, only allowed value\n      String.fromCharCode(0) +\n      // interlacing: 0=none\n      String.fromCharCode(0);\n\n    return createChunk(13, \"IHDR\", IHDRdata);\n  }\n\n  // PNG creations\n\n  const IEND = createChunk(0, \"IEND\", \"\");\n  const IHDR = createIHDR(width, height);\n\n  let scanlines = \"\";\n  let scanline;\n\n  for (let y = 0; y < rgbaString.length; y += width * 4) {\n    scanline = NO_FILTER;\n    if (Array.isArray(rgbaString)) {\n      for (let x = 0; x < width * 4; x++) {\n        scanline += String.fromCharCode(rgbaString[y + x] & 0xff);\n      }\n    } else {\n      scanline += rgbaString.substr(y, width * 4);\n    }\n    scanlines += scanline;\n  }\n\n  const compressedScanlines =\n    DEFLATE_METHOD +\n    inflateStore(scanlines) +\n    dwordAsString(adler32(scanlines));\n  const IDAT = createChunk(\n    compressedScanlines.length,\n    \"IDAT\",\n    compressedScanlines\n  );\n\n  const pngString = SIGNATURE + IHDR + IDAT + IEND;\n  return pngString;\n}\n","import axios from \"axios\";\n\n/**\n * Gets the latest version of DDragon from https://ddragon.leagueoflegends.com/api/versions.json\n * @returns {string} The latest version of the game.\n */\nexport const getLatestVersion = async () => {\n  const config = {\n    method: \"get\",\n    url: \"https://ddragon.leagueoflegends.com/api/versions.json\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      \"Accept-Encoding\": \"identity\",\n    },\n  };\n  const response = await axios(config)\n    .then((response) => {\n      return response.data[0];\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n  return response;\n};\n","export const queryString = {\n  query: `query ChampionsInfo{\n      info: queryChampionsV1Contents(top: 0){\n          flatData{\n              name\n              slug\n              antiDive\n              burst\n              control\n              damage\n              damageType\n              divePotential\n              engage\n              gankDenial\n              gankReliability\n              gankTurnAround\n              kite\n              mobility\n              pick\n              poke\n              preControl\n              preDamage\n              preMobility\n              preToughness\n              postControl\n              postDamage\n              postMobility\n              postToughness\n              skirmish\n              split\n              sustained\n              tags\n              toughness\n              utility\n              waveclear\n              powerSpikes{\n                  early\n                  mid\n                  late\n                }\n              key: riotId\n              riotSlug\n              difficultyLevel\n              difficulty{\n                  flatData{\n                      slug\n                      name\n                      level\n                    }\n                }\n            }\n        }\n    }`,\n  variables: {},\n};\n","import { EndpointSpec } from \"../types/endpoints.js\";\nimport { Endpoint } from \"../types/global.js\";\nimport { readFileSync } from \"fs\";\nexport const getEndpointUrl = (endpoint: EndpointSpec, version: string) => {\n  if (!version) {\n    throw new Error(\"Version is undefined\");\n  }\n  return `${endpoint.baseUrl}${endpoint.needsLatest ? version : \"\"}${\n    endpoint.resource\n  }`;\n};\n\nexport const getEndpoints = (\n  endpoints: EndpointSpec[],\n  version: string\n): Endpoint[] => {\n  if (!version) {\n    throw new Error(\"Version is undefined\");\n  }\n  return endpoints.map((endpoint) => ({\n    name: endpoint.name,\n    url: getEndpointUrl(endpoint, version),\n  }));\n};\n\nexport const readJsonFile = (path: string) => {\n  return JSON.parse(readFileSync(path, \"utf8\"));\n};\n","import axios from \"axios\";\nimport _ from \"lodash\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport { getLatestVersion } from \"~/src/utils/getLatestVersion.js\";\nimport { sanitizeText } from \"~/src/utils/sanitizeText.js\";\nimport {\n  getCommunityDragonItemData,\n  getMerakiItemData,\n  getBlitzItemData,\n  writeItems,\n} from \"~/src/utils/itemUtils.js\";\nimport { defaultValues } from \"~/src/utils/constants.js\";\nimport { downloadImage } from \"~/src/utils/downloadImages.js\";\n// Load env variables from .env file\nimport \"dotenv/config\";\nimport { Endpoint, EndpointItemData } from \"~/src/types/global.js\";\nimport { ItemObject } from \"~/src/types/items.js\";\nimport itemsConfig from \"~/endpoints/items.json\";\nimport { getEndpoints, getEndpointUrl } from \"../utils/endpointUtils.js\";\n\nconst mergeItems = async (\n  endpoints: Endpoint[],\n  latestVersion: string\n): Promise<void> => {\n  let itemEndpointsData: EndpointItemData[] = [];\n  let itemPromises: Promise<void>[] = [];\n\n  endpoints.forEach((endpoint) => {\n    console.log(`Fetching ${endpoint.name} items...`);\n    let promise = axios\n      .get(endpoint.url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Accept-Encoding\": \"identity\",\n        },\n      })\n      .then((response) => {\n        console.log(`Fetched ${endpoint.name} items`);\n        itemEndpointsData.push({ name: endpoint.name, data: response.data });\n      });\n    itemPromises.push(promise);\n  });\n  await Promise.all(itemPromises);\n\n  let mergedItems: ItemObject = {};\n  itemEndpointsData.forEach((endpointData) => {\n    switch (endpointData.name) {\n      case \"Blitz\":\n        Object.assign(mergedItems, getBlitzItemData(endpointData));\n        break;\n\n      case \"MerakiAnalytics\":\n        mergedItems = getMerakiItemData(\n          endpointData,\n          itemEndpointsData,\n          mergedItems\n        );\n        break;\n\n      case \"CommunityDragon\":\n        mergedItems = getCommunityDragonItemData(endpointData, mergedItems);\n        break;\n    }\n  });\n\n  // Merge the default values with every item in mergedItems\n  mergedItems = _.mapValues(mergedItems, (item) => {\n    return _.defaults(item, defaultValues);\n  });\n\n  console.log(`Merged ${Object.keys(mergedItems).length} items`);\n\n  // Sanitize item description for each item in mergedItems\n  let itemIconPromises: Promise<void>[] = [];\n\n  Object.entries(mergedItems).forEach(async ([key, item]) => {\n    if (item.description) {\n      mergedItems[key].description = sanitizeText(item);\n    }\n    if (item.icon) {\n      let iconName = item.icon.split(\"/\").pop()?.split(\".\")[0] || \"\";\n      if (iconName && iconName.length > 0) {\n        let promise = downloadImage(\n          `data/img/items/${iconName}.webp`,\n          item.icon\n        ).then((placeholder) => {\n          mergedItems[key].icon = `data/img/items/${iconName}.webp`;\n          mergedItems[key].placeholder = placeholder;\n          console.log(\"Downloaded icon for item \" + mergedItems[key].name);\n        });\n        itemIconPromises.push(promise);\n      }\n    }\n  });\n\n  await Promise.all(itemIconPromises);\n\n  console.info(\"Writing items data to file...\");\n  writeItems(latestVersion, mergedItems);\n};\n\n// Get the items.json file from the different endpoints specified in items.json\n// Return the custom merged items.json file\nexport const getItems = async () => {\n  const latestVersion = await getLatestVersion();\n  let endpoints = getEndpoints(itemsConfig, latestVersion);\n  console.log(\"Endpoints: \", endpoints);\n  // Create a folder in /data if it doesn't exist for the latest version\n  if (!existsSync(`data/${latestVersion}`)) {\n    mkdirSync(`data/${latestVersion}`);\n  }\n  // Create the folder latest in /data if it doesn't exist\n  if (!existsSync(`data/latest`)) {\n    mkdirSync(`data/latest`);\n  }\n  await mergeItems(endpoints, latestVersion);\n};\n\n// const test = async () => {\n//   try {\n//     await getItems();\n//     console.log(\"Successfully merged items.json\");\n//   } catch (error: any) {\n//     console.error(\"Error: \" + error.message);\n//   }\n// };\n\n// // Only run test if running locally\n// if (!process.env.GITHUB_ACTIONS || process.env.GITHUB_ACTIONS === \"false\") {\n//   test();\n// }\n","import _ from \"lodash\";\nimport DOMPurify from \"isomorphic-dompurify\";\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\nimport { Item } from \"~/src/types/items.js\";\n\nconst pascalCaseTags = [\n  \"Active\",\n  \"Attention\",\n  \"FlavorText\",\n  \"Healing\",\n  \"KeywordStealth\",\n  \"MagicDamage\",\n  \"MainText\",\n  \"Passive\",\n  \"PhysicalDamage\",\n  \"RarityGeneric\",\n  \"RarityLegendary\",\n  \"RarityMythic\",\n  \"Rules\",\n  \"ScaleLevel\",\n  \"ScaleMana\",\n  \"Stats\",\n  \"Status\",\n  \"TrueDamage\",\n];\n\n/**\n * Function to convert a string from camel case or snake case to pascal case\n * @param {string} str - The string to convert to PascalCase.\n */\nconst toPascalCase = (str: string) => {\n  return str\n    .split(\"_\")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\"\");\n};\n\n/**\n * It takes a string, sanitizes it, parses it, and returns a string.\n * @param {Item} item - {\n * @returns {string} A string of XML.\n */\nexport function sanitizeText(item: Item) {\n  if (!item) return \"\";\n  let text = item.description;\n  if (!text) {\n    return;\n  }\n  // Remove curly braces from API placeholders\n  text = text.replaceAll(\"{\", \"\");\n  text = text.replaceAll(\"}\", \"\");\n\n  // Sanitize text with dompurify\n  let sanitizedText = DOMPurify.sanitize(text, {\n    ADD_TAGS: [\n      \"active\",\n      \"attention\",\n      \"flavorText\",\n      \"healing\",\n      \"keywordStealth\",\n      \"magicDamage\",\n      \"mainText\",\n      \"passive\",\n      \"physicalDamage\",\n      \"rarityGeneric\",\n      \"rarityLegendary\",\n      \"rarityMythic\",\n      \"rules\",\n      \"scaleLevel\",\n      \"scaleMana\",\n      \"stats\",\n      \"status\",\n      \"trueDamage\",\n    ],\n    FORBID_TAGS: [\"br\"],\n  });\n\n  // Replace all lowercase words inside the sanitizedText with the camelCaseTags version\n  pascalCaseTags.forEach((tag) => {\n    const lowercaseTag = tag.toLowerCase();\n    // Replace lowercase tag with tag\n    sanitizedText = _.replace(\n      sanitizedText,\n      new RegExp(lowercaseTag, \"g\"),\n      tag\n    );\n  });\n\n  // Parse with fast-xml-parser\n  const parser = new XMLParser({\n    preserveOrder: true,\n  });\n  const xml = parser.parse(sanitizedText);\n  // Remove stats from the xml object\n  if (xml.mainText?.stats) {\n    for (let key in xml.mainText.stats) {\n      delete xml.mainText.stats[key];\n    }\n  }\n  // Convert xml object to XML string\n  const builder = new XMLBuilder({\n    preserveOrder: true,\n  });\n  let xmlString = builder.build(xml);\n\n  // Add stats between <Stats> tag and </Stats> tag\n  xmlString = parseStats(xmlString, item);\n\n  xmlString = parseActives(xmlString);\n\n  // Replace in xmlString:\n  // Add a whitespace (' ') before a less than character ('<') if the preceding character is a letter (a-z, A-Z) or a colon (':')\n  const lessThanRegex = /([a-zA-Z,:])</g;\n  xmlString = xmlString.replace(lessThanRegex, \"$1 <\");\n\n  return xmlString;\n}\n\n/**\n * Takes an XML string and an item object, and replaces the string with a JSX element\n * @param {string} xmlString - The string of the xml file\n * @param {Item} item - The item object that contains the stats\n * @returns {string} The xmlString is being returned with the stats of the item.\n * @example\n * Returns: <Stats><Stat name=\"Attack Speed\">1.5</Stat></Stats>\n */\nexport function parseStats(xmlString: string, item: Item): string {\n  const statsRegex = /<Stats>(.*?)<\\/Stats>/g;\n  const statsMatch = xmlString.match(statsRegex);\n  if (statsMatch) {\n    const statsTag = statsMatch[0];\n    let statsString = \"\";\n\n    // Create the stats string with the stats of the item\n    if (item.stats) {\n      Object.entries(item.stats).forEach(([keyItem, value]) => {\n        Object.entries(value).forEach(([key2, value2]) => {\n          let statName = toPascalCase(key2) + toPascalCase(keyItem);\n          statsString += `<Stat name=\"${statName}\">${value2}${\n            key2.includes(\"percent\") ? \"%\" : \"\"\n          }</Stat>`;\n        });\n      });\n    }\n\n    const statText = `<Stats>${statsString}</Stats>`;\n    xmlString = _.replace(xmlString, statsTag, statText);\n  }\n  return xmlString;\n}\n\n/** Combine all two adjacent Active tags when the first one is \"Active -\"\n * @param {string} xmlString - The string of the xml file\n * @returns {string} Parsed string\n * @example\n * Input: <Active>Active -</Active><Active>Lorem ipsum</Active>\n * Result:  <Active>Active - Lorem ipsum</Active>\n */\nexport function parseActives(xmlString: string): string {\n  const activeRegex = /<Active>(.*?)<\\/Active>/g;\n  const activeMatch = xmlString.match(activeRegex);\n  let skipNext = false;\n  if (activeMatch) {\n    // Loop through each match\n    for (const match of activeMatch) {\n      // If skipNext is set to true, skip the next match\n      if (skipNext === true) {\n        skipNext = false;\n        // Delete the match from the xmlString\n        xmlString = _.replace(xmlString, match, \"\");\n        continue;\n      }\n      // Get the content of the match\n      const tagContent = match.replace(/<\\/?Active>/g, \"\");\n      // Check if the content is \"Active -\"\n      if (tagContent === \"Active -\") {\n        // Replace the match with the \"Active - \" and the content of the next match\n        const nextTagContent = activeMatch[activeMatch.indexOf(match) + 1]\n          .replace(/<\\/?Active>/g, \"\")\n          .trim();\n\n        xmlString = _.replace(\n          xmlString,\n          match,\n          `<Active>Active - ${nextTagContent}</Active>`\n        );\n        // Skip the next match\n        skipNext = true;\n      }\n    }\n  }\n  return xmlString;\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport _ from \"lodash\";\nimport { EndpointItemData, EndpointNames } from \"~/src/types/global.js\";\nimport {\n  BlitzRoot,\n  ChampionClass,\n  CommunityDragonItem,\n  MerakiItem,\n  MerakiItemObject,\n  MerakiStatExtended,\n  MerakiStats,\n  MerakiTag,\n  Passive,\n} from \"~/src/types/items.js\";\nimport camelcaseKeys from \"camelcase-keys\";\n\n// Function to convert a string from snake case to camel case\nexport function snakeToCamel(str: string) {\n  return str.replace(/(_\\w)/g, (m) => m[1].toUpperCase());\n}\n\nexport function writeItems(latestVersion: string, mergedItems: {}) {\n  // Write the merged items.json file in the latestVersion folder \"./data/\" + latestVersion + \"/items.json\";\n  let rootPath = \"data/\";\n  let latestVersionPath = path.join(rootPath, latestVersion, \"/items.json\");\n  latestVersionPath = path.normalize(latestVersionPath);\n  fs.writeFileSync(latestVersionPath, JSON.stringify(mergedItems));\n  // Also save a copy in the latest folder\n  fs.writeFileSync(`data/latest/items.json`, JSON.stringify(mergedItems));\n}\n\nfunction filterPassives(passives: Passive[]) {\n  return passives.map((passive: Passive) => {\n    // Flatten the stats object to prevent arrays of one object\n    let stats = Object.entries(passive.stats).map(([name, stat]) => {\n      if (Array.isArray(stat)) {\n        return { [name]: stat[0] };\n      } else {\n        return { [name]: stat };\n      }\n    });\n    passive.stats = filterStats(stats);\n    return passive;\n  });\n}\n\nfunction getCamelCaseStats(stats: MerakiStats) {\n  let camelCaseStats: MerakiStats = camelcaseKeys(stats, { deep: true });\n  // Loop trough each of the stats and filter out entries with value 0\n  return _(camelCaseStats)\n    .pickBy(_.isObject)\n    .mapValues((stat) => _.pickBy(stat, _.identity))\n    .omitBy(_.isEmpty)\n    .value() as MerakiStats;\n}\n\nfunction filterStats(stats: MerakiStats | MerakiStats[]) {\n  if (Array.isArray(stats)) {\n    return getCamelCaseStats(stats[0]);\n  } else {\n    return getCamelCaseStats(stats);\n  }\n}\n\nfunction getChampionClasses(itemValues: MerakiItem) {\n  let classes = _.get(itemValues, \"shop.tags\");\n  if (classes.length > 0) {\n    // Filter class names that are defined in the ChampionClass enum\n    classes = _.filter(classes, (className: MerakiTag | ChampionClass) => {\n      return _.includes(Object.values(ChampionClass), className);\n    });\n  }\n  return classes;\n}\n\nexport function getCommunityDragonItemData(\n  endpointData: EndpointItemData,\n  mergedItems: { [x: string]: any }\n) {\n  let { data } = endpointData as { data: CommunityDragonItem[] };\n  const requiredKeysCD: (keyof CommunityDragonItem)[] = [\n    \"categories\",\n    \"inStore\",\n    \"maxStacks\",\n  ];\n  data.forEach((item) => {\n    const key = item.id;\n    let filteredItem = _.pick(item, requiredKeysCD);\n    // Append the filteredItem to the mergedItems in the corresponding key\n    mergedItems[key] = { ...mergedItems[key], ...filteredItem };\n  });\n\n  return mergedItems;\n}\n\nexport function getMerakiItemData(\n  endpointData: EndpointItemData,\n  itemEndpointsData: EndpointItemData[],\n  mergedItems: { [x: string]: any }\n) {\n  let { data } = endpointData as { data: MerakiItemObject };\n  const requiredKeysMeraki: (keyof MerakiItem)[] = [\n    \"icon\",\n    \"iconOverlay\",\n    \"nicknames\",\n    \"requiredChampion\",\n    \"simpleDescription\",\n    \"tier\",\n    \"stats\",\n    \"passives\",\n    \"active\",\n  ];\n  // Loop through each item in the MerakiAnalytics endpoint\n  Object.entries(data).forEach(([itemKey, itemValues]) => {\n    let filteredItem = _.pick(itemValues, requiredKeysMeraki);\n    // Get an array of champion classes from nested object property\n    let classes = getChampionClasses(itemValues);\n    // Remove empty keys from stats to reduce the size of the json file\n    let stats = _.get(itemValues, \"stats\");\n    if (stats) {\n      let newStats = filterStats(stats);\n\n      if (newStats) {\n        data[itemKey].stats = newStats;\n        filteredItem.stats = newStats;\n      }\n    }\n\n    // Remove empty passives and active nested values\n    let passives = _.get(itemValues, \"passives\");\n    if (passives && passives.length > 0) {\n      // Filter passive stats to remove empty values\n      let newPassives = filterPassives(passives);\n      if (newPassives) {\n        data[itemKey].passives = newPassives;\n        filteredItem.passives = newPassives;\n      }\n      // Check if in any of the passives the mythic property is set to true\n      let mythic = _.some(passives, (passive) => {\n        return passive.mythic;\n      });\n      if (mythic) {\n        // Overwrite the mythic property in the item (because this data is more accurate)\n        filteredItem.mythic = true;\n      } else {\n        filteredItem.mythic = false;\n      }\n    }\n\n    // Validate that the icon is a valid URL\n    if (\n      !filteredItem.icon ||\n      (filteredItem.icon && !filteredItem.icon.startsWith(\"http\"))\n    ) {\n      const CDragonData = itemEndpointsData.find(\n        (endpoint) => endpoint.name === EndpointNames.CommunityDragon\n      )?.data as CommunityDragonItem[];\n      let CDragonIconPath = CDragonData.find(\n        (item) => item.id === itemValues.id\n      )?.iconPath;\n\n      if (CDragonIconPath) {\n        // Strip text after Icons2d/ from the icon path\n        CDragonIconPath = CDragonIconPath.split(\"Icons2D/\")[1].toLowerCase();\n        // Set fallback icon if the icon is not a valid URL\n        filteredItem.icon =\n          \"https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/assets/items/icons2d/\" +\n          CDragonIconPath;\n\n        console.warn(\n          `Item ${itemValues.name}-${itemValues.id} has an invalid icon URL, using fallback icon`\n        );\n      }\n    }\n    // Append the filteredItem and the classes to the mergedItems in the corresponding key\n    mergedItems[itemKey] = {\n      ...mergedItems[itemKey],\n      ...filteredItem,\n      classes: classes,\n    };\n  });\n\n  return mergedItems;\n}\n\nexport function getBlitzItemData(endpoint: EndpointItemData) {\n  let { data } = endpoint.data as BlitzRoot;\n  // Parse numbers\n  Object.entries(data).forEach(([key, itemData]) => {\n    Object.entries(itemData).forEach(([propKey, itemValue]) => {\n      if (propKey === \"id\") {\n        // Convert id to number\n        data[key][propKey] = parseInt(itemValue, 10);\n      } else if (\n        (propKey === \"maps\" || propKey === \"from\" || propKey === \"into\") &&\n        itemValue !== null\n      ) {\n        data[key][propKey] = itemValue.map(Number);\n      } else if (propKey === \"depth\") {\n        // Delete the depth key\n        delete data[key][\"depth\"];\n      } else if (propKey === \"stats\") {\n        // Delete stats from blitzEndpoint\n        delete data[key][\"stats\"];\n      }\n    });\n  });\n  return data;\n}\n\nconst test = () => {\n  let passives: Passive[] = [\n    {\n      unique: true,\n      mythic: false,\n      name: null,\n      effects:\n        \"This item gains {{as|20 '''bonus''' health}}, {{as|20 '''bonus''' mana}}, and {{as|4 ability power}} every minute, up to 10 times, for a maximum of {{as|200 '''bonus''' health}}, {{as|200 '''bonus''' mana}}, and {{as|40 ability power}}. Upon reaching maximum stacks, gain a level that preserves your current experience (cap remains at level 18) and increase all effects of ''Eternity'' by 50%.\",\n      range: null,\n      stats: {\n        abilityPower: {\n          flat: 4.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        armor: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        armorPenetration: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        attackDamage: [\n          {\n            flat: 0.0,\n            percent: 0.0,\n            perLevel: 0.0,\n            percentPerLevel: 0.0,\n            percentBase: 0.0,\n            percentBonus: 0.0,\n          },\n        ],\n        attackSpeed: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        cooldownReduction: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        criticalStrikeChance: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        goldPer_10: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        healAndShieldPower: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        health: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        healthRegen: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        lethality: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        lifesteal: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        magicPenetration: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        magicResistance: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        mana: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        manaRegen: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        movespeed: 0.0,\n        abilityHaste: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        omnivamp: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        tenacity: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n      },\n    },\n    {\n      unique: true,\n      mythic: false,\n      name: \"Eternity\",\n      effects:\n        \"Restore {{as|mana}} equal to 8% of {{tt|pre-mitigation damage|Damage calculated before modifiers}} taken from champions, and {{tip|heal}} for an amount equal to {{as|20% of mana spent}}, up to 15 per cast. Toggled abilities can only heal for up to 15 per second. For every 250 healing or {{as|mana}} restored this way, gain {{as|25% '''bonus''' movement speed}} that decays over 2 seconds.\",\n      range: null,\n      stats: {\n        abilityPower: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        armor: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        armorPenetration: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        attackDamage: [\n          {\n            flat: 0.0,\n            percent: 0.0,\n            perLevel: 0.0,\n            percentPerLevel: 0.0,\n            percentBase: 0.0,\n            percentBonus: 0.0,\n          },\n        ],\n        attackSpeed: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        cooldownReduction: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        criticalStrikeChance: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        goldPer_10: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        healAndShieldPower: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        health: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        healthRegen: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        lethality: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        lifesteal: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        magicPenetration: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        magicResistance: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        mana: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        manaRegen: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        movespeed: 0.0,\n        abilityHaste: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        omnivamp: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        tenacity: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n      },\n    },\n    {\n      unique: true,\n      mythic: true,\n      name: \"Mythic\",\n      effects: null,\n      range: 0,\n      stats: {\n        abilityPower: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        armor: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        armorPenetration: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        attackDamage: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        attackSpeed: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        cooldownReduction: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        criticalStrikeChance: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        goldPer_10: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        healAndShieldPower: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        health: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        healthRegen: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        lethality: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        lifesteal: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        magicPenetration: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        magicResistance: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        mana: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        manaRegen: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        movespeed: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        abilityHaste: {\n          flat: 5.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        omnivamp: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n        tenacity: {\n          flat: 0.0,\n          percent: 0.0,\n          perLevel: 0.0,\n          percentPerLevel: 0.0,\n          percentBase: 0.0,\n          percentBonus: 0.0,\n        },\n      },\n    },\n  ];\n\n  let stats = {\n    abilityPower: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    armor: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    armorPenetration: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    attackDamage: {\n      flat: 65.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    attackSpeed: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    cooldownReduction: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    criticalStrikeChance: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    goldPer_10: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    healAndShieldPower: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    health: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    healthRegen: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    lethality: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    lifesteal: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    magicPenetration: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    magicResistance: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    mana: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    manaRegen: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    movespeed: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    abilityHaste: {\n      flat: 20.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    omnivamp: {\n      flat: 0.0,\n      percent: 9.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n    tenacity: {\n      flat: 0.0,\n      percent: 0.0,\n      perLevel: 0.0,\n      percentPerLevel: 0.0,\n      percentBase: 0.0,\n      percentBonus: 0.0,\n    },\n  };\n\n  let newPassives = filterPassives(passives);\n  newPassives.forEach((passive) => {\n    console.log(passive?.stats);\n  });\n  console.log(\"Stats\", filterStats(stats));\n};\n\n// if (!process.env.GITHUB_ACTIONS || process.env.GITHUB_ACTIONS === \"false\") {\n//   test();\n// }\n","export type ItemObject = Record<string, Item>;\n\nexport interface Item {\n  id: number;\n  name: string;\n  description: null | string;\n  maps: number[];\n  gold: Gold;\n  into: number[];\n  mythic: boolean;\n  icon: string;\n  iconOverlay: boolean;\n  nicknames: string[];\n  requiredChampion: RequiredChampion;\n  simpleDescription: null | string;\n  tier: number;\n  stats: Stats;\n  classes: ChampionClass[];\n  categories: Category[];\n  inStore: boolean;\n  maxStacks: number;\n  from: number[];\n  placeholder: string;\n}\n\nexport enum Category {\n  AbilityHaste = \"AbilityHaste\",\n  Active = \"Active\",\n  Armor = \"Armor\",\n  ArmorPenetration = \"ArmorPenetration\",\n  AttackSpeed = \"AttackSpeed\",\n  Aura = \"Aura\",\n  Boots = \"Boots\",\n  Consumable = \"Consumable\",\n  CooldownReduction = \"CooldownReduction\",\n  CriticalStrike = \"CriticalStrike\",\n  Damage = \"Damage\",\n  GoldPer = \"GoldPer\",\n  Health = \"Health\",\n  HealthRegen = \"HealthRegen\",\n  Jungle = \"Jungle\",\n  Lane = \"Lane\",\n  LifeSteal = \"LifeSteal\",\n  MagicPenetration = \"MagicPenetration\",\n  MagicResist = \"MagicResist\",\n  Mana = \"Mana\",\n  ManaRegen = \"ManaRegen\",\n  NonbootsMovement = \"NonbootsMovement\",\n  OnHit = \"OnHit\",\n  Slow = \"Slow\",\n  SpellBlock = \"SpellBlock\",\n  SpellDamage = \"SpellDamage\",\n  SpellVamp = \"SpellVamp\",\n  Stealth = \"Stealth\",\n  Tenacity = \"Tenacity\",\n  Trinket = \"Trinket\",\n  Vision = \"Vision\",\n}\n\nexport interface Gold {\n  base: number;\n  purchasable: boolean;\n  total: number;\n  sell: number;\n}\n\nexport enum RequiredChampion {\n  Empty = \"\",\n  FiddleSticks = \"FiddleSticks\",\n  Gangplank = \"Gangplank\",\n}\n\nexport interface Stats {\n  abilityPower?: FlatNumber;\n  armor?: FlatNumber;\n  armorPenetration?: PercentNumber;\n  attackDamage?: FlatNumber;\n  attackSpeed?: FlatNumber;\n  cooldownReduction?: CooldownReduction;\n  criticalStrikeChance?: PercentNumber;\n  healAndShieldPower?: FlatNumber;\n  health?: FlatNumber;\n  healthRegen?: MixedNumber;\n  lethality?: FlatNumber;\n  lifesteal?: PercentNumber;\n  magicPenetration?: MixedNumber;\n  magicResistance?: FlatNumber;\n  mana?: FlatNumber;\n  manaRegen?: PercentNumber;\n  movespeed?: MixedNumber;\n  abilityHaste?: FlatNumber;\n  omnivamp?: PercentNumber;\n  tenacity?: FlatNumber;\n  goldPer10?: FlatNumber;\n}\n\nexport interface FlatNumber {\n  flat?: number;\n}\n\nexport interface PercentNumber {\n  percent?: number;\n}\n\nexport interface CooldownReduction {}\n\nexport interface MixedNumber {\n  percent?: number;\n  flat?: number;\n}\n\n// CommunityDragon types\n\nexport interface CommunityDragonItem {\n  id: number;\n  name: string;\n  description: string;\n  active: boolean;\n  inStore: boolean;\n  from: number[];\n  to: number[];\n  categories: Category[];\n  maxStacks: number;\n  requiredChampion: RequiredChampion;\n  requiredAlly: string;\n  requiredBuffCurrencyName: string;\n  requiredBuffCurrencyCost: number;\n  specialRecipe: number;\n  isEnchantment: boolean;\n  price: number;\n  priceTotal: number;\n  iconPath: string;\n}\n\n// Meraki types\nexport type MerakiItemObject = Record<string, MerakiItem>;\n\nexport interface MerakiItem {\n  name: string;\n  id: number;\n  tier: number;\n  rank: any[];\n  buildsFrom?: number[];\n  buildsInto?: number[];\n  specialRecipe?: number;\n  noEffects?: boolean;\n  removed: boolean;\n  requiredChampion?: RequiredChampion;\n  requiredAlly?: string;\n  icon: string;\n  simpleDescription?: null | string;\n  nicknames: string[];\n  passives: Passive[];\n  active: Active[];\n  stats: MerakiStats;\n  shop: Shop;\n  iconOverlay: boolean;\n  builds_from?: number[];\n  builds_into?: number[];\n  special_recipe?: number;\n  no_effects?: boolean;\n  required_champion?: string;\n  required_ally?: string;\n  simple_description?: null | string;\n  mythic?: boolean;\n}\n\nexport interface Active {\n  unique: boolean;\n  name: null | string;\n  effects: string;\n  range: number | null;\n  cooldown: null;\n}\n\nexport interface Passive {\n  unique: boolean;\n  mythic: boolean;\n  name: null | string;\n  effects: null | string;\n  cooldown: null | string;\n  range: number | null;\n  stats: MerakiStats;\n}\n\nexport interface Shop {\n  prices: Prices;\n  purchasable: boolean;\n  tags: MerakiTag[];\n}\n\nexport interface Prices {\n  total: number;\n  combined: number;\n  sell: number;\n}\n\nexport enum MerakiTag {\n  AbilityPower = \"ABILITY_POWER\",\n  ArmorPen = \"ARMOR_PEN\",\n  Assassin = \"ASSASSIN\",\n  AttackDamage = \"ATTACK_DAMAGE\",\n  AttackSpeed = \"ATTACK_SPEED\",\n  Fighter = \"FIGHTER\",\n  HealthAndReg = \"HEALTH_AND_REG\",\n  LifestealVamp = \"LIFESTEAL_VAMP\",\n  Mage = \"MAGE\",\n  MagicPen = \"MAGIC_PEN\",\n  ManaAndReg = \"MANA_AND_REG\",\n  Marksman = \"MARKSMAN\",\n  Movement = \"MOVEMENT\",\n  OnhitEffects = \"ONHIT_EFFECTS\",\n  Support = \"SUPPORT\",\n  Tank = \"TANK\",\n}\n\nexport enum ChampionClass {\n  Assassin = \"ASSASSIN\",\n  Fighter = \"FIGHTER\",\n  Mage = \"MAGE\",\n  Marksman = \"MARKSMAN\",\n  Support = \"SUPPORT\",\n  Tank = \"TANK\",\n}\n\nexport interface MerakiStats {\n  abilityPower?: MerakiStatExtended;\n  armor?: MerakiStatExtended;\n  armorPenetration?: MerakiStatExtended;\n  attackDamage?: MerakiStatExtended | MerakiStatExtended[];\n  attackSpeed?: MerakiStatTypeBase;\n  cooldownReduction?: MerakiStatExtended;\n  criticalStrikeChance?: MerakiStatExtended;\n  goldPer_10?: MerakiStatTypeBase;\n  goldPer10?: MerakiStatTypeBase;\n  healAndShieldPower?: MerakiStatTypeBase;\n  health?: MerakiStatExtended;\n  healthRegen?: MerakiStatExtended;\n  lethality?: MerakiStatExtended;\n  lifesteal?: MerakiStatExtended;\n  magicPenetration?: MerakiStatExtended;\n  magicResistance?: MerakiStatExtended;\n  mana?: MerakiStatTypeBase;\n  manaRegen?: MerakiStatExtended;\n  movespeed?: MerakiStatExtended | number;\n  abilityHaste?: MerakiStatExtended;\n  omnivamp?: MerakiStatTypeBase;\n  tenacity?: MerakiStatTypeBase;\n  ability_power?: MerakiStatTypeBase;\n  armor_penetration?: MerakiStatExtended;\n  attack_damage?: MerakiStatExtended;\n  attack_speed?: MerakiStatExtended;\n  cooldown_reduction?: MerakiStatTypeBase;\n  critical_strike_chance?: MerakiStatExtended;\n  gold_per_10?: MerakiStatTypeBase;\n  heal_and_shield_power?: MerakiStatTypeBase;\n  health_regen?: MerakiStatTypeBase;\n  magic_penetration?: MerakiStatTypeBase;\n  magic_resistance?: MerakiStatTypeBase;\n  mana_regen?: MerakiStatExtended;\n  ability_haste?: MerakiStatTypeBase;\n  [key: string]: MerakiStatExtended | MerakiStatExtended[] | number | undefined;\n}\n\nexport interface MerakiStatTypeBase {\n  flat?: number;\n  percent?: number;\n  perLevel?: number;\n  percentPerLevel?: number;\n  percentBase?: number;\n  percentBonus?: number;\n}\n\nexport interface MerakiStatExtended extends Partial<MerakiStatTypeBase> {\n  per_level?: number;\n  percent_per_level?: number;\n  percent_base?: number;\n  percent_bonus?: number;\n}\n\n// Blitz types\nexport interface BlitzRoot {\n  type: string;\n  version: string;\n  basic: Basic;\n  data: BlitzData;\n  groups: Group[];\n  tree: Tree[];\n}\n\nexport interface Basic {\n  name: string;\n  rune: Rune;\n  gold: Gold;\n  group: string;\n  description: string;\n  colloq: string;\n  plaintext: string;\n  consumed: boolean;\n  stacks: number;\n  depth: number;\n  consumeOnFull: boolean;\n  from: any[];\n  into: any[];\n  specialRecipe: number;\n  inStore: boolean;\n  hideFromAll: boolean;\n  requiredChampion: string;\n  requiredAlly: string;\n  stats: { [key: string]: number };\n  tags: any[];\n  maps: { [key: string]: boolean };\n}\n\nexport interface Gold {\n  base: number;\n  total: number;\n  sell: number;\n  purchasable: boolean;\n}\n\nexport interface Rune {\n  isrune: boolean;\n  tier: number;\n  type: string;\n}\n\nexport type BlitzData = Record<string, BlitzItem>;\n\nexport interface BlitzItem {\n  id: number | string;\n  name: string;\n  description: string;\n  stats?: BlitzStats;\n  maps: string[];\n  gold: Gold;\n  into?: string[];\n  mythic: boolean;\n  from?: string[];\n  depth?: number;\n}\n\nexport interface BlitzStats {\n  FlatArmorMod?: number;\n  FlatCritChanceMod?: number;\n  FlatHPPoolMod?: number;\n  FlatHPRegenMod?: number;\n  FlatMagicDamageMod?: number;\n  FlatMovementSpeedMod?: number;\n  FlatMPPoolMod?: number;\n  FlatPhysicalDamageMod?: number;\n  FlatSpellBlockMod?: number;\n  PercentAttackSpeedMod?: number;\n  PercentLifeStealMod?: number;\n  PercentMovementSpeedMod?: number;\n}\n\nexport interface Group {\n  id: string;\n  MaxGroupOwnable: string;\n}\n\nexport interface Tree {\n  header: string;\n  tags: string[];\n}\n","// Set default values for required keys\nexport const defaultValues = {\n  categories: [],\n  classes: [],\n  description: null,\n  from: [],\n  gold: { base: 0, purchasable: false, total: 0, sell: 0 },\n  icon: \"\",\n  iconOverlay: false,\n  id: -1,\n  inStore: false,\n  into: [],\n  maps: [],\n  maxStacks: 0,\n  mythic: false,\n  name: \"\",\n  nicknames: [],\n  placeholder: \"\",\n  requiredChampion: \"\",\n  simpleDescription: \"\",\n  stats: {},\n  tier: 0,\n};\n"],"mappings":";AAAA,SAAS,YAAY;;;ACArB,SAAS,eAAe,cAAAA,aAAY,aAAAC,kBAAiB;AACrD,OAAOC,YAAW;AAClB,OAAO,OAAO;AAEd,OAAO;;;ACJP,OAAO,WAAW;AAClB,SAAS,YAAY,iBAAiB;AACtC,OAAO,WAAW;AAClB,SAAS,cAAc;;;ACHvB,SAAS,sBAAsB;;;ADa/B,eAAsB,cACpB,UACA,KACiB;AACjB,MAAI,CAAC,YAAY,CAAC,KAAK;AACrB,YAAQ,KAAK,8BAA8B;AAC3C,WAAO;AAAA,EACT;AACA,MAAI,cAAc;AAGlB,MAAI,CAAC,WAAW,oBAAoB,GAAG;AACrC,cAAU,sBAAsB,EAAE,WAAW,KAAK,CAAC;AAAA,EACrD;AACA,MAAI,CAAC,WAAW,gBAAgB,GAAG;AACjC,cAAU,kBAAkB,EAAE,WAAW,KAAK,CAAC;AAAA,EACjD;AACA,MAAI,gBAAgB,MAAM,MACvB,IAAI,KAAK;AAAA,IACR,cAAc;AAAA,IACd,SAAS;AAAA,MACP,mBAAmB;AAAA,IACrB;AAAA,EACF,CAAC,EACA,MAAM,CAAC,QAAQ,QAAQ,MAAM,GAAG,CAAC;AACpC,MAAI,eAAe;AACjB,YAAQ,IAAI,kBAAkB,QAAQ;AAEtC,UAAM,MAAM,cAAc,IAAI,EAC3B,OAAO,QAAQ,EACf,MAAM,CAAC,QAAQ;AACd,cAAQ,MAAM,GAAG;AAAA,IACnB,CAAC;AAEH,UAAM,EAAE,MAAM,MAAAC,MAAK,IAAI,MAAM,MAAM,QAAQ,EACxC,IAAI,EACJ,YAAY,EACZ,SAAS,EAAE,mBAAmB,KAAK,CAAC;AAEvC,UAAM,UAAU,IAAI,kBAAkB,IAAI;AAC1C,UAAM,WAAW,OAAO,SAASA,MAAK,OAAOA,MAAK,QAAQ,GAAG,CAAC;AAC9D,kBAAc;AAAA,EAChB;AAEA,SAAO;AACT;;;AE1DA,OAAOC,YAAW;AAMX,IAAM,mBAAmB,YAAY;AAC1C,QAAM,SAAS;AAAA,IACb,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,mBAAmB;AAAA,IACrB;AAAA,EACF;AACA,QAAM,WAAW,MAAMA,OAAM,MAAM,EAChC,KAAK,CAACC,cAAa;AAClB,WAAOA,UAAS,KAAK;AAAA,EACvB,CAAC,EACA,MAAM,CAAC,UAAU;AAChB,YAAQ,IAAI,KAAK;AAAA,EACnB,CAAC;AACH,SAAO;AACT;;;;;;;;;;;;;ACxBO,IAAM,cAAc;AAAA,EACzB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoDP,WAAW,CAAC;AACd;;;ACnDO,IAAM,iBAAiB,CAAC,UAAwB,YAAoB;AACzE,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AACA,SAAO,GAAG,SAAS,UAAU,SAAS,cAAc,UAAU,KAC5D,SAAS;AAEb;AAEO,IAAM,eAAe,CAC1B,WACA,YACe;AACf,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,sBAAsB;AAAA,EACxC;AACA,SAAO,UAAU,IAAI,CAAC,cAAc;AAAA,IAClC,MAAM,SAAS;AAAA,IACf,KAAK,eAAe,UAAU,OAAO;AAAA,EACvC,EAAE;AACJ;;;ALJA,IAAM,iBAAiB,OAAO,WAAuB,kBAA0B;AAnB/E;AAoBE,MAAI,mBAAmB;AAAA,IACrB,QAAQ;AAAA,IACR,KAAK;AAAA,IACL,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,mBAAmB;AAAA,IACrB;AAAA,IACA,MAAM;AAAA,EACR;AACA,MAAI,oBAA4C,CAAC;AACjD,MAAI,mBAAoC,CAAC;AACzC,MAAI,iBAAoC,CAAC;AACzC,MAAI,qBAA+C,CAAC;AAGpD,YAAU,QAAQ,CAAC,aAAa;AAC9B,QAAI,UAAUC,OACX,IAAI,SAAS,KAAK;AAAA,MACjB,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,mBAAmB;AAAA,MACrB;AAAA,IACF,CAAC,EACA,KAAK,CAAC,aAAa;AAClB,wBAAkB,KAAK,EAAE,MAAM,SAAS,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,IACrE,CAAC;AACH,qBAAiB,KAAK,OAAO;AAAA,EAC/B,CAAC;AAED,QAAM,QAAQ,IAAI,gBAAgB;AAClC,qBAAmB,CAAC;AAGpB,MAAI,oBAAoBA,OAAM,gBAAgB,EAC3C,KAAK,SAAU,UAAU;AACxB,qBAAiB,EAAE,MAAM,SAAS,KAAK,KAAK,IAAI,EAC7C,QAAQ,CAAC,EAAE,SAAS,MAAM,QAAQ,EAClC,MAAM,UAAU,EAChB,MAAM;AAET,YAAQ,IAAI,yBAAyB;AAAA,EACvC,CAAC,EACA,MAAM,SAAU,OAAO;AACtB,YAAQ,IAAI,KAAK;AAAA,EACnB,CAAC;AAEH,mBAAiB,KAAK,iBAAiB;AACvC,QAAM,QAAQ,IAAI,gBAAgB;AAGlC,oBAAkB,QAAQ,CAAC,aAAa;AACtC,QAAI,SAAS,kDAAwC;AACnD,UAAI,OAAO,SAAS;AACpB,aAAO,OAAO,oBAAoB,IAAI;AAAA,IACxC;AAAA,EACF,CAAC;AAGD,uBAAqB,EAAE,MAAM,oBAAoB,cAAc;AAE/D,aAAW,OAAO,OAAO,KAAK,kBAAkB,GAAG;AAEjD,QAAI,OAAO,mBAAmB,KAAK;AACnC,QAAI,MAAM;AACR,UAAI,aAAW,UAAK,MAAM,GAAG,EAAE,IAAI,MAApB,mBAAuB,MAAM,KAAK,OAAM;AACvD,UAAI,YAAY,SAAS,SAAS,GAAG;AAEnC,2BAAmB,KAAK,cAAc,MAAM;AAAA,UAC1C,sBAAsB;AAAA,UACtB;AAAA,QACF;AAEA,2BAAmB,KAAK,OAAO,sBAAsB;AAAA,MACvD;AAAA,IACF;AAAA,EACF;AAGA,MAAI,0BAA0B,EAAE,UAAU,kBAAkB;AAE5D,SAAO,KAAK,uBAAuB,EAAE,QAAQ,CAAC,QAAQ;AAEpD,WAAO,wBAAwB,KAAK;AACpC,WAAO,wBAAwB,KAAK;AACpC,WAAO,wBAAwB,KAAK;AACpC,WAAO,wBAAwB,KAAK;AACpC,WAAO,wBAAwB,KAAK;AAAA,EACtC,CAAC;AAED,UAAQ,KAAK,mCAAmC;AAIhD;AAAA,IACE,QAAQ;AAAA,IACR,KAAK,UAAU,kBAAkB;AAAA,EACnC;AACA;AAAA,IACE;AAAA,IACA,KAAK,UAAU,kBAAkB;AAAA,EACnC;AAEA;AAAA,IACE,QAAQ;AAAA,IACR,KAAK,UAAU,uBAAuB;AAAA,EACxC;AACA;AAAA,IACE;AAAA,IACA,KAAK,UAAU,uBAAuB;AAAA,EACxC;AACF;AAIA,eAAsB,eAAe;AACnC,QAAM,gBAAgB,MAAM,iBAAiB;AAE7C,MAAI,YAAwB,aAAa,mBAAiB,aAAa;AAEvE,MAAI,CAACC,YAAW,QAAQ,eAAe,GAAG;AACxC,IAAAC,WAAU,QAAQ,eAAe;AAAA,EACnC;AAEA,MAAI,CAACD,YAAW,aAAa,GAAG;AAC9B,IAAAC,WAAU,aAAa;AAAA,EACzB;AACA,QAAM,eAAe,WAAW,aAAa;AAC/C;;;AMrJA,OAAOC,YAAW;AAClB,OAAOC,QAAO;AACd,SAAS,cAAAC,aAAY,aAAAC,kBAAiB;;;ACFtC,OAAOC,QAAO;AACd,OAAO,eAAe;AACtB,SAAS,WAAW,kBAAkB;AAGtC,IAAM,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAMA,IAAM,eAAe,CAAC,QAAgB;AACpC,SAAO,IACJ,MAAM,GAAG,EACT,IAAI,CAAC,SAAS,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC,EAC1D,KAAK,EAAE;AACZ;AAOO,SAAS,aAAa,MAAY;AA1CzC;AA2CE,MAAI,CAAC;AAAM,WAAO;AAClB,MAAI,OAAO,KAAK;AAChB,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEA,SAAO,KAAK,WAAW,KAAK,EAAE;AAC9B,SAAO,KAAK,WAAW,KAAK,EAAE;AAG9B,MAAI,gBAAgB,UAAU,SAAS,MAAM;AAAA,IAC3C,UAAU;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,aAAa,CAAC,IAAI;AAAA,EACpB,CAAC;AAGD,iBAAe,QAAQ,CAAC,QAAQ;AAC9B,UAAM,eAAe,IAAI,YAAY;AAErC,oBAAgBA,GAAE;AAAA,MAChB;AAAA,MACA,IAAI,OAAO,cAAc,GAAG;AAAA,MAC5B;AAAA,IACF;AAAA,EACF,CAAC;AAGD,QAAM,SAAS,IAAI,UAAU;AAAA,IAC3B,eAAe;AAAA,EACjB,CAAC;AACD,QAAM,MAAM,OAAO,MAAM,aAAa;AAEtC,OAAI,SAAI,aAAJ,mBAAc,OAAO;AACvB,aAAS,OAAO,IAAI,SAAS,OAAO;AAClC,aAAO,IAAI,SAAS,MAAM;AAAA,IAC5B;AAAA,EACF;AAEA,QAAM,UAAU,IAAI,WAAW;AAAA,IAC7B,eAAe;AAAA,EACjB,CAAC;AACD,MAAI,YAAY,QAAQ,MAAM,GAAG;AAGjC,cAAY,WAAW,WAAW,IAAI;AAEtC,cAAY,aAAa,SAAS;AAIlC,QAAM,gBAAgB;AACtB,cAAY,UAAU,QAAQ,eAAe,MAAM;AAEnD,SAAO;AACT;AAUO,SAAS,WAAW,WAAmB,MAAoB;AAChE,QAAM,aAAa;AACnB,QAAM,aAAa,UAAU,MAAM,UAAU;AAC7C,MAAI,YAAY;AACd,UAAM,WAAW,WAAW;AAC5B,QAAI,cAAc;AAGlB,QAAI,KAAK,OAAO;AACd,aAAO,QAAQ,KAAK,KAAK,EAAE,QAAQ,CAAC,CAAC,SAAS,KAAK,MAAM;AACvD,eAAO,QAAQ,KAAK,EAAE,QAAQ,CAAC,CAAC,MAAM,MAAM,MAAM;AAChD,cAAI,WAAW,aAAa,IAAI,IAAI,aAAa,OAAO;AACxD,yBAAe,eAAe,aAAa,SACzC,KAAK,SAAS,SAAS,IAAI,MAAM;AAAA,QAErC,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAEA,UAAM,WAAW,UAAU;AAC3B,gBAAYA,GAAE,QAAQ,WAAW,UAAU,QAAQ;AAAA,EACrD;AACA,SAAO;AACT;AASO,SAAS,aAAa,WAA2B;AACtD,QAAM,cAAc;AACpB,QAAM,cAAc,UAAU,MAAM,WAAW;AAC/C,MAAI,WAAW;AACf,MAAI,aAAa;AAEf,eAAW,SAAS,aAAa;AAE/B,UAAI,aAAa,MAAM;AACrB,mBAAW;AAEX,oBAAYA,GAAE,QAAQ,WAAW,OAAO,EAAE;AAC1C;AAAA,MACF;AAEA,YAAM,aAAa,MAAM,QAAQ,gBAAgB,EAAE;AAEnD,UAAI,eAAe,YAAY;AAE7B,cAAM,iBAAiB,YAAY,YAAY,QAAQ,KAAK,IAAI,GAC7D,QAAQ,gBAAgB,EAAE,EAC1B,KAAK;AAER,oBAAYA,GAAE;AAAA,UACZ;AAAA,UACA;AAAA,UACA,oBAAoB;AAAA,QACtB;AAEA,mBAAW;AAAA,MACb;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;;;AChMA,OAAO,UAAU;AACjB,OAAO,QAAQ;AACf,OAAOC,QAAO;;;ACsNP,IAAK,gBAAL,kBAAKC,mBAAL;AACL,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,aAAU;AACV,EAAAA,eAAA,UAAO;AACP,EAAAA,eAAA,cAAW;AACX,EAAAA,eAAA,aAAU;AACV,EAAAA,eAAA,UAAO;AANG,SAAAA;AAAA,GAAA;;;ADzMZ,OAAO,mBAAmB;AAOnB,SAAS,WAAW,eAAuB,aAAiB;AAEjE,MAAI,WAAW;AACf,MAAI,oBAAoB,KAAK,KAAK,UAAU,eAAe,aAAa;AACxE,sBAAoB,KAAK,UAAU,iBAAiB;AACpD,KAAG,cAAc,mBAAmB,KAAK,UAAU,WAAW,CAAC;AAE/D,KAAG,cAAc,0BAA0B,KAAK,UAAU,WAAW,CAAC;AACxE;AAEA,SAAS,eAAe,UAAqB;AAC3C,SAAO,SAAS,IAAI,CAAC,YAAqB;AAExC,QAAI,QAAQ,OAAO,QAAQ,QAAQ,KAAK,EAAE,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM;AAC9D,UAAI,MAAM,QAAQ,IAAI,GAAG;AACvB,eAAO,EAAE,CAAC,OAAO,KAAK,GAAG;AAAA,MAC3B,OAAO;AACL,eAAO,EAAE,CAAC,OAAO,KAAK;AAAA,MACxB;AAAA,IACF,CAAC;AACD,YAAQ,QAAQ,YAAY,KAAK;AACjC,WAAO;AAAA,EACT,CAAC;AACH;AAEA,SAAS,kBAAkB,OAAoB;AAC7C,MAAI,iBAA8B,cAAc,OAAO,EAAE,MAAM,KAAK,CAAC;AAErE,SAAOC,GAAE,cAAc,EACpB,OAAOA,GAAE,QAAQ,EACjB,UAAU,CAAC,SAASA,GAAE,OAAO,MAAMA,GAAE,QAAQ,CAAC,EAC9C,OAAOA,GAAE,OAAO,EAChB,MAAM;AACX;AAEA,SAAS,YAAY,OAAoC;AACvD,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,kBAAkB,MAAM,EAAE;AAAA,EACnC,OAAO;AACL,WAAO,kBAAkB,KAAK;AAAA,EAChC;AACF;AAEA,SAAS,mBAAmB,YAAwB;AAClD,MAAI,UAAUA,GAAE,IAAI,YAAY,WAAW;AAC3C,MAAI,QAAQ,SAAS,GAAG;AAEtB,cAAUA,GAAE,OAAO,SAAS,CAAC,cAAyC;AACpE,aAAOA,GAAE,SAAS,OAAO,OAAO,aAAa,GAAG,SAAS;AAAA,IAC3D,CAAC;AAAA,EACH;AACA,SAAO;AACT;AAEO,SAAS,2BACd,cACA,aACA;AACA,MAAI,EAAE,KAAK,IAAI;AACf,QAAM,iBAAgD;AAAA,IACpD;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,OAAK,QAAQ,CAAC,SAAS;AACrB,UAAM,MAAM,KAAK;AACjB,QAAI,eAAeA,GAAE,KAAK,MAAM,cAAc;AAE9C,gBAAY,OAAO,EAAE,GAAG,YAAY,MAAM,GAAG,aAAa;AAAA,EAC5D,CAAC;AAED,SAAO;AACT;AAEO,SAAS,kBACd,cACA,mBACA,aACA;AACA,MAAI,EAAE,KAAK,IAAI;AACf,QAAM,qBAA2C;AAAA,IAC/C;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO,QAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,SAAS,UAAU,MAAM;AAlH1D;AAmHI,QAAI,eAAeA,GAAE,KAAK,YAAY,kBAAkB;AAExD,QAAI,UAAU,mBAAmB,UAAU;AAE3C,QAAI,QAAQA,GAAE,IAAI,YAAY,OAAO;AACrC,QAAI,OAAO;AACT,UAAI,WAAW,YAAY,KAAK;AAEhC,UAAI,UAAU;AACZ,aAAK,SAAS,QAAQ;AACtB,qBAAa,QAAQ;AAAA,MACvB;AAAA,IACF;AAGA,QAAI,WAAWA,GAAE,IAAI,YAAY,UAAU;AAC3C,QAAI,YAAY,SAAS,SAAS,GAAG;AAEnC,UAAI,cAAc,eAAe,QAAQ;AACzC,UAAI,aAAa;AACf,aAAK,SAAS,WAAW;AACzB,qBAAa,WAAW;AAAA,MAC1B;AAEA,UAAI,SAASA,GAAE,KAAK,UAAU,CAAC,YAAY;AACzC,eAAO,QAAQ;AAAA,MACjB,CAAC;AACD,UAAI,QAAQ;AAEV,qBAAa,SAAS;AAAA,MACxB,OAAO;AACL,qBAAa,SAAS;AAAA,MACxB;AAAA,IACF;AAGA,QACE,CAAC,aAAa,QACb,aAAa,QAAQ,CAAC,aAAa,KAAK,WAAW,MAAM,GAC1D;AACA,YAAM,eAAc,uBAAkB;AAAA,QACpC,CAAC,aAAa,SAAS;AAAA,MACzB,MAFoB,mBAEjB;AACH,UAAI,mBAAkB,iBAAY;AAAA,QAChC,CAAC,SAAS,KAAK,OAAO,WAAW;AAAA,MACnC,MAFsB,mBAEnB;AAEH,UAAI,iBAAiB;AAEnB,0BAAkB,gBAAgB,MAAM,UAAU,EAAE,GAAG,YAAY;AAEnE,qBAAa,OACX,6GACA;AAEF,gBAAQ;AAAA,UACN,QAAQ,WAAW,QAAQ,WAAW;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAEA,gBAAY,WAAW;AAAA,MACrB,GAAG,YAAY;AAAA,MACf,GAAG;AAAA,MACH;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEO,SAAS,iBAAiB,UAA4B;AAC3D,MAAI,EAAE,KAAK,IAAI,SAAS;AAExB,SAAO,QAAQ,IAAI,EAAE,QAAQ,CAAC,CAAC,KAAK,QAAQ,MAAM;AAChD,WAAO,QAAQ,QAAQ,EAAE,QAAQ,CAAC,CAAC,SAAS,SAAS,MAAM;AACzD,UAAI,YAAY,MAAM;AAEpB,aAAK,KAAK,WAAW,SAAS,WAAW,EAAE;AAAA,MAC7C,YACG,YAAY,UAAU,YAAY,UAAU,YAAY,WACzD,cAAc,MACd;AACA,aAAK,KAAK,WAAW,UAAU,IAAI,MAAM;AAAA,MAC3C,WAAW,YAAY,SAAS;AAE9B,eAAO,KAAK,KAAK;AAAA,MACnB,WAAW,YAAY,SAAS;AAE9B,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACD,SAAO;AACT;;;AEhNO,IAAM,gBAAgB;AAAA,EAC3B,YAAY,CAAC;AAAA,EACb,SAAS,CAAC;AAAA,EACV,aAAa;AAAA,EACb,MAAM,CAAC;AAAA,EACP,MAAM,EAAE,MAAM,GAAG,aAAa,OAAO,OAAO,GAAG,MAAM,EAAE;AAAA,EACvD,MAAM;AAAA,EACN,aAAa;AAAA,EACb,IAAI;AAAA,EACJ,SAAS;AAAA,EACT,MAAM,CAAC;AAAA,EACP,MAAM,CAAC;AAAA,EACP,WAAW;AAAA,EACX,QAAQ;AAAA,EACR,MAAM;AAAA,EACN,WAAW,CAAC;AAAA,EACZ,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,OAAO,CAAC;AAAA,EACR,MAAM;AACR;;;AJRA,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;AAMP,IAAM,aAAa,OACjB,WACA,kBACkB;AAClB,MAAI,oBAAwC,CAAC;AAC7C,MAAI,eAAgC,CAAC;AAErC,YAAU,QAAQ,CAAC,aAAa;AAC9B,YAAQ,IAAI,YAAY,SAAS,eAAe;AAChD,QAAI,UAAUC,OACX,IAAI,SAAS,KAAK;AAAA,MACjB,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,QAAQ;AAAA,QACR,mBAAmB;AAAA,MACrB;AAAA,IACF,CAAC,EACA,KAAK,CAAC,aAAa;AAClB,cAAQ,IAAI,WAAW,SAAS,YAAY;AAC5C,wBAAkB,KAAK,EAAE,MAAM,SAAS,MAAM,MAAM,SAAS,KAAK,CAAC;AAAA,IACrE,CAAC;AACH,iBAAa,KAAK,OAAO;AAAA,EAC3B,CAAC;AACD,QAAM,QAAQ,IAAI,YAAY;AAE9B,MAAI,cAA0B,CAAC;AAC/B,oBAAkB,QAAQ,CAAC,iBAAiB;AAC1C,YAAQ,aAAa,MAAM;AAAA,MACzB,KAAK;AACH,eAAO,OAAO,aAAa,iBAAiB,YAAY,CAAC;AACzD;AAAA,MAEF,KAAK;AACH,sBAAc;AAAA,UACZ;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA;AAAA,MAEF,KAAK;AACH,sBAAc,2BAA2B,cAAc,WAAW;AAClE;AAAA,IACJ;AAAA,EACF,CAAC;AAGD,gBAAcC,GAAE,UAAU,aAAa,CAAC,SAAS;AAC/C,WAAOA,GAAE,SAAS,MAAM,aAAa;AAAA,EACvC,CAAC;AAED,UAAQ,IAAI,UAAU,OAAO,KAAK,WAAW,EAAE,cAAc;AAG7D,MAAI,mBAAoC,CAAC;AAEzC,SAAO,QAAQ,WAAW,EAAE,QAAQ,OAAO,CAAC,KAAK,IAAI,MAAM;AA5E7D;AA6EI,QAAI,KAAK,aAAa;AACpB,kBAAY,KAAK,cAAc,aAAa,IAAI;AAAA,IAClD;AACA,QAAI,KAAK,MAAM;AACb,UAAI,aAAW,UAAK,KAAK,MAAM,GAAG,EAAE,IAAI,MAAzB,mBAA4B,MAAM,KAAK,OAAM;AAC5D,UAAI,YAAY,SAAS,SAAS,GAAG;AACnC,YAAI,UAAU;AAAA,UACZ,kBAAkB;AAAA,UAClB,KAAK;AAAA,QACP,EAAE,KAAK,CAAC,gBAAgB;AACtB,sBAAY,KAAK,OAAO,kBAAkB;AAC1C,sBAAY,KAAK,cAAc;AAC/B,kBAAQ,IAAI,8BAA8B,YAAY,KAAK,IAAI;AAAA,QACjE,CAAC;AACD,yBAAiB,KAAK,OAAO;AAAA,MAC/B;AAAA,IACF;AAAA,EACF,CAAC;AAED,QAAM,QAAQ,IAAI,gBAAgB;AAElC,UAAQ,KAAK,+BAA+B;AAC5C,aAAW,eAAe,WAAW;AACvC;AAIO,IAAM,WAAW,YAAY;AAClC,QAAM,gBAAgB,MAAM,iBAAiB;AAC7C,MAAI,YAAY,aAAa,eAAa,aAAa;AACvD,UAAQ,IAAI,eAAe,SAAS;AAEpC,MAAI,CAACC,YAAW,QAAQ,eAAe,GAAG;AACxC,IAAAC,WAAU,QAAQ,eAAe;AAAA,EACnC;AAEA,MAAI,CAACD,YAAW,aAAa,GAAG;AAC9B,IAAAC,WAAU,aAAa;AAAA,EACzB;AACA,QAAM,WAAW,WAAW,aAAa;AAC3C;;;APjHA,IAAM,OAAO,YAAY;AACvB,QAAM,SAAS;AACf,OAAK,kCAAkC;AACvC,QAAM,aAAa;AACnB,OAAK,sCAAsC;AAC3C,OAAK,sCAAsC;AAC7C;AAEA,KAAK;","names":["existsSync","mkdirSync","axios","info","axios","response","axios","existsSync","mkdirSync","axios","_","existsSync","mkdirSync","_","_","ChampionClass","_","axios","_","existsSync","mkdirSync"]}