{"mappings":"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","sources":["index.js","src/items.js","src/utils/getLatestVersion.js","src/utils/sanitizeText.js","src/utils/itemUtils.js","src/utils/constants.js","src/utils/downloadImages.js","src/champions.js"],"sourcesContent":["import { info, setFailed } from \"@actions/core\";\r\nimport { getItems } from \"./src/items.js\";\r\nimport { getChampions } from \"./src/champions.js\";\r\n\r\nconst main = async () => {\r\n  try {\r\n    await getItems();\r\n    info(\"Successfully merged items.json\\n\");\r\n    await getChampions();\r\n    info(\"Successfully merged champions.json\\n\");\r\n    info(\"Successfully generated custom files.\");\r\n  } catch (error) {\r\n    setFailed(error.message);\r\n  }\r\n};\r\n\r\nmain();\r\n","import axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport { readFileSync, existsSync, mkdirSync } from \"fs\";\r\nimport { getLatestVersion } from \"./utils/getLatestVersion.js\";\r\nimport { sanitizeText } from \"./utils/sanitizeText.js\";\r\nimport {\r\n  getCommunityDragonData,\r\n  getMerakiData,\r\n  getBlitzData,\r\n  writeItems,\r\n} from \"./utils/itemUtils.js\";\r\nimport {\r\n  requiredKeysMeraki,\r\n  admittedClasses,\r\n  defaultValues,\r\n} from \"./utils/constants.js\";\r\nimport downloadImage from \"./utils/downloadImages.js\";\r\n// Load env variables from .env file\r\nimport \"dotenv/config\";\r\n\r\nconst mergeItems = async (endpoints, latestVersion) => {\r\n  // Create a new array to store the items.json files\r\n  let itemEndpoints = [];\r\n  let itemPromises = [];\r\n  endpoints.forEach((endpoint) => {\r\n    let promise = axios.get(endpoint.url).then((response) => {\r\n      itemEndpoints.push({ name: endpoint.name, data: response.data });\r\n    });\r\n    itemPromises.push(promise);\r\n  });\r\n  await Promise.all(itemPromises);\r\n\r\n  let mergedItems = {};\r\n  itemEndpoints.forEach((endpoint) => {\r\n    switch (endpoint.name) {\r\n      case \"Blitz\":\r\n        Object.assign(mergedItems, getBlitzData(endpoint));\r\n        break;\r\n\r\n      case \"MerakiAnalytics\":\r\n        Object.entries(endpoint.data).forEach((item) => {\r\n          const key = item[0];\r\n          const values = item[1];\r\n\r\n          let { filteredItem, classes } = getMerakiData(\r\n            values,\r\n            requiredKeysMeraki,\r\n            admittedClasses,\r\n            itemEndpoints\r\n          );\r\n\r\n          // Append the filteredItem and the classes to the mergedItems in the corresponding key\r\n          mergedItems[key] = {\r\n            ...mergedItems[key],\r\n            ...filteredItem,\r\n            classes: classes,\r\n          };\r\n        });\r\n        break;\r\n\r\n      case \"CommunityDragon\":\r\n        getCommunityDragonData(endpoint, mergedItems);\r\n        break;\r\n    }\r\n  });\r\n\r\n  // Merge the default values with every item in mergedItems\r\n  mergedItems = _.mapValues(mergedItems, (item) => {\r\n    return _.defaults(item, defaultValues);\r\n  });\r\n\r\n  console.log(`Merged ${Object.keys(mergedItems).length} items`);\r\n\r\n  // Sanitize item description for each item in mergedItems\r\n  for (const [key, value] of Object.entries(mergedItems)) {\r\n    let description = value.description;\r\n    if (description) {\r\n      console.log(\"Sanitizing text for item description\");\r\n      description = sanitizeText(value);\r\n      mergedItems[key].description = description;\r\n    }\r\n    if (value.icon) {\r\n      let iconName = value.icon.split(\"/\").pop().split(\".\")[0] || \"\";\r\n      if (iconName && iconName.length > 0) {\r\n        let base64 = await downloadImage(\r\n          `data/img/items/${iconName}.webp`,\r\n          value.icon\r\n        );\r\n        mergedItems[key].placeholder = base64;\r\n        mergedItems[key].icon = `data/img/items/${iconName}.webp`;\r\n      }\r\n    }\r\n  }\r\n\r\n  console.info(\"Writing items data to file...\");\r\n  writeItems(latestVersion, mergedItems);\r\n};\r\n\r\n// Get the items.json file from the different endpoints specified in items.json\r\n// Return the custom merged items.json file\r\nexport const getItems = async () => {\r\n  // Read the items.json configuration file\r\n  const itemsConfig = JSON.parse(readFileSync(\"endpoints/items.json\"));\r\n  // Fetch the latest version of DDragon\r\n  const latestVersion = await getLatestVersion();\r\n  let endpoints = [];\r\n  // Fetch the items.json from the itemsConfig\r\n  itemsConfig.forEach((endpoint) => {\r\n    console.log(\"Fetching items.json from \" + endpoint.name);\r\n    const url = `${endpoint.baseUrl}${\r\n      endpoint.needsLatest ? latestVersion : \"\"\r\n    }${endpoint.resource}`;\r\n    endpoints.push({ name: endpoint.name, url: url });\r\n    console.log(endpoint.name + \" items URL: \" + url);\r\n  });\r\n  // Create a folder in /data if it doesn't exist for the latest version\r\n  if (!existsSync(`data/${latestVersion}`)) {\r\n    mkdirSync(`data/${latestVersion}`);\r\n  }\r\n  // Create the folder latest in /data if it doesn't exist\r\n  if (!existsSync(`data/latest`)) {\r\n    mkdirSync(`data/latest`);\r\n  }\r\n  await mergeItems(endpoints, latestVersion);\r\n};\r\n\r\n// const main = async () => {\r\n//   try {\r\n//     await getItems();\r\n//     info(\"Successfully merged items.json\");\r\n//   } catch (error) {\r\n//     setFailed(error.message);\r\n//     console.log(\"Error: \" + error.message);\r\n//   }\r\n// };\r\n\r\n// // Only run main if running locally\r\n// if (process.env.GITHUB_ACTIONS !== \"true\") {\r\n//   main();\r\n// }\r\n","import axios from \"axios\";\r\n\r\n/**\r\n * Gets the latest version of DDragon from https://ddragon.leagueoflegends.com/api/versions.json\r\n * @returns {string} The latest version of the game.\r\n */\r\nconst getLatestVersion = async () => {\r\n  const response = await axios.get(\r\n    \"https://ddragon.leagueoflegends.com/api/versions.json\"\r\n  );\r\n  let latestVersion = response.data[0];\r\n  // Sanitize latest version, only accept numbers and dots\r\n  latestVersion = latestVersion.replace(/[^0-9.]/g, \"\");\r\n  return latestVersion;\r\n};\r\nconst _getLatestVersion = getLatestVersion;\r\nexport { _getLatestVersion as getLatestVersion };\r\n","import _ from \"lodash\";\r\nimport createDOMPurify from \"dompurify\";\r\nimport { JSDOM } from \"jsdom\";\r\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\r\n\r\n/**\r\n * Function to convert a string from camel case or snake case to pascal case\r\n * @param {string} str - The string to convert to PascalCase.\r\n */\r\nconst toPascalCase = (str) => {\r\n  return str\r\n    .split(\"_\")\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\"\");\r\n};\r\n\r\n/**\r\n * It takes a string, sanitizes it, parses it, and returns a string.\r\n * @param {itemsSchema} item - {\r\n * @returns {string} A string of XML.\r\n */\r\nexport const sanitizeText = (item) => {\r\n  if (!item) return \"\";\r\n  let text = item.description;\r\n  if (!text) {\r\n    return;\r\n  }\r\n  // Remove curly braces from API placeholders\r\n  text = text.replaceAll(\"{\", \"\");\r\n  text = text.replaceAll(\"}\", \"\");\r\n  const pascalCaseTags = [\r\n    \"Active\",\r\n    \"Attention\",\r\n    \"FlavorText\",\r\n    \"Healing\",\r\n    \"KeywordStealth\",\r\n    \"MagicDamage\",\r\n    \"MainText\",\r\n    \"Passive\",\r\n    \"PhysicalDamage\",\r\n    \"RarityGeneric\",\r\n    \"RarityLegendary\",\r\n    \"RarityMythic\",\r\n    \"Rules\",\r\n    \"ScaleLevel\",\r\n    \"ScaleMana\",\r\n    \"Stats\",\r\n    \"Status\",\r\n    \"TrueDamage\",\r\n  ];\r\n  // Sanitize text with dompurify\r\n  const window = new JSDOM(\"\").window;\r\n  const DOMPurify = createDOMPurify(window);\r\n  let sanitizedText = DOMPurify.sanitize(text, {\r\n    ADD_TAGS: [\r\n      \"active\",\r\n      \"attention\",\r\n      \"flavorText\",\r\n      \"healing\",\r\n      \"keywordStealth\",\r\n      \"magicDamage\",\r\n      \"mainText\",\r\n      \"passive\",\r\n      \"physicalDamage\",\r\n      \"rarityGeneric\",\r\n      \"rarityLegendary\",\r\n      \"rarityMythic\",\r\n      \"rules\",\r\n      \"scaleLevel\",\r\n      \"scaleMana\",\r\n      \"stats\",\r\n      \"status\",\r\n      \"trueDamage\",\r\n    ],\r\n    FORBID_TAGS: [\"br\"],\r\n  });\r\n\r\n  // Replace all lowercase words inside the sanitizedText with the camelCaseTags version\r\n  pascalCaseTags.forEach((tag) => {\r\n    const lowercaseTag = tag.toLowerCase();\r\n    // Replace lowercase tag with tag\r\n    sanitizedText = _.replace(\r\n      sanitizedText,\r\n      new RegExp(lowercaseTag, \"g\"),\r\n      tag\r\n    );\r\n  });\r\n\r\n  // Parse with fast-xml-parser\r\n  const parser = new XMLParser({\r\n    preserveOrder: true,\r\n  });\r\n  const xml = parser.parse(sanitizedText);\r\n  // Remove stats from the xml object\r\n  if (xml.mainText?.stats) {\r\n    for (let key in xml.mainText.stats) {\r\n      delete xml.mainText.stats[key];\r\n    }\r\n  }\r\n  // Convert xml object to XML string\r\n  const builder = new XMLBuilder({\r\n    preserveOrder: true,\r\n  });\r\n  let xmlString = builder.build(xml);\r\n\r\n  // Add stats between <Stats> tag and </Stats> tag\r\n  xmlString = parseStats(xmlString, item);\r\n\r\n  xmlString = parseActives(xmlString);\r\n\r\n  // Replace in xmlString:\r\n  // Add a whitespace (' ') before a less than character ('<') if the preceding character is a letter (a-z, A-Z) or a colon (':')\r\n  const lessThanRegex = /([a-zA-Z,:])</g;\r\n  xmlString = xmlString.replace(lessThanRegex, \"$1 <\");\r\n\r\n  return xmlString;\r\n};\r\n\r\n/**\r\n * Takes an XML string and an item object, and replaces the string with a JSX element\r\n * @param {string} xmlString - The string of the xml file\r\n * @param {itemsSchema} item - The item object that contains the stats\r\n * @returns {string} The xmlString is being returned with the stats of the item.\r\n * @example\r\n * Returns: <Stats><Stat name=\"Attack Speed\">1.5</Stat></Stats>\r\n */\r\nexport function parseStats(xmlString, item) {\r\n  const statsRegex = /<Stats>(.*?)<\\/Stats>/g;\r\n  const statsMatch = xmlString.match(statsRegex);\r\n  if (statsMatch) {\r\n    const statsTag = statsMatch[0];\r\n    let statsString = \"\";\r\n\r\n    // Create the stats string with the stats of the item\r\n    if (item.stats) {\r\n      Object.entries(item.stats).forEach(([keyItem, value]) => {\r\n        Object.entries(value).forEach(([key2, value2]) => {\r\n          let statName = toPascalCase(key2) + toPascalCase(keyItem);\r\n          statsString += `<Stat name=\"${statName}\">${value2}${\r\n            key2.includes(\"percent\") ? \"%\" : \"\"\r\n          }</Stat>`;\r\n        });\r\n      });\r\n    }\r\n\r\n    const statText = `<Stats>${statsString}</Stats>`;\r\n    xmlString = _.replace(xmlString, statsTag, statText);\r\n  }\r\n  return xmlString;\r\n}\r\n\r\n/** Combine all two adjacent Active tags when the first one is \"Active -\"\r\n * @param {string} xmlString - The string of the xml file\r\n * @returns {string} Parsed string\r\n * @example\r\n * Input: <Active>Active -</Active><Active>Lorem ipsum</Active>\r\n * Result:  <Active>Active - Lorem ipsum</Active>\r\n */\r\nexport function parseActives(xmlString) {\r\n  const activeRegex = /<Active>(.*?)<\\/Active>/g;\r\n  const activeMatch = xmlString.match(activeRegex);\r\n  let skipNext = false;\r\n  if (activeMatch) {\r\n    // Loop through each match\r\n    for (const match of activeMatch) {\r\n      // If skipNext is set to true, skip the next match\r\n      if (skipNext === true) {\r\n        skipNext = false;\r\n        // Delete the match from the xmlString\r\n        xmlString = _.replace(xmlString, match, \"\");\r\n        continue;\r\n      }\r\n      // Get the content of the match\r\n      const tagContent = match.replace(/<\\/?Active>/g, \"\");\r\n      // Check if the content is \"Active -\"\r\n      if (tagContent === \"Active -\") {\r\n        // Replace the match with the \"Active - \" and the content of the next match\r\n        const nextTagContent = activeMatch[activeMatch.indexOf(match) + 1]\r\n          .replace(/<\\/?Active>/g, \"\")\r\n          .trim();\r\n\r\n        xmlString = _.replace(\r\n          xmlString,\r\n          match,\r\n          `<Active>Active - ${nextTagContent}</Active>`\r\n        );\r\n        // Skip the next match\r\n        skipNext = true;\r\n      }\r\n    }\r\n  }\r\n  return xmlString;\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport _ from \"lodash\";\r\n\r\n// Function to convert a string from snake case to camel case\r\nexport const snakeToCamel = (str) => {\r\n  return str.replace(/(_\\w)/g, (m) => m[1].toUpperCase());\r\n};\r\n\r\nexport function writeItems(latestVersion, mergedItems) {\r\n  // Write the merged items.json file in the latestVersion folder \"./data/\" + latestVersion + \"/items.json\";\r\n  let rootPath = \"data/\";\r\n  let latestVersionPath = path.join(rootPath, latestVersion, \"/items.json\");\r\n  // Sanitize path to avoid directory traversal\r\n  latestVersionPath = path.normalize(latestVersionPath);\r\n  // deepcode ignore PT: Wont fix this right away\r\n  fs.writeFileSync(latestVersionPath, JSON.stringify(mergedItems));\r\n  // Also save a copy in the latest folder\r\n  fs.writeFileSync(`data/latest/items.json`, JSON.stringify(mergedItems));\r\n}\r\n\r\nexport function getCommunityDragonData(endpoint, mergedItems) {\r\n  let requiredKeysCD = [\"categories\", \"inStore\", \"maxStacks\"];\r\n  endpoint.data.forEach((item) => {\r\n    const key = item.id;\r\n    let filteredItem = _.pick(item, requiredKeysCD);\r\n    // Append the filteredItem to the mergedItems in the corresponding key\r\n    mergedItems[key] = { ...mergedItems[key], ...filteredItem };\r\n  });\r\n}\r\n\r\nexport function getMerakiData(\r\n  values,\r\n  requiredKeysMeraki,\r\n  admittedClasses,\r\n  itemEndpoints\r\n) {\r\n  let filteredItem = _.pick(values, requiredKeysMeraki);\r\n\r\n  // Get an array of champion classes from nested object property\r\n  let classes = _.get(values, \"shop.tags\");\r\n  if (classes.length > 0) {\r\n    classes = _.filter(classes, (className) =>\r\n      admittedClasses.includes(className)\r\n    );\r\n  }\r\n  // Remove empty keys from stats to reduce the size of the json file\r\n  let stats = _.get(values, \"stats\");\r\n  if (stats) {\r\n    Object.entries(stats).forEach((stat) => {\r\n      const [key2, value2] = stat;\r\n      // Convert key2 from snake case to camel case\r\n      const camelCaseKey2 = snakeToCamel(key2);\r\n      // Replace key2\r\n      if (key2 !== camelCaseKey2) {\r\n        Object.defineProperty(\r\n          stats,\r\n          camelCaseKey2,\r\n          Object.getOwnPropertyDescriptor(stats, key2)\r\n        );\r\n        delete stats[key2];\r\n      }\r\n\r\n      Object.entries(value2).forEach((stat2) => {\r\n        const [key3, value3] = stat2;\r\n        if (value3 === 0) {\r\n          delete values[\"stats\"][camelCaseKey2][key3];\r\n        }\r\n      });\r\n    });\r\n  }\r\n  // Validate that the icon is a valid URL\r\n  if (\r\n    !filteredItem.icon ||\r\n    (filteredItem.icon && !filteredItem.icon.startsWith(\"http\"))\r\n  ) {\r\n    // Get item from CommunityDragon endpoint data\r\n    let CDragonIconPath = _.chain(itemEndpoints)\r\n      .find({ name: \"CommunityDragon\" })\r\n      .get(\"data\")\r\n      .find({ id: values.id })\r\n      .get(\"iconPath\")\r\n      .value();\r\n\r\n    if (CDragonIconPath) {\r\n      // Strip text after Icons2d/ from the icon path\r\n      CDragonIconPath = CDragonIconPath.split(\"Icons2D/\")[1].toLowerCase();\r\n      // Set fallback icon if the icon is not a valid URL\r\n      filteredItem.icon =\r\n        \"https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/assets/items/icons2d/\" +\r\n        CDragonIconPath;\r\n\r\n      console.warn(\r\n        `Item ${values.name}-${values.id} has an invalid icon URL, using fallback icon`\r\n      );\r\n    }\r\n  }\r\n  return { filteredItem, classes };\r\n}\r\n\r\nexport function getBlitzData(endpoint) {\r\n  let data = endpoint.data.data;\r\n  // Parse numbers\r\n  Object.entries(data).forEach((entry) => {\r\n    const [key, value] = entry;\r\n    Object.entries(value).forEach((item) => {\r\n      const [key2, value2] = item;\r\n      if (key2 === \"id\") {\r\n        data[key][key2] = parseInt(value2);\r\n      } else if (\r\n        (key2 === \"maps\" || key2 === \"from\" || key2 === \"into\") &&\r\n        value2 !== null\r\n      ) {\r\n        data[key][key2] = value2.map(Number);\r\n      } else if (key2 === \"depth\") {\r\n        // Delete the depth key\r\n        delete data[key][\"depth\"];\r\n      } else if (key2 === \"stats\") {\r\n        // Delete stats from blitzEndpoint\r\n        delete data[key][\"stats\"];\r\n      }\r\n    });\r\n  });\r\n  return data;\r\n}\r\n","export const requiredKeysMeraki = [\r\n  \"icon\",\r\n  \"iconOverlay\",\r\n  \"nicknames\",\r\n  \"requiredChampion\",\r\n  \"simpleDescription\",\r\n  \"tier\",\r\n  \"stats\",\r\n];\r\n\r\nexport const admittedClasses = [\r\n  \"MAGE\",\r\n  \"SUPPORT\",\r\n  \"TANK\",\r\n  \"FIGHTER\",\r\n  \"MARKSMAN\",\r\n  \"ASSASSIN\",\r\n];\r\n\r\n// Set default values for required keys\r\nexport const defaultValues = {\r\n  categories: [],\r\n  classes: [],\r\n  description: null,\r\n  from: [],\r\n  gold: { base: 0, purchasable: false, total: 0, sell: 0 },\r\n  icon: \"\",\r\n  iconOverlay: false,\r\n  id: -1,\r\n  inStore: false,\r\n  into: [],\r\n  maps: [],\r\n  maxStacks: 0,\r\n  mythic: false,\r\n  name: \"\",\r\n  nicknames: [],\r\n  placeholder: \"\",\r\n  requiredChampion: \"\",\r\n  simpleDescription: \"\",\r\n  stats: {},\r\n  tier: 0,\r\n};\r\n","import sharp from \"sharp\";\r\nimport { existsSync, mkdirSync } from \"fs\";\r\nimport axios from \"axios\";\r\nimport { getPlaiceholder } from \"plaiceholder\";\r\n\r\n/**\r\n * &gt;&gt;&gt; downloadImage(\"data/img/items/image.png\", \"http://www.example.com/image.png\")\r\n * @param {string} filename - The path of the file to be downloaded. Include the subfolder for champion or items\r\n * @param {string} url - The URL path to the image you want to download.\r\n * @returns {Promise<string>} Base64 placeholder string.\r\n */\r\nasync function downloadImage(filename, url) {\r\n  if (!filename || !url) {\r\n    console.warn(\"No filename or url specified\");\r\n    return;\r\n  }\r\n  let placeholder = \"\";\r\n\r\n  // Create folders\r\n  if (!existsSync(\"data/img/champions\")) {\r\n    mkdirSync(\"data/img/champions\", { recursive: true });\r\n  }\r\n  if (!existsSync(\"data/img/items\")) {\r\n    mkdirSync(\"data/img/items\", { recursive: true });\r\n  }\r\n  await axios\r\n    .get(url, { responseType: \"arraybuffer\" })\r\n    .then(async (axiosResponse) => {\r\n      console.log(\"Saving image \" + filename);\r\n      await sharp(axiosResponse.data)\r\n        .toFile(filename)\r\n        .then(async () => {\r\n          await getPlaiceholder(axiosResponse.data)\r\n            .then(({ base64 }) => (placeholder = base64))\r\n            .catch((error) => console.error(error));\r\n        })\r\n        .catch((err) => {\r\n          console.error(err);\r\n        });\r\n    })\r\n    .catch((err) => console.error(err));\r\n\r\n  return placeholder;\r\n}\r\n\r\nexport default downloadImage;\r\n\r\n// test\r\n// eslint-disable-next-line no-unused-vars\r\n// const test = async () => {\r\n//   let res = await downloadImage(\r\n//     \"data/img/champions/Aatrox.png\",\r\n//     \"https://ddragon.leagueoflegends.com/cdn/12.13.1/img/champion/Aatrox.png\"\r\n//   );\r\n//   console.log(\"Base64: \" + res);\r\n// };\r\n","import { info, setFailed } from \"@actions/core\";\r\nimport { writeFileSync, readFileSync, existsSync, mkdirSync } from \"fs\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport { getLatestVersion } from \"./utils/getLatestVersion.js\";\r\n// Load env variables from .env file\r\nimport \"dotenv/config\";\r\nimport downloadImage from \"./utils/downloadImages.js\";\r\n\r\nconst mergeChampions = async (endpoints, latestVersion) => {\r\n  const queryString = JSON.stringify({\r\n    query: `query ChampionsInfo{\r\n      info: queryChampionsV1Contents(top:0){\r\n          flatData{\r\n              name\r\n              slug\r\n              antiDive\r\n              burst\r\n              control\r\n              damage\r\n              damageType\r\n              divePotential\r\n              engage\r\n              gankDenial\r\n              gankReliability\r\n              gankTurnAround\r\n              kite\r\n              mobility\r\n              pick\r\n              poke\r\n              preControl\r\n              preDamage\r\n              preMobility\r\n              preToughness\r\n              postControl\r\n              postDamage\r\n              postMobility\r\n              postToughness\r\n              skirmish\r\n              split\r\n              sustained\r\n              tags\r\n              toughness\r\n              utility\r\n              waveclear\r\n              powerSpikes{\r\n                  early\r\n                  mid\r\n                  late\r\n              }\r\n              key: riotId\r\n              riotSlug\r\n              difficultyLevel\r\n              difficulty{\r\n                  flatData{\r\n                      slug\r\n                      name\r\n                      level\r\n                  }\r\n              }\r\n          }\r\n      }\r\n  }`,\r\n    variables: {},\r\n  });\r\n  let mobalyticsConfig = {\r\n    method: \"post\",\r\n    url: \"https://app.mobalytics.gg/api/league/gql/static/v1\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    data: queryString,\r\n  };\r\n  let championEndpoints = [];\r\n  let championPromises = [];\r\n  let mobalyticsData = [];\r\n  let mergedChampionData = {};\r\n\r\n  // Fetch the champions.json from the endpoints\r\n  endpoints.forEach((endpoint) => {\r\n    let promise = axios.get(endpoint.url).then((response) => {\r\n      championEndpoints.push({ name: endpoint.name, data: response.data });\r\n    });\r\n    championPromises.push(promise);\r\n  });\r\n\r\n  await Promise.all(championPromises);\r\n  championPromises = [];\r\n\r\n  // Get data from Mobalytics GraphQL API\r\n  let mobalyticsPromise = axios(mobalyticsConfig)\r\n    .then(function (response) {\r\n      mobalyticsData = _.chain(response.data.data.info)\r\n        .flatMap(({ flatData }) => flatData)\r\n        .keyBy(\"riotSlug\")\r\n        .value();\r\n\r\n      console.log(\"Mobalytics data fetched\");\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n  championPromises.push(mobalyticsPromise);\r\n  await Promise.all(championPromises);\r\n\r\n  // Get data from endpoints\r\n  championEndpoints.forEach((endpoint) => {\r\n    if (endpoint.name === \"MerakiAnalytics\") {\r\n      let data = endpoint.data;\r\n      Object.assign(mergedChampionData, data);\r\n    }\r\n  });\r\n\r\n  // Merge mobalytics data with mergedChampionData\r\n  mergedChampionData = _.merge(mergedChampionData, mobalyticsData);\r\n\r\n  for (const key of Object.keys(mergedChampionData)) {\r\n    // Save champion images\r\n    let icon = mergedChampionData[key].icon;\r\n    if (icon) {\r\n      let iconName = icon.split(\"/\").pop().split(\".\")[0] || \"\";\r\n      if (iconName && iconName.length > 0) {\r\n        // deepcode ignore PrototypePollution: won't fix\r\n        mergedChampionData[key].placeholder = await downloadImage(\r\n          `data/img/champions/${iconName}.webp`,\r\n          icon\r\n        );\r\n        // deepcode ignore PrototypePollution: won't fix\r\n        mergedChampionData[key].icon = `data/img/champions/${iconName}.webp`;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Create a copy of the mergedChampionData\r\n  let lightweightChampionData = _.cloneDeep(mergedChampionData);\r\n\r\n  Object.keys(lightweightChampionData).forEach((key) => {\r\n    // Delete unneeded keys (abilities, skins, stats, key, slug)\r\n    delete lightweightChampionData[key].abilities;\r\n    delete lightweightChampionData[key].skins;\r\n    delete lightweightChampionData[key].stats;\r\n    delete lightweightChampionData[key].key;\r\n    delete lightweightChampionData[key].slug;\r\n  });\r\n\r\n  console.info(\"Writing champions data to file...\");\r\n\r\n  // Write the merged champions.json file\r\n  // deepcode ignore PT: Wont fix this right away\r\n  writeFileSync(\r\n    `data/${latestVersion}/champions.json`,\r\n    JSON.stringify(mergedChampionData)\r\n  );\r\n  writeFileSync(\r\n    `data/latest/champions.json`,\r\n    JSON.stringify(mergedChampionData)\r\n  );\r\n  // deepcode ignore PT: Wont fix this right away\r\n  writeFileSync(\r\n    `data/${latestVersion}/champions-summary.json`,\r\n    JSON.stringify(lightweightChampionData)\r\n  );\r\n  writeFileSync(\r\n    `data/latest/champions-summary.json`,\r\n    JSON.stringify(lightweightChampionData)\r\n  );\r\n};\r\n\r\n// Get the champions.json file from the different endpoints specified in champions.json\r\n// Return the custom merged champions.json file\r\nexport const getChampions = async () => {\r\n  // Read the champions.json configuration file\r\n  const championsConfig = JSON.parse(readFileSync(\"endpoints/champions.json\"));\r\n  const latestVersion = await getLatestVersion();\r\n  let endpoints = [];\r\n  // Create an endpoints array from the configuration file\r\n  championsConfig.forEach((endpoint) => {\r\n    console.log(\"Fetching champions.json from \" + endpoint.name);\r\n    const url = `${endpoint.baseUrl}${\r\n      endpoint.needsLatest ? latestVersion : \"\"\r\n    }${endpoint.resource}`;\r\n    endpoints.push({ name: endpoint.name, url: url });\r\n    console.log(endpoint.name + \" champions URL: \" + url);\r\n  });\r\n  // Create a folder in /data if it doesn't exist for the latest version\r\n  if (!existsSync(`data/${latestVersion}`)) {\r\n    mkdirSync(`data/${latestVersion}`);\r\n  }\r\n  // Create the folder latest in /data if it doesn't exist\r\n  if (!existsSync(`data/latest`)) {\r\n    mkdirSync(`data/latest`);\r\n  }\r\n  await mergeChampions(endpoints, latestVersion);\r\n};\r\n\r\n// const main = async () => {\r\n//   try {\r\n//     await getChampions();\r\n//     info(\"Successfully merged champions.json\");\r\n//   } catch (error) {\r\n//     setFailed(error.message);\r\n//   }\r\n// };\r\n\r\n// // Only run main if running locally\r\n// if (process.env.GITHUB_ACTIONS !== \"true\") {\r\n//   main();\r\n// }\r\n"],"names":[],"version":3,"file":"index.js.map"}