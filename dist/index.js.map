{"mappings":"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","sources":["index.js","src/items.js","src/utils/getLatestVersion.js","src/utils/sanitizeText.js","src/utils/itemUtils.js","src/utils/constants.js","src/utils/downloadImages.js","src/champions.js"],"sourcesContent":["import { info, setFailed } from \"@actions/core\";\nimport { getItems } from \"./src/items.js\";\nimport { getChampions } from \"./src/champions.js\";\n\nconst main = async () => {\n  try {\n    await getItems();\n    info(\"Successfully merged items.json\\n\");\n    await getChampions();\n    info(\"Successfully merged champions.json\\n\");\n    info(\"Successfully generated custom files.\");\n  } catch (error) {\n    setFailed(error.message);\n  }\n};\n\nmain();\n","import axios from \"axios\";\nimport { info, setFailed } from \"@actions/core\";\nimport _ from \"lodash\";\nimport { readFileSync, existsSync, mkdirSync } from \"fs\";\nimport { getLatestVersion } from \"./utils/getLatestVersion.js\";\nimport { sanitizeText } from \"./utils/sanitizeText.js\";\nimport {\n  getCommunityDragonData,\n  getMerakiData,\n  getBlitzData,\n  writeItems,\n} from \"./utils/itemUtils.js\";\nimport {\n  requiredKeysMeraki,\n  admittedClasses,\n  defaultValues,\n} from \"./utils/constants.js\";\nimport downloadImage from \"./utils/downloadImages.js\";\n// Load env variables from .env file\nimport \"dotenv/config\";\n\nconst mergeItems = async (endpoints, latestVersion) => {\n  // Create a new array to store the items.json files\n  let itemEndpoints = [];\n  let itemPromises = [];\n  endpoints.forEach((endpoint) => {\n    let promise = axios.get(endpoint.url).then((response) => {\n      itemEndpoints.push({ name: endpoint.name, data: response.data });\n    });\n    itemPromises.push(promise);\n  });\n  await Promise.all(itemPromises);\n\n  let mergedItems = {};\n  itemEndpoints.forEach((endpoint) => {\n    switch (endpoint.name) {\n      case \"Blitz\":\n        Object.assign(mergedItems, getBlitzData(endpoint));\n        break;\n\n      case \"MerakiAnalytics\":\n        Object.entries(endpoint.data).forEach((item) => {\n          const key = item[0];\n          const values = item[1];\n\n          let { filteredItem, classes } = getMerakiData(\n            values,\n            requiredKeysMeraki,\n            admittedClasses,\n            itemEndpoints\n          );\n\n          // Append the filteredItem and the classes to the mergedItems in the corresponding key\n          mergedItems[key] = {\n            ...mergedItems[key],\n            ...filteredItem,\n            classes: classes,\n          };\n        });\n        break;\n\n      case \"CommunityDragon\":\n        getCommunityDragonData(endpoint, mergedItems);\n        break;\n    }\n  });\n\n  // Merge the default values with every item in mergedItems\n  mergedItems = _.mapValues(mergedItems, (item) => {\n    return _.defaults(item, defaultValues);\n  });\n\n  console.log(`Merged ${Object.keys(mergedItems).length} items`);\n\n  // Sanitize item description for each item in mergedItems\n  for (const [key, value] of Object.entries(mergedItems)) {\n    let description = value.description;\n    if (description) {\n      description = sanitizeText(value);\n      mergedItems[key].description = description;\n    }\n    if (value.icon) {\n      let iconName = value.icon.split(\"/\").pop().split(\".\")[0] || \"\";\n      if (iconName && iconName.length > 0) {\n        let base64 = await downloadImage(\n          `data/img/items/${iconName}.png`,\n          value.icon\n        );\n        mergedItems[key].placeholder = base64;\n        mergedItems[key].icon = `data/img/items/${iconName}.png`;\n      }\n    }\n  }\n\n  console.info(\"Writing items data to file...\");\n  writeItems(latestVersion, mergedItems);\n};\n\n// Get the items.json file from the different endpoints specified in items.json\n// Return the custom merged items.json file\nexport const getItems = async () => {\n  // Read the items.json configuration file\n  const itemsConfig = JSON.parse(readFileSync(\"endpoints/items.json\"));\n  // Fetch the latest version of DDragon\n  const latestVersion = await getLatestVersion();\n  let endpoints = [];\n  // Fetch the items.json from the itemsConfig\n  itemsConfig.forEach((endpoint) => {\n    console.log(\"Fetching items.json from \" + endpoint.name);\n    const url = `${endpoint.baseUrl}${\n      endpoint.needsLatest ? latestVersion : \"\"\n    }${endpoint.resource}`;\n    endpoints.push({ name: endpoint.name, url: url });\n    console.log(endpoint.name + \" items URL: \" + url);\n  });\n  // Create a folder in /data if it doesn't exist for the latest version\n  if (!existsSync(`data/${latestVersion}`)) {\n    mkdirSync(`data/${latestVersion}`);\n  }\n  // Create the folder latest in /data if it doesn't exist\n  if (!existsSync(`data/latest`)) {\n    mkdirSync(`data/latest`);\n  }\n  await mergeItems(endpoints, latestVersion);\n};\n\nconst main = async () => {\n  try {\n    await getItems();\n    info(\"Successfully merged items.json\");\n  } catch (error) {\n    setFailed(error.message);\n    console.log(\"Error: \" + error.message);\n  }\n};\n\n// Only run main if running locally\nif (process.env.GITHUB_ACTIONS !== \"true\") {\n  main();\n}\n","import axios from \"axios\";\n\n/**\n * Gets the latest version of DDragon from https://ddragon.leagueoflegends.com/api/versions.json\n * @returns {string} The latest version of the game.\n */\nconst getLatestVersion = async () => {\n  const response = await axios.get(\n    \"https://ddragon.leagueoflegends.com/api/versions.json\"\n  );\n  let latestVersion = response.data[0];\n  // Sanitize latest version, only accept numbers and dots\n  latestVersion = latestVersion.replace(/[^0-9.]/g, \"\");\n  return latestVersion;\n};\nconst _getLatestVersion = getLatestVersion;\nexport { _getLatestVersion as getLatestVersion };\n","import _ from \"lodash\";\nimport createDOMPurify from \"dompurify\";\nimport { JSDOM } from \"jsdom\";\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\n\n/**\n * Function to convert a string from camel case or snake case to pascal case\n * @param {string} str - The string to convert to PascalCase.\n */\nconst toPascalCase = (str) => {\n  return str\n    .split(\"_\")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\"\");\n};\n\n/**\n * It takes a string, sanitizes it, parses it, and returns a string.\n * @param {itemsSchema} item - {\n * @returns {string} A string of XML.\n */\nexport const sanitizeText = (item) => {\n  if (!item) return \"\";\n  let text = item.description;\n  if (!text) {\n    return;\n  }\n  // Remove curly braces from API placeholders\n  text = text.replaceAll(\"{\", \"\");\n  text = text.replaceAll(\"}\", \"\");\n  const pascalCaseTags = [\n    \"Active\",\n    \"Attention\",\n    \"FlavorText\",\n    \"Healing\",\n    \"KeywordStealth\",\n    \"MagicDamage\",\n    \"MainText\",\n    \"Passive\",\n    \"PhysicalDamage\",\n    \"RarityGeneric\",\n    \"RarityLegendary\",\n    \"RarityMythic\",\n    \"Rules\",\n    \"ScaleLevel\",\n    \"ScaleMana\",\n    \"Stats\",\n    \"Status\",\n    \"TrueDamage\",\n  ];\n  // Sanitize text with dompurify\n  const window = new JSDOM(\"\").window;\n  const DOMPurify = createDOMPurify(window);\n  let sanitizedText = DOMPurify.sanitize(text, {\n    ADD_TAGS: [\n      \"active\",\n      \"attention\",\n      \"flavorText\",\n      \"healing\",\n      \"keywordStealth\",\n      \"magicDamage\",\n      \"mainText\",\n      \"passive\",\n      \"physicalDamage\",\n      \"rarityGeneric\",\n      \"rarityLegendary\",\n      \"rarityMythic\",\n      \"rules\",\n      \"scaleLevel\",\n      \"scaleMana\",\n      \"stats\",\n      \"status\",\n      \"trueDamage\",\n    ],\n    FORBID_TAGS: [\"br\"],\n  });\n\n  // Replace all lowercase words inside the sanitizedText with the camelCaseTags version\n  pascalCaseTags.forEach((tag) => {\n    const lowercaseTag = tag.toLowerCase();\n    // Replace lowercase tag with tag\n    sanitizedText = _.replace(\n      sanitizedText,\n      new RegExp(lowercaseTag, \"g\"),\n      tag\n    );\n  });\n\n  // Parse with fast-xml-parser\n  const parser = new XMLParser({\n    preserveOrder: true,\n  });\n  const xml = parser.parse(sanitizedText);\n  // Remove stats from the xml object\n  if (xml.mainText?.stats) {\n    for (let key in xml.mainText.stats) {\n      delete xml.mainText.stats[key];\n    }\n  }\n  // Convert xml object to XML string\n  const builder = new XMLBuilder({\n    preserveOrder: true,\n  });\n  let xmlString = builder.build(xml);\n\n  // Add stats between <Stats> tag and </Stats> tag\n  xmlString = parseStats(xmlString, item);\n\n  xmlString = parseActives(xmlString);\n\n  // Replace in xmlString:\n  // Add a whitespace (' ') before a less than character ('<') if the preceding character is a letter (a-z, A-Z) or a colon (':')\n  const lessThanRegex = /([a-zA-Z,:])</g;\n  xmlString = xmlString.replace(lessThanRegex, \"$1 <\");\n\n  return xmlString;\n};\n\n/**\n * Takes an XML string and an item object, and replaces the string with a JSX element\n * @param {string} xmlString - The string of the xml file\n * @param {itemsSchema} item - The item object that contains the stats\n * @returns {string} The xmlString is being returned with the stats of the item.\n * @example\n * Returns: <Stats><Stat name=\"Attack Speed\">1.5</Stat></Stats>\n */\nexport function parseStats(xmlString, item) {\n  const statsRegex = /<Stats>(.*?)<\\/Stats>/g;\n  const statsMatch = xmlString.match(statsRegex);\n  if (statsMatch) {\n    const statsTag = statsMatch[0];\n    let statsString = \"\";\n\n    // Create the stats string with the stats of the item\n    if (item.stats) {\n      Object.entries(item.stats).forEach(([keyItem, value]) => {\n        Object.entries(value).forEach(([key2, value2]) => {\n          let statName = toPascalCase(key2) + toPascalCase(keyItem);\n          statsString += `<Stat name=\"${statName}\">${value2}${\n            key2.includes(\"percent\") ? \"%\" : \"\"\n          }</Stat>`;\n        });\n      });\n    }\n\n    const statText = `<Stats>${statsString}</Stats>`;\n    xmlString = _.replace(xmlString, statsTag, statText);\n  }\n  return xmlString;\n}\n\n/** Combine all two adjacent Active tags when the first one is \"Active -\"\n * @param {string} xmlString - The string of the xml file\n * @returns {string} Parsed string\n * @example\n * Input: <Active>Active -</Active><Active>Lorem ipsum</Active>\n * Result:  <Active>Active - Lorem ipsum</Active>\n */\nexport function parseActives(xmlString) {\n  const activeRegex = /<Active>(.*?)<\\/Active>/g;\n  const activeMatch = xmlString.match(activeRegex);\n  let skipNext = false;\n  if (activeMatch) {\n    // Loop through each match\n    for (const match of activeMatch) {\n      // If skipNext is set to true, skip the next match\n      if (skipNext === true) {\n        skipNext = false;\n        // Delete the match from the xmlString\n        xmlString = _.replace(xmlString, match, \"\");\n        continue;\n      }\n      // Get the content of the match\n      const tagContent = match.replace(/<\\/?Active>/g, \"\");\n      // Check if the content is \"Active -\"\n      if (tagContent === \"Active -\") {\n        // Replace the match with the \"Active - \" and the content of the next match\n        const nextTagContent = activeMatch[activeMatch.indexOf(match) + 1]\n          .replace(/<\\/?Active>/g, \"\")\n          .trim();\n\n        xmlString = _.replace(\n          xmlString,\n          match,\n          `<Active>Active - ${nextTagContent}</Active>`\n        );\n        // Skip the next match\n        skipNext = true;\n      }\n    }\n  }\n  return xmlString;\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport _ from \"lodash\";\n\n// Function to convert a string from snake case to camel case\nexport const snakeToCamel = (str) => {\n  return str.replace(/(_\\w)/g, (m) => m[1].toUpperCase());\n};\n\nexport function writeItems(latestVersion, mergedItems) {\n  // Write the merged items.json file in the latestVersion folder \"./data/\" + latestVersion + \"/items.json\";\n  let rootPath = \"data/\";\n  let latestVersionPath = path.join(rootPath, latestVersion, \"/items.json\");\n  // Sanitize path to avoid directory traversal\n  latestVersionPath = path.normalize(latestVersionPath);\n  // deepcode ignore PT: Wont fix this right away\n  fs.writeFileSync(latestVersionPath, JSON.stringify(mergedItems));\n  // Also save a copy in the latest folder\n  fs.writeFileSync(`data/latest/items.json`, JSON.stringify(mergedItems));\n}\n\nexport function getCommunityDragonData(endpoint, mergedItems) {\n  let requiredKeysCD = [\"categories\", \"inStore\", \"maxStacks\"];\n  endpoint.data.forEach((item) => {\n    const key = item.id;\n    let filteredItem = _.pick(item, requiredKeysCD);\n    // Append the filteredItem to the mergedItems in the corresponding key\n    mergedItems[key] = { ...mergedItems[key], ...filteredItem };\n  });\n}\n\nexport function getMerakiData(\n  values,\n  requiredKeysMeraki,\n  admittedClasses,\n  itemEndpoints\n) {\n  let filteredItem = _.pick(values, requiredKeysMeraki);\n\n  // Get an array of champion classes from nested object property\n  let classes = _.get(values, \"shop.tags\");\n  if (classes.length > 0) {\n    classes = _.filter(classes, (className) =>\n      admittedClasses.includes(className)\n    );\n  }\n  // Remove empty keys from stats to reduce the size of the json file\n  let stats = _.get(values, \"stats\");\n  if (stats) {\n    Object.entries(stats).forEach((stat) => {\n      const [key2, value2] = stat;\n      // Convert key2 from snake case to camel case\n      const camelCaseKey2 = snakeToCamel(key2);\n      // Replace key2\n      if (key2 !== camelCaseKey2) {\n        Object.defineProperty(\n          stats,\n          camelCaseKey2,\n          Object.getOwnPropertyDescriptor(stats, key2)\n        );\n        delete stats[key2];\n      }\n\n      Object.entries(value2).forEach((stat2) => {\n        const [key3, value3] = stat2;\n        if (value3 === 0) {\n          delete values[\"stats\"][camelCaseKey2][key3];\n        }\n      });\n    });\n  }\n  // Validate that the icon is a valid URL\n  if (\n    !filteredItem.icon ||\n    (filteredItem.icon && !filteredItem.icon.startsWith(\"http\"))\n  ) {\n    // Get item from CommunityDragon endpoint data\n    let CDragonIconPath = _.chain(itemEndpoints)\n      .find({ name: \"CommunityDragon\" })\n      .get(\"data\")\n      .find({ id: values.id })\n      .get(\"iconPath\")\n      .value();\n\n    if (CDragonIconPath) {\n      // Strip text after Icons2d/ from the icon path\n      CDragonIconPath = CDragonIconPath.split(\"Icons2D/\")[1].toLowerCase();\n      // Set fallback icon if the icon is not a valid URL\n      filteredItem.icon =\n        \"https://raw.communitydragon.org/latest/plugins/rcp-be-lol-game-data/global/default/assets/items/icons2d/\" +\n        CDragonIconPath;\n\n      console.warn(\n        `Item ${values.name}-${values.id} has an invalid icon URL, using fallback icon`\n      );\n    }\n  }\n  return { filteredItem, classes };\n}\n\nexport function getBlitzData(endpoint) {\n  let data = endpoint.data.data;\n  // Parse numbers\n  Object.entries(data).forEach((entry) => {\n    const [key, value] = entry;\n    Object.entries(value).forEach((item) => {\n      const [key2, value2] = item;\n      if (key2 === \"id\") {\n        data[key][key2] = parseInt(value2);\n      } else if (\n        (key2 === \"maps\" || key2 === \"from\" || key2 === \"into\") &&\n        value2 !== null\n      ) {\n        data[key][key2] = value2.map(Number);\n      } else if (key2 === \"depth\") {\n        // Delete the depth key\n        delete data[key][\"depth\"];\n      } else if (key2 === \"stats\") {\n        // Delete stats from blitzEndpoint\n        delete data[key][\"stats\"];\n      }\n    });\n  });\n  return data;\n}\n","export const requiredKeysMeraki = [\n  \"icon\",\n  \"iconOverlay\",\n  \"nicknames\",\n  \"requiredChampion\",\n  \"simpleDescription\",\n  \"tier\",\n  \"stats\",\n];\n\nexport const admittedClasses = [\n  \"MAGE\",\n  \"SUPPORT\",\n  \"TANK\",\n  \"FIGHTER\",\n  \"MARKSMAN\",\n  \"ASSASSIN\",\n];\n\n// Set default values for required keys\nexport const defaultValues = {\n  categories: [],\n  classes: [],\n  description: null,\n  from: [],\n  gold: { base: 0, purchasable: false, total: 0, sell: 0 },\n  icon: \"\",\n  iconOverlay: false,\n  id: -1,\n  inStore: false,\n  into: [],\n  maps: [],\n  maxStacks: 0,\n  mythic: false,\n  name: \"\",\n  nicknames: [],\n  placeholder: \"\",\n  requiredChampion: \"\",\n  simpleDescription: \"\",\n  stats: {},\n  tier: 0,\n};\n","import sharp from \"sharp\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport axios from \"axios\";\nimport { getPlaiceholder } from \"plaiceholder\";\n\n/**\n * &gt;&gt;&gt; downloadImage(\"data/img/items/image.png\", \"http://www.example.com/image.png\")\n * @param {string} filename - The path of the file to be downloaded. Include the subfolder for champion or items\n * @param {string} url - The URL path to the image you want to download.\n * @returns {Promise<string>} Base64 placeholder string.\n */\nasync function downloadImage(filename, url) {\n  if (!filename || !url) return;\n  let placeholder = \"\";\n\n  // Create folders\n  if (!existsSync(\"data/img/champions\")) {\n    mkdirSync(\"data/img/champions\", { recursive: true });\n  }\n  if (!existsSync(\"data/img/items\")) {\n    mkdirSync(\"data/img/items\", { recursive: true });\n  }\n  await axios\n    .get(url, { responseType: \"arraybuffer\" })\n    .then(async (axiosResponse) => {\n      console.log(\"Saving image \" + filename);\n      await sharp(axiosResponse.data)\n        .toFile(filename)\n        .then(async () => {\n          await getPlaiceholder(axiosResponse.data)\n            .then(({ base64 }) => (placeholder = base64))\n            .catch((error) => console.error(error));\n        })\n        .catch((err) => {\n          console.error(err);\n        });\n    })\n    .catch((err) => console.error(err));\n\n  return placeholder;\n}\n\nexport default downloadImage;\n\n// test\n// eslint-disable-next-line no-unused-vars\nconst test = async () => {\n  let res = await downloadImage(\n    \"data/img/champions/Aatrox.png\",\n    \"https://ddragon.leagueoflegends.com/cdn/12.13.1/img/champion/Aatrox.png\"\n  );\n  console.log(\"Base64: \" + res);\n};\n","import { info, setFailed } from \"@actions/core\";\nimport { writeFileSync, readFileSync, existsSync, mkdirSync } from \"fs\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\nimport { getLatestVersion } from \"./utils/getLatestVersion.js\";\n// Load env variables from .env file\nimport \"dotenv/config\";\nimport downloadImage from \"./utils/downloadImages.js\";\n\nconst mergeChampions = async (endpoints, latestVersion) => {\n  const queryString = JSON.stringify({\n    query: `query ChampionsInfo{\n      info: queryChampionsV1Contents(top:0){\n          flatData{\n              name\n              slug\n              antiDive\n              burst\n              control\n              damage\n              damageType\n              divePotential\n              engage\n              gankDenial\n              gankReliability\n              gankTurnAround\n              kite\n              mobility\n              pick\n              poke\n              preControl\n              preDamage\n              preMobility\n              preToughness\n              postControl\n              postDamage\n              postMobility\n              postToughness\n              skirmish\n              split\n              sustained\n              tags\n              toughness\n              utility\n              waveclear\n              powerSpikes{\n                  early\n                  mid\n                  late\n              }\n              key: riotId\n              riotSlug\n              difficultyLevel\n              difficulty{\n                  flatData{\n                      slug\n                      name\n                      level\n                  }\n              }\n          }\n      }\n  }`,\n    variables: {},\n  });\n  let mobalyticsConfig = {\n    method: \"post\",\n    url: \"https://app.mobalytics.gg/api/league/gql/static/v1\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    data: queryString,\n  };\n  let championEndpoints = [];\n  let championPromises = [];\n  let mobalyticsData = [];\n  let mergedChampionData = {};\n\n  // Fetch the champions.json from the endpoints\n  endpoints.forEach((endpoint) => {\n    let promise = axios.get(endpoint.url).then((response) => {\n      championEndpoints.push({ name: endpoint.name, data: response.data });\n    });\n    championPromises.push(promise);\n  });\n\n  await Promise.all(championPromises);\n  championPromises = [];\n\n  // Get data from Mobalytics GraphQL API\n  let mobalyticsPromise = axios(mobalyticsConfig)\n    .then(function (response) {\n      mobalyticsData = _.chain(response.data.data.info)\n        .flatMap(({ flatData }) => flatData)\n        .keyBy(\"riotSlug\")\n        .value();\n\n      console.log(\"Mobalytics data fetched\");\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  championPromises.push(mobalyticsPromise);\n  await Promise.all(championPromises);\n\n  // Get data from endpoints\n  championEndpoints.forEach((endpoint) => {\n    if (endpoint.name === \"MerakiAnalytics\") {\n      let data = endpoint.data;\n      Object.assign(mergedChampionData, data);\n    }\n  });\n\n  // Merge mobalytics data with mergedChampionData\n  mergedChampionData = _.merge(mergedChampionData, mobalyticsData);\n\n  for (const key of Object.keys(mergedChampionData)) {\n    // Save champion images\n    let icon = mergedChampionData[key].icon;\n    if (icon) {\n      let iconName = icon.split(\"/\").pop().split(\".\")[0] || \"\";\n      if (iconName && iconName.length > 0) {\n        // deepcode ignore PrototypePollution: won't fix\n        mergedChampionData[key].placeholder = await downloadImage(\n          `data/img/champions/${iconName}.png`,\n          icon\n        );\n        // deepcode ignore PrototypePollution: won't fix\n        mergedChampionData[key].icon = `data/img/champions/${iconName}.png`;\n      }\n    }\n  }\n\n  // Create a copy of the mergedChampionData\n  let lightweightChampionData = _.cloneDeep(mergedChampionData);\n\n  Object.keys(lightweightChampionData).forEach((key) => {\n    // Delete unneeded keys (abilities, skins, stats, key, slug)\n    delete lightweightChampionData[key].abilities;\n    delete lightweightChampionData[key].skins;\n    delete lightweightChampionData[key].stats;\n    delete lightweightChampionData[key].key;\n    delete lightweightChampionData[key].slug;\n  });\n\n  console.info(\"Writing champions data to file...\");\n\n  // Write the merged champions.json file\n  // deepcode ignore PT: Wont fix this right away\n  writeFileSync(\n    `data/${latestVersion}/champions.json`,\n    JSON.stringify(mergedChampionData)\n  );\n  writeFileSync(\n    `data/latest/champions.json`,\n    JSON.stringify(mergedChampionData)\n  );\n  // deepcode ignore PT: Wont fix this right away\n  writeFileSync(\n    `data/${latestVersion}/champions-summary.json`,\n    JSON.stringify(lightweightChampionData)\n  );\n  writeFileSync(\n    `data/latest/champions-summary.json`,\n    JSON.stringify(lightweightChampionData)\n  );\n};\n\n// Get the champions.json file from the different endpoints specified in champions.json\n// Return the custom merged champions.json file\nexport const getChampions = async () => {\n  // Read the champions.json configuration file\n  const championsConfig = JSON.parse(readFileSync(\"endpoints/champions.json\"));\n  const latestVersion = await getLatestVersion();\n  let endpoints = [];\n  // Create an endpoints array from the configuration file\n  championsConfig.forEach((endpoint) => {\n    console.log(\"Fetching champions.json from \" + endpoint.name);\n    const url = `${endpoint.baseUrl}${\n      endpoint.needsLatest ? latestVersion : \"\"\n    }${endpoint.resource}`;\n    endpoints.push({ name: endpoint.name, url: url });\n    console.log(endpoint.name + \" champions URL: \" + url);\n  });\n  // Create a folder in /data if it doesn't exist for the latest version\n  if (!existsSync(`data/${latestVersion}`)) {\n    mkdirSync(`data/${latestVersion}`);\n  }\n  // Create the folder latest in /data if it doesn't exist\n  if (!existsSync(`data/latest`)) {\n    mkdirSync(`data/latest`);\n  }\n  await mergeChampions(endpoints, latestVersion);\n};\n\nconst main = async () => {\n  try {\n    await getChampions();\n    info(\"Successfully merged champions.json\");\n  } catch (error) {\n    setFailed(error.message);\n  }\n};\n\n// Only run main if running locally\nif (process.env.GITHUB_ACTIONS !== \"true\") {\n  main();\n}\n"],"names":["info","setFailed","getItems","getChampions","main","error","message","axios","_","readFileSync","existsSync","mkdirSync","getLatestVersion","sanitizeText","getCommunityDragonData","getMerakiData","getBlitzData","writeItems","requiredKeysMeraki","admittedClasses","defaultValues","downloadImage","mergeItems","endpoints","latestVersion","itemEndpoints","itemPromises","forEach","endpoint","promise","get","url","then","response","push","name","data","Promise","all","mergedItems","Object","assign","entries","item","key","values","filteredItem","classes","mapValues","defaults","console","log","keys","length","value","description","icon","iconName","split","pop","base64","placeholder","itemsConfig","JSON","parse","baseUrl","needsLatest","resource","process","env","GITHUB_ACTIONS","replace","_getLatestVersion","createDOMPurify","JSDOM","XMLParser","XMLBuilder","toPascalCase","str","map","word","charAt","toUpperCase","slice","join","text","replaceAll","pascalCaseTags","window","DOMPurify","sanitizedText","sanitize","ADD_TAGS","FORBID_TAGS","tag","lowercaseTag","toLowerCase","RegExp","parser","preserveOrder","xml","mainText","stats","builder","xmlString","build","parseStats","parseActives","lessThanRegex","statsRegex","statsMatch","match","statsTag","statsString","keyItem","key2","value2","statName","includes","statText","activeRegex","activeMatch","skipNext","tagContent","nextTagContent","indexOf","trim","path","fs","snakeToCamel","m","rootPath","latestVersionPath","normalize","writeFileSync","stringify","requiredKeysCD","id","pick","filter","className","stat","camelCaseKey2","defineProperty","getOwnPropertyDescriptor","stat2","key3","value3","startsWith","CDragonIconPath","chain","find","warn","entry","parseInt","Number","categories","from","gold","base","purchasable","total","sell","iconOverlay","inStore","into","maps","maxStacks","mythic","nicknames","requiredChampion","simpleDescription","tier","sharp","getPlaiceholder","filename","recursive","responseType","axiosResponse","toFile","catch","err","test","res","mergeChampions","queryString","query","variables","mobalyticsConfig","method","headers","championEndpoints","championPromises","mobalyticsData","mergedChampionData","mobalyticsPromise","flatMap","flatData","keyBy","merge","lightweightChampionData","cloneDeep","abilities","skins","slug","championsConfig"],"version":3,"file":"index.js.map"}