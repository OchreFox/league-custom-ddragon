{"version":3,"sources":["../src/index.ts","../src/parsers/champions.ts","../src/utils/downloadImages.ts","../src/utils/blurhashDataURL.ts","../src/utils/getLatestVersion.ts","../endpoints/champions.json","../src/utils/championQuery.ts","../src/utils/endpointUtils.ts","../src/parsers/items.ts","../src/utils/sanitizeText.ts","../src/utils/itemUtils.ts","../src/types/items.ts","../src/schemas/meraki-item-zod-schema.ts","../src/utils/constants.ts","../endpoints/items.json","../src/utils/extractTags.ts","../src/utils/wikiTemplateHelpers.ts","../src/utils/wikiTemplates.ts"],"sourcesContent":["import { info } from \"@actions/core\";\nimport { getChampions } from \"./parsers/champions.js\";\nimport { getItems } from \"./parsers/items.js\";\nimport { saveTooltips } from \"./utils/wikiTemplateHelpers.js\";\n\nconst main = async () => {\n  // Get Tooltips\n  saveTooltips();\n  info(\"Successfully downloaded tooltip data.\\n\");\n  await getItems();\n  info(\"Successfully merged items.json\\n\");\n  await getChampions();\n  info(\"Successfully merged champions.json\\n\");\n  info(\"Successfully generated custom files.\");\n};\n\nmain();\n","import { writeFileSync, existsSync, mkdirSync } from \"fs\";\nimport axios from \"axios\";\nimport _ from \"lodash\";\n// Load env variables from .env file\nimport \"dotenv/config\";\nimport { downloadImage } from \"src/utils/downloadImages.js\";\nimport { getLatestVersion } from \"src/utils/getLatestVersion.js\";\nimport championsConfig from \"endpoints/champions.json\";\n\nimport {\n  Endpoint,\n  EndpointChampionData,\n  EndpointNames,\n} from \"src/types/global.js\";\n\nimport { queryString } from \"src/utils/championQuery.js\";\nimport { MergedChampionDataObject } from \"src/types/champions.js\";\nimport { getEndpoints, readJsonFile } from \"../utils/endpointUtils.js\";\n\nconst mergeChampions = async (endpoints: Endpoint[], latestVersion: string) => {\n  let mobalyticsConfig = {\n    method: \"post\",\n    url: \"https://app.mobalytics.gg/api/league/gql/static/v1\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n      \"Accept-Encoding\": \"identity\",\n    },\n    data: queryString,\n  };\n  let championEndpoints: EndpointChampionData[] = [];\n  let championPromises: Promise<void>[] = [];\n  let mobalyticsData: _.Dictionary<any> = [];\n  let mergedChampionData: MergedChampionDataObject = {};\n\n  // Fetch the champions.json from the endpoints\n  endpoints.forEach((endpoint) => {\n    let promise = axios\n      .get(endpoint.url, {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Accept-Encoding\": \"identity\",\n        },\n      })\n      .then((response) => {\n        championEndpoints.push({ name: endpoint.name, data: response.data });\n      });\n    championPromises.push(promise);\n  });\n\n  await Promise.all(championPromises);\n  championPromises = [];\n\n  // Get data from Mobalytics GraphQL API\n  let mobalyticsPromise = axios(mobalyticsConfig)\n    .then(function (response) {\n      mobalyticsData = _.chain(response.data.data.info)\n        .flatMap(({ flatData }) => flatData)\n        .keyBy(\"riotSlug\")\n        .value();\n\n      console.log(\"Mobalytics data fetched\");\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  championPromises.push(mobalyticsPromise);\n  await Promise.all(championPromises);\n\n  // Get data from endpoints\n  championEndpoints.forEach((endpoint) => {\n    if (endpoint.name === EndpointNames.MerakiAnalytics) {\n      let data = endpoint.data;\n      Object.assign(mergedChampionData, data);\n    }\n  });\n\n  // Merge mobalytics data with mergedChampionData\n  mergedChampionData = _.merge(mergedChampionData, mobalyticsData);\n  let championIconPromises: Promise<void>[] = [];\n  for (const key of Object.keys(mergedChampionData)) {\n    // Save champion images\n    let icon = mergedChampionData[key].icon;\n    if (icon) {\n      let iconName = icon.split(\"/\").pop()?.split(\".\")[0] || \"\";\n      if (iconName && iconName.length > 0) {\n        let promise = downloadImage(\n          `data/img/champions/${iconName}.webp`,\n          icon\n        ).then((placeholder) => {\n          mergedChampionData[key].icon = `data/img/champions/${iconName}.webp`;\n          mergedChampionData[key].placeholder = placeholder;\n          console.log(\n            \"Downloaded icon for champion \" + mergedChampionData[key].name\n          );\n        });\n        championIconPromises.push(promise);\n      }\n    }\n  }\n\n  await Promise.all(championIconPromises);\n\n  // Create a copy of the mergedChampionData\n  let lightweightChampionData = _.cloneDeep(mergedChampionData);\n\n  Object.keys(lightweightChampionData).forEach((key) => {\n    // Delete unneeded keys (abilities, skins, stats, key, slug)\n    delete lightweightChampionData[key].abilities;\n    delete lightweightChampionData[key].skins;\n    delete lightweightChampionData[key].stats;\n    delete lightweightChampionData[key].key;\n    delete lightweightChampionData[key].slug;\n  });\n\n  console.info(\"Writing champions data to file...\");\n\n  // Write the merged champions.json file\n  // deepcode ignore PT: Wont fix this right away\n  writeFileSync(\n    `data/${latestVersion}/champions.json`,\n    JSON.stringify(mergedChampionData)\n  );\n  writeFileSync(\n    `data/latest/champions.json`,\n    JSON.stringify(mergedChampionData)\n  );\n  // deepcode ignore PT: Wont fix this right away\n  writeFileSync(\n    `data/${latestVersion}/champions-summary.json`,\n    JSON.stringify(lightweightChampionData)\n  );\n  writeFileSync(\n    `data/latest/champions-summary.json`,\n    JSON.stringify(lightweightChampionData)\n  );\n};\n\n// Get the champions.json file from the different endpoints specified in champions.json\n// Return the custom merged champions.json file\nexport async function getChampions() {\n  const latestVersion = await getLatestVersion();\n  // const championsConfig = readJsonFile(\"endpoints/champions.json\");\n  let endpoints: Endpoint[] = getEndpoints(championsConfig, latestVersion);\n  // Create a folder in /data if it doesn't exist for the latest version\n  if (!existsSync(`data/${latestVersion}`)) {\n    mkdirSync(`data/${latestVersion}`);\n  }\n  // Create the folder latest in /data if it doesn't exist\n  if (!existsSync(`data/latest`)) {\n    mkdirSync(`data/latest`);\n  }\n  await mergeChampions(endpoints, latestVersion);\n}\n\n// const main = async () => {\n//   try {\n//     await getChampions();\n//     info(\"Successfully merged champions.json\");\n//   } catch (error) {\n//     setFailed(error.message);\n//   }\n// };\n\n// // Only run main if running locally\n// if (process.env.GITHUB_ACTIONS !== \"true\") {\n//   main();\n// }\n","import sharp from \"sharp\";\nimport axios from \"axios\";\nimport { encode } from \"blurhash\";\n\nimport { blurHashToDataURL } from \"./blurhashDataURL.js\";\n\n/**\n * &gt;&gt;&gt; downloadImage(\"data/img/items/image.png\", \"http://www.example.com/image.png\")\n * @param {string} filename - The path of the file to be downloaded. Include the subfolder for champion or items\n * @param {string} url - The URL path to the image you want to download.\n * @returns {Promise<string>} Blurhash placeholder with a 4x4 size.\n */\nexport async function downloadImage(\n  filename: string,\n  url: string\n): Promise<string> {\n  if (!filename || !url) {\n    console.warn(\"No filename or url specified\");\n    return \"\";\n  }\n  let placeholder = \"\";\n\n  let axiosResponse = await axios\n    .get(url, {\n      responseType: \"arraybuffer\",\n      headers: {\n        \"Accept-Encoding\": \"identity\",\n      },\n    })\n    .catch((err) => console.error(err));\n\n  // Save the image as a file\n  if (axiosResponse) {\n    console.log(\"Saving image \" + filename);\n    await sharp(axiosResponse.data)\n      .toFile(filename)\n      .catch((err: any) => {\n        console.error(err);\n      });\n    // Create a placeholder\n    const { data, info } = await sharp(filename)\n      .raw()\n      .ensureAlpha()\n      .toBuffer({ resolveWithObject: true });\n\n    const clamped = new Uint8ClampedArray(data);\n    const blurhash = encode(clamped, info.width, info.height, 4, 4);\n    placeholder = blurhash;\n  }\n\n  return placeholder;\n}\n\n// test\n// eslint-disable-next-line no-unused-vars\nconst test = async () => {\n  let placeholder = \"\";\n  let blurhash = await downloadImage(\n    \"data/img/champions/Aatrox.png\",\n    \"https://ddragon.leagueoflegends.com/cdn/12.13.1/img/champion/Aatrox.png\"\n  );\n  console.log(\"Blurhash: \" + blurhash);\n  // Generate a 32x32 image from the blurhash\n  const base64 = blurHashToDataURL(blurhash, 32, 32);\n  if (base64) placeholder = base64;\n  console.log(\"Converted (base64): \" + placeholder);\n};\n\n// Run only if this file is called directly\n// if (!process.env.GITHUB_ACTIONS || process.env.GITHUB_ACTIONS === \"false\") {\n//   test();\n// }\n","import { decodeBlurHash } from \"fast-blurhash\";\n\nconst cache: Record<string, string> = {};\n\nexport function blurHashToDataURL(\n  hash: string | undefined,\n  width: number,\n  height: number\n): string | undefined {\n  if (!hash) return undefined;\n\n  const cachedBlurDataURL = cache[hash];\n\n  if (cachedBlurDataURL) {\n    return cachedBlurDataURL;\n  }\n\n  const pixels = decodeBlurHash(hash, width, height);\n  const dataURL = parsePixels(pixels, width, height);\n  cache[hash] = dataURL;\n  return dataURL;\n}\n\n// thanks to https://github.com/wheany/js-png-encoder\nfunction parsePixels(pixels: Uint8ClampedArray, width: number, height: number) {\n  const pixelsString = [...pixels]\n    .map((byte) => String.fromCharCode(byte))\n    .join(\"\");\n  const pngString = generatePng(width, height, pixelsString);\n  const dataURL =\n    typeof Buffer !== \"undefined\"\n      ? Buffer.from(getPngArray(pngString)).toString(\"base64\")\n      : btoa(pngString);\n  return \"data:image/png;base64,\" + dataURL;\n}\n\nfunction getPngArray(pngString: string) {\n  const pngArray = new Uint8Array(pngString.length);\n  for (let i = 0; i < pngString.length; i++) {\n    pngArray[i] = pngString.charCodeAt(i);\n  }\n  return pngArray;\n}\n\nfunction generatePng(width: number, height: number, rgbaString: string) {\n  const DEFLATE_METHOD = String.fromCharCode(0x78, 0x01);\n  const CRC_TABLE: number[] = [];\n  const SIGNATURE = String.fromCharCode(137, 80, 78, 71, 13, 10, 26, 10);\n  const NO_FILTER = String.fromCharCode(0);\n\n  let n, c, k;\n\n  // make crc table\n  for (n = 0; n < 256; n++) {\n    c = n;\n    for (k = 0; k < 8; k++) {\n      if (c & 1) {\n        c = 0xedb88320 ^ (c >>> 1);\n      } else {\n        c = c >>> 1;\n      }\n    }\n    CRC_TABLE[n] = c;\n  }\n\n  // Functions\n  function inflateStore(data: string) {\n    const MAX_STORE_LENGTH = 65535;\n    let storeBuffer = \"\";\n    let remaining;\n    let blockType;\n\n    for (let i = 0; i < data.length; i += MAX_STORE_LENGTH) {\n      remaining = data.length - i;\n      blockType = \"\";\n\n      if (remaining <= MAX_STORE_LENGTH) {\n        blockType = String.fromCharCode(0x01);\n      } else {\n        remaining = MAX_STORE_LENGTH;\n        blockType = String.fromCharCode(0x00);\n      }\n      // little-endian\n      storeBuffer +=\n        blockType +\n        String.fromCharCode(remaining & 0xff, (remaining & 0xff00) >>> 8);\n      storeBuffer += String.fromCharCode(\n        ~remaining & 0xff,\n        (~remaining & 0xff00) >>> 8\n      );\n\n      storeBuffer += data.substring(i, i + remaining);\n    }\n\n    return storeBuffer;\n  }\n\n  function adler32(data: string) {\n    let MOD_ADLER = 65521;\n    let a = 1;\n    let b = 0;\n\n    for (let i = 0; i < data.length; i++) {\n      a = (a + data.charCodeAt(i)) % MOD_ADLER;\n      b = (b + a) % MOD_ADLER;\n    }\n\n    return (b << 16) | a;\n  }\n\n  function updateCrc(crc: number, buf: string) {\n    let c = crc;\n    let b: number;\n\n    for (let n = 0; n < buf.length; n++) {\n      b = buf.charCodeAt(n);\n      c = CRC_TABLE[(c ^ b) & 0xff] ^ (c >>> 8);\n    }\n    return c;\n  }\n\n  function crc(buf: string) {\n    return updateCrc(0xffffffff, buf) ^ 0xffffffff;\n  }\n\n  function dwordAsString(dword: number) {\n    return String.fromCharCode(\n      (dword & 0xff000000) >>> 24,\n      (dword & 0x00ff0000) >>> 16,\n      (dword & 0x0000ff00) >>> 8,\n      dword & 0x000000ff\n    );\n  }\n\n  function createChunk(length: number, type: string, data: string) {\n    const CRC = crc(type + data);\n\n    return dwordAsString(length) + type + data + dwordAsString(CRC);\n  }\n\n  function createIHDR(width: number, height: number) {\n    const IHDRdata =\n      dwordAsString(width) +\n      dwordAsString(height) +\n      // bit depth\n      String.fromCharCode(8) +\n      // color type: 6=truecolor with alpha\n      String.fromCharCode(6) +\n      // compression method: 0=deflate, only allowed value\n      String.fromCharCode(0) +\n      // filtering: 0=adaptive, only allowed value\n      String.fromCharCode(0) +\n      // interlacing: 0=none\n      String.fromCharCode(0);\n\n    return createChunk(13, \"IHDR\", IHDRdata);\n  }\n\n  // PNG creations\n\n  const IEND = createChunk(0, \"IEND\", \"\");\n  const IHDR = createIHDR(width, height);\n\n  let scanlines = \"\";\n  let scanline;\n\n  for (let y = 0; y < rgbaString.length; y += width * 4) {\n    scanline = NO_FILTER;\n    if (Array.isArray(rgbaString)) {\n      for (let x = 0; x < width * 4; x++) {\n        scanline += String.fromCharCode(rgbaString[y + x] & 0xff);\n      }\n    } else {\n      scanline += rgbaString.substr(y, width * 4);\n    }\n    scanlines += scanline;\n  }\n\n  const compressedScanlines =\n    DEFLATE_METHOD +\n    inflateStore(scanlines) +\n    dwordAsString(adler32(scanlines));\n  const IDAT = createChunk(\n    compressedScanlines.length,\n    \"IDAT\",\n    compressedScanlines\n  );\n\n  const pngString = SIGNATURE + IHDR + IDAT + IEND;\n  return pngString;\n}\n","import axios, { AxiosRequestConfig } from \"axios\";\n\n/**\n * Gets the latest version of DDragon from https://ddragon.leagueoflegends.com/api/versions.json\n * @returns {string} The latest version of the game.\n */\nexport const getLatestVersion = async () => {\n  const versionsEndpoints = [\n    {\n      method: \"get\",\n      url: \"https://ddragon.leagueoflegends.com/api/versions.json\",\n      name: \"DDragon (Riot)\",\n    },\n    {\n      method: \"get\",\n      url: \"https://utils.iesdev.com/static/json/lol/riot/versions\",\n      name: \"Blitz\",\n    },\n  ];\n  // Try to get the latest version from the first endpoint, if it fails, try the second endpoint\n  for (const endpoint of versionsEndpoints) {\n    try {\n      console.log(`Getting latest version from ${endpoint.name}...`);\n      const config: AxiosRequestConfig = {\n        method: endpoint.method,\n        url: endpoint.url,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Accept-Encoding\": \"identity\",\n        },\n      };\n      const response = await axios(config)\n        .then((response) => {\n          return response.data[0];\n        })\n        .catch((error) => {\n          throw error;\n        });\n      console.log(`Got latest version from ${endpoint.name}`);\n      return response;\n    } catch (error) {\n      console.error(`Failed to get latest version from ${endpoint.name}`);\n      console.error(error);\n    }\n  }\n  // If both endpoints fail, throw an error\n  throw new Error(\"Failed to get latest version\");\n};\n","[\n  {\n    \"name\": \"MerakiAnalytics\",\n    \"baseUrl\": \"http://cdn.merakianalytics.com/riot/lol/resources/latest\",\n    \"resource\": \"/en-US/champions.json\",\n    \"needsLatest\": false\n  }\n]\n","export const queryString = {\n  query: `query ChampionsInfo{\n      info: queryChampionsV1Contents(top: 0){\n          flatData{\n              name\n              slug\n              antiDive\n              burst\n              control\n              damage\n              damageType\n              divePotential\n              engage\n              gankDenial\n              gankReliability\n              gankTurnAround\n              kite\n              mobility\n              pick\n              poke\n              preControl\n              preDamage\n              preMobility\n              preToughness\n              postControl\n              postDamage\n              postMobility\n              postToughness\n              skirmish\n              split\n              sustained\n              tags\n              toughness\n              utility\n              waveclear\n              powerSpikes{\n                  early\n                  mid\n                  late\n                }\n              key: riotId\n              riotSlug\n              difficultyLevel\n              difficulty{\n                  flatData{\n                      slug\n                      name\n                      level\n                    }\n                }\n            }\n        }\n    }`,\n  variables: {},\n};\n","import { EndpointSpec } from \"../types/endpoints.js\";\nimport { Endpoint } from \"../types/global.js\";\nimport { existsSync, mkdirSync, readFileSync } from \"fs\";\n\nexport const getEndpointUrl = (endpoint: EndpointSpec, version: string) => {\n  if (!version) {\n    throw new Error(\"Version is undefined\");\n  }\n  return `${endpoint.baseUrl}${endpoint.needsLatest ? version : \"\"}${\n    endpoint.resource\n  }`;\n};\n\nexport const getEndpoints = (\n  endpoints: EndpointSpec[],\n  version: string\n): Endpoint[] => {\n  if (!version) {\n    throw new Error(\"Version is undefined\");\n  }\n  return endpoints.map((endpoint) => ({\n    name: endpoint.name,\n    url: getEndpointUrl(endpoint, version),\n  }));\n};\n\nexport const readJsonFile = (path: string) => {\n  return JSON.parse(readFileSync(path, \"utf8\"));\n};\n\nexport const createDirectory = (path: string, recursive: boolean = false) => {\n  if (!existsSync(path)) {\n    mkdirSync(path, { recursive });\n  }\n};\n","import axios from \"axios\";\nimport _ from \"lodash\";\nimport { getLatestVersion } from \"~/src/utils/getLatestVersion.js\";\nimport { sanitizeText, toPascalCase } from \"~/src/utils/sanitizeText.js\";\nimport {\n  getBlitzItemData,\n  getCommunityDragonItemData,\n  getMerakiItemData,\n  writeItems,\n} from \"~/src/utils/itemUtils.js\";\nimport { defaultValues } from \"~/src/utils/constants.js\";\nimport { downloadImage } from \"~/src/utils/downloadImages.js\";\n// Load env variables from .env file\nimport \"dotenv/config\";\nimport { Endpoint, EndpointItemData } from \"~/src/types/global.js\";\nimport { Item, ItemObject } from \"~/src/types/items.js\";\nimport itemsConfig from \"~/endpoints/items.json\";\nimport { createDirectory, getEndpoints } from \"~/src/utils/endpointUtils.js\";\nimport { extractTags } from \"../utils/extractTags\";\nimport { extractAllTemplates } from \"../utils/wikiTemplateHelpers\";\nimport { writeFileSync } from \"fs\";\n\nconst axiosOptions = {\n  headers: {\n    \"Accept-Encoding\": \"identity\",\n  },\n};\n\nconst fetchItems = async (endpoint: Endpoint): Promise<EndpointItemData> => {\n  console.log(`Fetching ${endpoint.name} items...`);\n  try {\n    const response = await axios.get(endpoint.url, axiosOptions);\n    console.log(`Fetched ${endpoint.name} items`);\n    return { name: endpoint.name, data: response.data };\n  } catch (error) {\n    throw new Error(`Error fetching ${endpoint.name} items: ${error}`);\n  }\n};\n\n// Batch download item icons to avoid rate limiting\nconst batchDownloadItemIcons = async (\n  items: ItemObject,\n  allowedTags: string[],\n  pascalCaseTags: string[]\n) => {\n  let itemIconPromises: Promise<void>[] = [];\n  Object.entries(items).forEach(([key, item]: [string, Item]) => {\n    if (item.description) {\n      items[key].description = sanitizeText(item, allowedTags, pascalCaseTags);\n    }\n    if (item.icon) {\n      let iconName = item.icon.split(\"/\").pop()?.split(\".\")[0] ?? \"\";\n      if (iconName && iconName.length > 0) {\n        let promise = downloadImage(\n          `data/img/items/${iconName}.webp`,\n          item.icon\n        )\n          .then((placeholder: string) => {\n            items[key].icon = `data/img/items/${iconName}.webp`;\n            items[key].placeholder = placeholder;\n            console.log(\"Downloaded icon for item \" + items[key].name);\n          })\n          .catch((error) => {\n            console.error(\n              `Error downloading icon for item ${item.name}: ${error}`\n            );\n          });\n        itemIconPromises.push(promise);\n      }\n    }\n  });\n\n  await Promise.all(itemIconPromises);\n};\n\n// Main function to merge the items from the different endpoints\nconst mergeItems = async (\n  endpoints: Endpoint[],\n  latestVersion: string\n): Promise<void> => {\n  let fetchedItemData: EndpointItemData[] = [];\n  let itemPromises: Promise<void>[] = [];\n\n  // Fetch all the items from the different endpoints\n  endpoints.forEach((endpoint) => {\n    let promise = fetchItems(endpoint)\n      .then((data) => {\n        fetchedItemData.push(data);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    itemPromises.push(promise);\n  });\n\n  await Promise.all(itemPromises);\n\n  // Merge the items from the different endpoints\n  let mergedItems: ItemObject = {};\n  let cdItems;\n  let allowedTags: string[] = [];\n\n  // Get initial items\n  cdItems = getCommunityDragonItemData(\n    fetchedItemData.find(\n      (data) => data.name === \"CommunityDragon\"\n    ) as EndpointItemData\n  );\n  allowedTags = extractTags(cdItems);\n  Object.assign(mergedItems, cdItems);\n\n  // Get blitz items (for maps data)\n  mergedItems = getBlitzItemData(\n    fetchedItemData.find((data) => data.name === \"Blitz\") as EndpointItemData,\n    mergedItems\n  );\n\n  // Merge initial items with Meraki items\n  mergedItems = getMerakiItemData(\n    fetchedItemData.find(\n      (data) => data.name === \"MerakiAnalytics\"\n    ) as EndpointItemData,\n    mergedItems\n  );\n\n  // Merge the default values with every item in mergedItems\n  mergedItems = _.mapValues(mergedItems, (item) => {\n    return _.defaults(item, defaultValues);\n  });\n  console.log(`Merged ${Object.keys(mergedItems).length} items`);\n\n  // Get the wiki templates from the description of the items\n  const wikiTemplates = extractAllTemplates(mergedItems);\n  console.log(`Extracted ${wikiTemplates.length} wiki templates`);\n  writeFileSync(\"data/wikiTemplates.json\", JSON.stringify(wikiTemplates));\n\n  // Create a separate list of tags converted to PascalCase\n  const pascalCaseTags = allowedTags.map((tag) => toPascalCase(tag));\n\n  // Create folders\n  createDirectory(\"data/img/champions\", true);\n  createDirectory(\"data/img/items\", true);\n\n  // Download item icons and placeholders\n  let batchSize = 50; // Download 50 item icons at a time\n  let batchedItemIcons = _.chunk(Object.entries(mergedItems), batchSize);\n  for (let batch of batchedItemIcons) {\n    console.info(\"Downloading item icons batch...\");\n    await batchDownloadItemIcons(\n      _.fromPairs(batch),\n      allowedTags,\n      pascalCaseTags\n    );\n  }\n\n  console.info(\"Writing items data to file...\");\n  writeItems(latestVersion, mergedItems);\n};\n\n// Get the items.json file from the different endpoints specified in items.json\n// Return the custom merged items.json file\nexport const getItems = async () => {\n  const latestVersion = await getLatestVersion();\n  let endpoints = getEndpoints(itemsConfig, latestVersion);\n  console.log(\"Endpoints: \", endpoints);\n\n  // Create the data directory if it doesn't exist for the current patch\n  createDirectory(`data/${latestVersion}`);\n  createDirectory(\"data/latest\");\n  await mergeItems(endpoints, latestVersion);\n};\n\n// const test = async () => {\n//   try {\n//     await getItems();\n//     console.log(\"Successfully merged items.json\");\n//   } catch (error: any) {\n//     console.error(\"Error: \" + error.message);\n//   }\n// };\n\n// // Only run test if running locally\n// if (!process.env.GITHUB_ACTIONS || process.env.GITHUB_ACTIONS === \"false\") {\n//   test();\n// }\n","import _ from \"lodash\";\nimport DOMPurify from \"isomorphic-dompurify\";\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\nimport { Item } from \"~/src/types/items.js\";\n\n/**\n * Function to convert a string from camel case or snake case to pascal case\n * @param {string} str - The string to convert to PascalCase.\n */\nexport const toPascalCase = (str: string) => {\n  return str\n    .split(\"_\")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\"\");\n};\n\n/**\n * It takes a string, sanitizes it, parses it, and returns a string.\n * @param {Item} item - {\n * @returns {string} A string of XML.\n */\nexport function sanitizeText(\n  item: Item,\n  allowedTags: string[],\n  pascalCaseTags: string[]\n): string {\n  if (!item) return \"\";\n  let text = item.description;\n  if (!text) {\n    console.warn(`Item ${item.name} has no description`);\n    return \"\";\n  }\n\n  // Sanitize text with dompurify\n  let sanitizedText = DOMPurify.sanitize(text, {\n    ALLOWED_TAGS: allowedTags,\n    FORBID_TAGS: [\"br\", \"attention\", \"{{\", \"{%\", \"{\", \"}\", \"%}\", \"}}\"],\n    SAFE_FOR_TEMPLATES: false,\n    ALLOW_DATA_ATTR: true,\n    KEEP_CONTENT: true, // Preserve content between tags\n  });\n\n  // Replace all lowercase tags with PascalCase tags\n  pascalCaseTags.forEach((tag) => {\n    sanitizedText = sanitizedText.replace(\n      new RegExp(`<${tag.toLowerCase()}>`, \"g\"),\n      `<${tag}>`\n    );\n    sanitizedText = sanitizedText.replace(\n      new RegExp(`</${tag.toLowerCase()}>`, \"g\"),\n      `</${tag}>`\n    );\n  });\n\n  // Parse with fast-xml-parser\n  const parser = new XMLParser({\n    preserveOrder: true,\n  });\n  const xml = parser.parse(sanitizedText);\n\n  // Remove stats from the xml object\n  if (xml.mainText?.stats) {\n    for (let key in xml.mainText.stats) {\n      delete xml.mainText.stats[key];\n    }\n  }\n\n  // Convert xml object to XML string\n  const builder = new XMLBuilder({\n    preserveOrder: true,\n  });\n  let xmlString = builder.build(xml);\n\n  // Add stats between <Stats> tag and </Stats> tag\n  xmlString = parseStats(xmlString, item);\n  // Combine Active tags\n  xmlString = parseActives(xmlString);\n\n  // Replace in xmlString:\n  // Add a whitespace (' ') before a less than character ('<') if the preceding character is a letter (a-z, A-Z) or a colon (':')\n  const lessThanRegex = /([a-zA-Z,:])</g;\n  xmlString = xmlString.replace(lessThanRegex, \"$1 <\");\n\n  return xmlString;\n}\n\n/**\n * Takes an XML string and an item object, and replaces the string with a JSX element\n * @param {string} xmlString - The string of the xml file\n * @param {Item} item - The item object that contains the stats\n * @returns {string} The xmlString is being returned with the stats of the item.\n * @example\n * Returns: <Stats><Stat name=\"Attack Speed\">1.5</Stat></Stats>\n */\nexport function parseStats(xmlString: string, item: Item): string {\n  const statsRegex = /<Stats>(.*?)<\\/Stats>/g;\n  const statsMatch = xmlString.match(statsRegex);\n  if (statsMatch) {\n    const statsTag = statsMatch[0];\n    let statsString = \"\";\n\n    // Create the stats string with the stats of the item\n    if (item.stats) {\n      Object.entries(item.stats).forEach(([keyItem, value]) => {\n        Object.entries(value).forEach(([key2, value2]) => {\n          let statName = toPascalCase(key2) + toPascalCase(keyItem);\n          statsString += `<Stat name=\"${statName}\">${value2}${\n            key2.includes(\"percent\") ? \"%\" : \"\"\n          }</Stat>`;\n        });\n      });\n    }\n\n    const statText = `<Stats>${statsString}</Stats>`;\n    xmlString = _.replace(xmlString, statsTag, statText);\n  }\n  return xmlString;\n}\n\n/** Combine all two adjacent Active tags when the first one is \"Active -\"\n * @param {string} xmlString - The string of the xml file\n * @returns {string} Parsed string\n * @example\n * Input: <Active>Active -</Active><Active>Lorem ipsum</Active>\n * Result:  <Active>Active - Lorem ipsum</Active>\n */\nexport function parseActives(xmlString: string): string {\n  const activeRegex = /<Active>(.*?)<\\/Active>/g;\n  const activeMatch = xmlString.match(activeRegex);\n  let skipNext = false;\n  if (activeMatch) {\n    // Loop through each match\n    for (const match of activeMatch) {\n      // If skipNext is set to true, skip the next match\n      if (skipNext === true) {\n        skipNext = false;\n        // Delete the match from the xmlString\n        xmlString = _.replace(xmlString, match, \"\");\n        continue;\n      }\n      // Get the content of the match\n      const tagContent = match.replace(/<\\/?Active>/g, \"\");\n      // Check if the content is \"Active -\"\n      if (tagContent === \"Active -\") {\n        // Replace the match with the \"Active - \" and the content of the next match\n        const nextTagContent = activeMatch[activeMatch.indexOf(match) + 1]\n          .replace(/<\\/?Active>/g, \"\")\n          .trim();\n\n        xmlString = _.replace(\n          xmlString,\n          match,\n          `<Active>Active - ${nextTagContent}</Active>`\n        );\n        // Skip the next match\n        skipNext = true;\n      }\n    }\n  }\n  return xmlString;\n}\n","import path from \"path\";\nimport fs from \"fs\";\nimport _ from \"lodash\";\nimport { EndpointItemData } from \"~/src/types/global.js\";\nimport {\n  BlitzData,\n  BlitzItem,\n  BlitzRoot,\n  ChampionClass,\n  CommunityDragonItem,\n  MerakiItem,\n  MerakiItemObject,\n  MerakiStats,\n  MerakiTag,\n  Passive,\n} from \"~/src/types/items.js\";\nimport camelcaseKeys from \"camelcase-keys\";\nimport { merakiItemSchema } from \"../schemas/meraki-item-zod-schema\";\n\n// Function to convert a string from snake case to camel case\nexport function snakeToCamel(str: string) {\n  return str.replace(/(_\\w)/g, (m) => m[1].toUpperCase());\n}\n\n// This code writes the merged items.json file in the latestVersion folder \"./data/\" + latestVersion + \"/items.json\";\nexport function writeItems(latestVersion: string, mergedItems: {}) {\n  let rootPath = \"data/\";\n  let latestVersionPath = path.join(rootPath, latestVersion, \"/items.json\");\n  latestVersionPath = path.normalize(latestVersionPath);\n  fs.writeFileSync(latestVersionPath, JSON.stringify(mergedItems));\n  // Also save a copy in the latest folder\n  fs.writeFileSync(`data/latest/items.json`, JSON.stringify(mergedItems));\n}\n\n// Filter passive stats to remove empty values or zero values\nfunction filterPassives(passives: Passive[]): Passive[] {\n  return passives.map((passive) => {\n    let filteredStats = filterStats(passive.stats);\n    if (filteredStats) {\n      passive.stats = filteredStats;\n    }\n    return passive;\n  });\n}\n\n// Filter stats to remove empty values or zero values\nfunction filterStats(stats: MerakiStats): MerakiStats {\n  return _.mapValues(stats, (value) => {\n    if (value) {\n      // Remove empty values from the stats object\n      return _.pickBy(value, (value) => {\n        return value !== 0;\n      });\n    }\n  }) as MerakiStats;\n}\n\n// Returns the champion classes of the item. (e.g. \"Fighter\", \"Tank\")\nfunction getChampionClasses(itemValues: MerakiItem) {\n  let classes = _.get(itemValues, \"shop.tags\");\n  if (classes.length > 0) {\n    // Filter class names that are defined in the ChampionClass enum\n    classes = _.filter(classes, (className: MerakiTag | ChampionClass) => {\n      return _.includes(Object.values(ChampionClass), className);\n    });\n  }\n  return classes;\n}\n\nexport function getCommunityDragonItemData(endpointData: EndpointItemData): {\n  [x: string]: CommunityDragonItem;\n} {\n  let { data } = endpointData as { data: CommunityDragonItem[] };\n\n  data.map((item) => {\n    // Strip text after Icons2d/ from the icon path\n    let CDragonIconPath = item.iconPath.split(\"Icons2D/\")[1].toLowerCase();\n    // Set icon path to the community dragon icon path\n    item.icon =\n      \"https://raw.communitydragon.org/latest/game/assets/items/icons2d/\" +\n      CDragonIconPath;\n  });\n\n  // Convert the data object from an array to an object with the id as the key\n  let mergedItems = _.keyBy(data, \"id\");\n\n  // Save mergedItems to a file for debugging\n  fs.writeFileSync(\"data/mergedItems.json\", JSON.stringify(mergedItems));\n\n  return mergedItems;\n}\n\nexport function getMerakiItemData(\n  endpointData: EndpointItemData,\n  mergedItems: { [x: string]: any }\n) {\n  let { data } = endpointData as { data: MerakiItemObject };\n  // Remove the mythic property from the passives\n  // Object.entries(data).forEach(([key, item]) => {\n  //   item.passives.forEach((passive) => {\n  //     delete passive.mythic;\n  //   });\n  // });\n\n  let merakiItemData: MerakiItemObject = camelcaseKeys(data, { deep: true });\n\n  // Check schema\n  Object.entries(merakiItemData).forEach(([key, item]) => {\n    try {\n      merakiItemSchema.parse(item);\n    } catch (error) {\n      throw new Error(\n        `Meraki item with key ${key} does not match the schema: ${error}`\n      );\n    }\n  });\n  console.log(\"Meraki schema check complete\");\n\n  // Save meraki data to a file for debugging\n  fs.writeFileSync(\"data/meraki.json\", JSON.stringify(merakiItemData));\n\n  const requiredKeysMeraki: (keyof MerakiItem)[] = [\n    \"iconOverlay\",\n    \"nicknames\",\n    \"requiredChampion\",\n    \"simpleDescription\",\n    \"stats\",\n    \"passives\",\n    \"active\",\n  ];\n  // Loop through each item in the MerakiAnalytics endpoint\n  Object.entries(merakiItemData).forEach(([itemKey, itemValues]) => {\n    let filteredItem = _.pick(itemValues, requiredKeysMeraki);\n    // Get an array of champion classes from nested object property\n    let classes = getChampionClasses(itemValues);\n    // Remove empty keys from stats to reduce the size of the json file\n    let stats = _.get(itemValues, \"stats\");\n    if (stats) {\n      let newStats = filterStats(stats);\n      if (newStats) {\n        data[itemKey].stats = newStats;\n        filteredItem.stats = newStats;\n      }\n    }\n\n    // Remove empty passives and active nested values\n    let passives = _.get(itemValues, \"passives\");\n    if (passives && passives.length > 0) {\n      // Filter passive stats to remove empty values\n      let newPassives = filterPassives(passives);\n      if (newPassives) {\n        data[itemKey].passives = newPassives;\n        filteredItem.passives = newPassives;\n      }\n    }\n\n    // Append the filteredItem and the classes to the mergedItems in the corresponding key\n    mergedItems[itemKey] = {\n      ...mergedItems[itemKey],\n      ...filteredItem,\n      classes: classes,\n    };\n  });\n\n  return mergedItems;\n}\n\nexport function getBlitzItemData(\n  endpoint: EndpointItemData,\n  mergedItems: { [x: string]: any }\n) {\n  let { data } = endpoint.data as BlitzRoot;\n\n  // Filter the blitz data to only get the required keys\n  Object.entries(data).forEach(([key, itemData]) => {\n    let maps = itemData.maps?.map(Number) ?? [];\n    // Add the maps to the mergedItems in the corresponding key\n    mergedItems[key] = {\n      ...mergedItems[key],\n      maps: maps,\n    };\n  });\n\n  // Make a list of all valid item ids from the blitz data\n  // That is, all items that have in maps 11 (SR) or 12 (HA)\n  const validMapIds = [11, 12];\n  let validItemIds: string[] = [];\n  Object.entries(data).forEach(([key, itemData]) => {\n    if (itemData.maps.some((mapId) => validMapIds.includes(Number(mapId)))) {\n      validItemIds.push(key);\n    }\n  });\n\n  // Filter the mergedItems to only include the valid item ids\n  let filteredItems: { [x: string]: any } = {};\n  validItemIds.forEach((itemId) => {\n    filteredItems[itemId] = mergedItems[itemId];\n  });\n\n  return filteredItems;\n}\n","export type ItemObject = Record<string, Item>;\n\nexport interface Item {\n  id: number;\n  name: string;\n  description: null | string;\n  maps: number[];\n  gold: Gold;\n  icon: string;\n  iconOverlay: boolean;\n  nicknames: string[];\n  requiredChampion: RequiredChampion;\n  simpleDescription: null | string;\n  tier: number;\n  stats: Stats;\n  classes: ChampionClass[];\n  categories: Category[];\n  inStore: boolean;\n  maxStacks: number;\n  from: number[];\n  to: number[];\n  placeholder: string;\n  type: string[];\n  passives?: Passive[];\n  active: Passive[] | boolean;\n  requiredAlly?: string;\n  requiredBuffCurrencyName?: string;\n  requiredBuffCurrencyCost?: number;\n  specialRecipe?: number;\n  isEnchantment?: boolean;\n  price?: number;\n  priceTotal?: number;\n  iconPath?: string;\n}\n\nexport enum Category {\n  AbilityHaste = \"AbilityHaste\",\n  Active = \"Active\",\n  Armor = \"Armor\",\n  ArmorPenetration = \"ArmorPenetration\",\n  AttackSpeed = \"AttackSpeed\",\n  Aura = \"Aura\",\n  Boots = \"Boots\",\n  Consumable = \"Consumable\",\n  CooldownReduction = \"CooldownReduction\",\n  CriticalStrike = \"CriticalStrike\",\n  Damage = \"Damage\",\n  GoldPer = \"GoldPer\",\n  Health = \"Health\",\n  HealthRegen = \"HealthRegen\",\n  Jungle = \"Jungle\",\n  Lane = \"Lane\",\n  LifeSteal = \"LifeSteal\",\n  MagicPenetration = \"MagicPenetration\",\n  MagicResist = \"MagicResist\",\n  Mana = \"Mana\",\n  ManaRegen = \"ManaRegen\",\n  NonbootsMovement = \"NonbootsMovement\",\n  OnHit = \"OnHit\",\n  Slow = \"Slow\",\n  SpellBlock = \"SpellBlock\",\n  SpellDamage = \"SpellDamage\",\n  SpellVamp = \"SpellVamp\",\n  Stealth = \"Stealth\",\n  Tenacity = \"Tenacity\",\n  Trinket = \"Trinket\",\n  Vision = \"Vision\",\n}\n\nexport interface Gold {\n  base: number;\n  purchasable: boolean;\n  total: number;\n  sell: number;\n}\n\nexport enum RequiredChampion {\n  Empty = \"\",\n  FiddleSticks = \"FiddleSticks\",\n  Gangplank = \"Gangplank\",\n}\n\nexport interface Stats {\n  abilityPower?: FlatNumber;\n  armor?: FlatNumber;\n  armorPenetration?: PercentNumber;\n  attackDamage?: FlatNumber;\n  attackSpeed?: FlatNumber;\n  cooldownReduction?: CooldownReduction;\n  criticalStrikeChance?: PercentNumber;\n  healAndShieldPower?: FlatNumber;\n  health?: FlatNumber;\n  healthRegen?: MixedNumber;\n  lethality?: FlatNumber;\n  lifesteal?: PercentNumber;\n  magicPenetration?: MixedNumber;\n  magicResistance?: FlatNumber;\n  mana?: FlatNumber;\n  manaRegen?: PercentNumber;\n  movespeed?: MixedNumber;\n  abilityHaste?: FlatNumber;\n  omnivamp?: PercentNumber;\n  tenacity?: FlatNumber;\n  goldPer10?: FlatNumber;\n}\n\nexport interface FlatNumber {\n  flat?: number;\n}\n\nexport interface PercentNumber {\n  percent?: number;\n}\n\nexport interface CooldownReduction {}\n\nexport interface MixedNumber {\n  percent?: number;\n  flat?: number;\n}\n\n// CommunityDragon types\n\nexport type CommunityDragonItemObject = Record<string, CommunityDragonItem>;\n\nexport interface CommunityDragonItem {\n  id: number;\n  name: string;\n  description: string;\n  active: boolean;\n  inStore: boolean;\n  from: number[];\n  to: number[];\n  categories: Category[];\n  maxStacks: number;\n  requiredChampion: RequiredChampion;\n  requiredAlly: string;\n  requiredBuffCurrencyName: string;\n  requiredBuffCurrencyCost: number;\n  specialRecipe: number;\n  isEnchantment: boolean;\n  price: number;\n  priceTotal: number;\n  iconPath: string;\n  // Custom properties\n  icon: string;\n}\n\n// Meraki types\nexport type MerakiItemObject = Record<string, MerakiItem>;\n\nexport enum Rank {\n  Basic = \"BASIC\",\n  Boots = \"BOOTS\",\n  Consumable = \"CONSUMABLE\",\n  Distributed = \"DISTRIBUTED\",\n  Epic = \"EPIC\",\n  Legendary = \"LEGENDARY\",\n  Minion = \"MINION\",\n  Potion = \"POTION\",\n  Starter = \"STARTER\",\n  Trinket = \"TRINKET\",\n  Turret = \"TURRET\",\n}\n\nexport interface MerakiItem {\n  name: string;\n  id: number;\n  tier: number;\n  rank: Rank[];\n  buildsFrom?: number[];\n  buildsInto?: number[];\n  specialRecipe?: number;\n  noEffects?: boolean;\n  removed: boolean;\n  requiredChampion?: string;\n  requiredAlly?: string;\n  icon: string;\n  simpleDescription?: null | string;\n  nicknames: string[];\n  passives: Passive[];\n  active: Active[];\n  stats: MerakiStats;\n  shop: Shop;\n  iconOverlay: boolean;\n}\n\nexport interface Active {\n  unique: boolean;\n  name: null | string;\n  effects: string;\n  range: number | null;\n  cooldown: null;\n}\n\nexport interface Passive {\n  unique: boolean;\n  name: null | string;\n  effects: null | string;\n  cooldown: null | string;\n  range: number | null;\n  stats: MerakiStats;\n}\n\nexport interface Shop {\n  prices: Prices;\n  purchasable: boolean;\n  tags: MerakiTag[];\n}\n\nexport interface Prices {\n  total: number;\n  combined: number;\n  sell: number;\n}\n\nexport enum MerakiTag {\n  AbilityPower = \"ABILITY_POWER\",\n  ArmorPen = \"ARMOR_PEN\",\n  Assassin = \"ASSASSIN\",\n  AttackDamage = \"ATTACK_DAMAGE\",\n  AttackSpeed = \"ATTACK_SPEED\",\n  Fighter = \"FIGHTER\",\n  HealthAndReg = \"HEALTH_AND_REG\",\n  LifestealVamp = \"LIFESTEAL_VAMP\",\n  Mage = \"MAGE\",\n  MagicPen = \"MAGIC_PEN\",\n  ManaAndReg = \"MANA_AND_REG\",\n  Marksman = \"MARKSMAN\",\n  Movement = \"MOVEMENT\",\n  OnhitEffects = \"ONHIT_EFFECTS\",\n  Support = \"SUPPORT\",\n  Tank = \"TANK\",\n}\n\nexport enum ChampionClass {\n  Assassin = \"ASSASSIN\",\n  Fighter = \"FIGHTER\",\n  Mage = \"MAGE\",\n  Marksman = \"MARKSMAN\",\n  Support = \"SUPPORT\",\n  Tank = \"TANK\",\n}\n\nexport interface MerakiStats {\n  abilityPower?: ItemStats;\n  armor: ItemStats;\n  armorPenetration?: ItemStats;\n  attackDamage?: ItemStats;\n  attackSpeed?: ItemStats;\n  cooldownReduction?: ItemStats;\n  criticalStrikeChance?: ItemStats;\n  goldPer10?: ItemStats;\n  healAndShieldPower?: ItemStats;\n  health: ItemStats;\n  healthRegen?: ItemStats;\n  lethality: ItemStats;\n  lifesteal: ItemStats;\n  magicPenetration?: ItemStats;\n  magicResistance?: ItemStats;\n  mana: ItemStats;\n  manaRegen?: ItemStats;\n  movespeed: ItemStats;\n  abilityHaste?: ItemStats;\n  omnivamp: ItemStats;\n  tenacity: ItemStats;\n  [x: string]: ItemStats | undefined;\n}\n\nexport interface ItemStats {\n  flat?: number;\n  percent?: number;\n  perLevel?: number;\n  percentPerLevel?: number;\n  percentBase?: number;\n  percentBonus?: number;\n}\n\n// Blitz types\nexport interface BlitzRoot {\n  type: string;\n  version: string;\n  basic: Basic;\n  data: BlitzData;\n  groups: Group[];\n  tree: Tree[];\n}\n\nexport interface Basic {\n  name: string;\n  rune: Rune;\n  gold: Gold;\n  group: string;\n  description: string;\n  colloq: string;\n  plaintext: string;\n  consumed: boolean;\n  stacks: number;\n  depth: number;\n  consumeOnFull: boolean;\n  from: any[];\n  into: any[];\n  specialRecipe: number;\n  inStore: boolean;\n  hideFromAll: boolean;\n  requiredChampion: string;\n  requiredAlly: string;\n  stats: { [key: string]: number };\n  tags: any[];\n  maps: { [key: string]: boolean };\n}\n\nexport interface Gold {\n  base: number;\n  total: number;\n  sell: number;\n  purchasable: boolean;\n}\n\nexport interface Rune {\n  isrune: boolean;\n  tier: number;\n  type: string;\n}\n\nexport type BlitzData = Record<string, BlitzItem>;\n\nexport interface BlitzItem {\n  id: number | string;\n  name: string;\n  description: string;\n  stats?: BlitzStats;\n  maps: number[];\n  gold: Gold;\n  into?: number[];\n  from?: number[];\n  depth?: number;\n  tier?: number;\n}\n\nexport interface BlitzStats {\n  FlatArmorMod?: number;\n  FlatCritChanceMod?: number;\n  FlatHPPoolMod?: number;\n  FlatHPRegenMod?: number;\n  FlatMagicDamageMod?: number;\n  FlatMovementSpeedMod?: number;\n  FlatMPPoolMod?: number;\n  FlatPhysicalDamageMod?: number;\n  FlatSpellBlockMod?: number;\n  PercentAttackSpeedMod?: number;\n  PercentLifeStealMod?: number;\n  PercentMovementSpeedMod?: number;\n}\n\nexport interface Group {\n  id: string;\n  MaxGroupOwnable: string;\n}\n\nexport interface Tree {\n  header: string;\n  tags: string[];\n}\n","import { z } from \"zod\";\n\nexport enum ItemRank {\n  Basic = \"BASIC\",\n  Boots = \"BOOTS\",\n  Consumable = \"CONSUMABLE\",\n  Distributed = \"DISTRIBUTED\",\n  Epic = \"EPIC\",\n  Legendary = \"LEGENDARY\",\n  Minion = \"MINION\",\n  Potion = \"POTION\",\n  Starter = \"STARTER\",\n  Trinket = \"TRINKET\",\n  Turret = \"TURRET\",\n}\n\nexport enum ItemTag {\n  AbilityPower = \"ABILITY_POWER\",\n  ArmorPen = \"ARMOR_PEN\",\n  Assassin = \"ASSASSIN\",\n  AttackDamage = \"ATTACK_DAMAGE\",\n  AttackSpeed = \"ATTACK_SPEED\",\n  Fighter = \"FIGHTER\",\n  HealthAndReg = \"HEALTH_AND_REG\",\n  LifestealVamp = \"LIFESTEAL_VAMP\",\n  Mage = \"MAGE\",\n  MagicPen = \"MAGIC_PEN\",\n  ManaAndReg = \"MANA_AND_REG\",\n  Marksman = \"MARKSMAN\",\n  Movement = \"MOVEMENT\",\n  OnhitEffects = \"ONHIT_EFFECTS\",\n  Support = \"SUPPORT\",\n  Tank = \"TANK\",\n}\n\nexport const activeSchema = z.object({\n  unique: z.boolean(),\n  name: z.string().nullable(),\n  effects: z.string(),\n  range: z.number().nullable(),\n  cooldown: z.null(),\n});\n\nexport const itemStatsSchema = z.object({\n  flat: z.number(),\n  percent: z.number(),\n  perLevel: z.number().optional(),\n  percentPerLevel: z.number().optional(),\n  percentBase: z.number().optional(),\n  percentBonus: z.number().optional(),\n});\n\nexport const rankSchema = z.nativeEnum(ItemRank);\n\nexport const pricesSchema = z.object({\n  total: z.number(),\n  combined: z.number(),\n  sell: z.number(),\n});\n\nexport const tagSchema = z.nativeEnum(ItemTag);\n\nexport const merakiItemStatsSchema = z.object({\n  abilityPower: itemStatsSchema.optional(),\n  armor: itemStatsSchema,\n  armorPenetration: itemStatsSchema.optional(),\n  attackDamage: itemStatsSchema.optional(),\n  attackSpeed: itemStatsSchema.optional(),\n  cooldownReduction: itemStatsSchema.optional(),\n  criticalStrikeChance: itemStatsSchema.optional(),\n  goldPer10: itemStatsSchema.optional(),\n  healAndShieldPower: itemStatsSchema.optional(),\n  health: itemStatsSchema,\n  healthRegen: itemStatsSchema.optional(),\n  lethality: itemStatsSchema,\n  lifesteal: itemStatsSchema,\n  magicPenetration: itemStatsSchema.optional(),\n  magicResistance: itemStatsSchema.optional(),\n  mana: itemStatsSchema,\n  manaRegen: itemStatsSchema.optional(),\n  movespeed: itemStatsSchema,\n  abilityHaste: itemStatsSchema.optional(),\n  omnivamp: itemStatsSchema,\n  tenacity: itemStatsSchema,\n});\n\nexport const shopSchema = z.object({\n  prices: pricesSchema,\n  purchasable: z.boolean(),\n  tags: z.array(tagSchema),\n});\n\nexport const passiveSchema = z.object({\n  unique: z.boolean(),\n  mythic: z.boolean().optional(),\n  name: z.string().nullable(),\n  effects: z.string(),\n  range: z.number().nullable(),\n  cooldown: z.string().nullable(),\n  stats: merakiItemStatsSchema,\n});\n\nexport const merakiItemSchema = z.object({\n  name: z.string(),\n  id: z.number(),\n  tier: z.number(),\n  rank: z.array(rankSchema),\n  buildsFrom: z.array(z.number()).optional(),\n  buildsInto: z.array(z.number()).optional(),\n  specialRecipe: z.number().optional(),\n  noEffects: z.boolean().optional(),\n  removed: z.boolean(),\n  requiredChampion: z.string().optional(),\n  requiredAlly: z.string().optional(),\n  icon: z.string(),\n  simpleDescription: z.string().optional().nullable(),\n  nicknames: z.array(z.string()),\n  passives: z.array(passiveSchema),\n  active: z.array(activeSchema),\n  stats: merakiItemStatsSchema,\n  shop: shopSchema,\n  iconOverlay: z.boolean(),\n});\n","import { Item, RequiredChampion } from \"../types/items\";\n\n// Set default values for required keys\nexport const defaultValues: Item = {\n  categories: [],\n  classes: [],\n  description: null,\n  from: [],\n  gold: { base: 0, purchasable: false, total: 0, sell: 0 },\n  icon: \"\",\n  iconOverlay: false,\n  id: -1,\n  inStore: false,\n  to: [],\n  maps: [],\n  maxStacks: 0,\n  name: \"\",\n  nicknames: [],\n  placeholder: \"\",\n  requiredChampion: RequiredChampion.Empty,\n  simpleDescription: \"\",\n  stats: {},\n  tier: 0,\n  type: [],\n  active: false,\n};\n","[\n  {\n    \"name\": \"MerakiAnalytics\",\n    \"baseUrl\": \"https://cdn.merakianalytics.com/riot/lol/resources/latest\",\n    \"resource\": \"/en-US/items.json\",\n    \"needsLatest\": false\n  },\n  {\n    \"name\": \"CommunityDragon\",\n    \"baseUrl\": \"https://raw.communitydragon.org/latest\",\n    \"resource\": \"/plugins/rcp-be-lol-game-data/global/default/v1/items.json\",\n    \"needsLatest\": false\n  },\n  {\n    \"name\": \"Blitz\",\n    \"baseUrl\": \"https://blitz-cdn-plain.blitz.gg/blitz/ddragon/\",\n    \"resource\": \"/data/en_US/items.json\",\n    \"needsLatest\": true\n  }\n]\n","import { CommunityDragonItemObject } from \"../types/items\";\nimport { writeFileSync } from \"fs\";\n\nexport const extractTags = (itemData: CommunityDragonItemObject) => {\n  // Iterate through the items and extract the description of each item, then extract all the tags used in the description\n  // tags are in the format <tag> and are case insensitive\n  let tags: string[] = [];\n\n  Object.entries(itemData).forEach(([key, value]) => {\n    if (value.description) {\n      const description = value.description;\n      const regex = /<([a-zA-Z]+)>/g;\n      let match;\n      while ((match = regex.exec(description)) !== null) {\n        tags.push(match[1]);\n      }\n    }\n  });\n\n  // Remove duplicates\n  tags = [...new Set(tags)];\n  // Remove the forbidden tags\n  const forbiddenTags = [\"br\", \"attention\"];\n  tags = tags.filter((tag) => !forbiddenTags.includes(tag));\n  // Sort the tags\n  tags.sort((a, b) => a.localeCompare(b));\n  // Save the tags to a file\n  writeFileSync(\"data/tags.json\", JSON.stringify(tags));\n  console.log(\"Tags extracted and saved to data/tags.json\");\n\n  return tags;\n};\n","import { writeFileSync } from \"fs\";\nimport { downloadImage } from \"./downloadImages\";\nimport { createDirectory } from \"./endpointUtils\";\nimport { TooltipData, keywordColors, tooltipData } from \"./wikiTemplates\";\nimport { ItemObject } from \"../types/items\";\n\nexport const extractWikiTemplates = (text: string) => {\n  // Grab everything between double curly braces\n  const templateRegex = /{{(.*?)}}/g;\n  let templates: string[] = [];\n  let match;\n  while ((match = templateRegex.exec(text)) !== null) {\n    let template = match[1];\n    // RGet only the first piece of the template (e.g. \"tip\" from \"tip|Ahri\")\n    template = template.split(\"|\")[0];\n    templates.push(template);\n  }\n  return templates;\n};\n\nexport const extractAllTemplates = (itemData: ItemObject) => {\n  let allTemplates: string[] = [];\n  Object.values(itemData).forEach((item) => {\n    // Extract the templates from each passive[].effects and active[].effects\n    if (item.passives && item.passives.length > 0) {\n      item.passives.forEach((passive) => {\n        if (passive.effects) {\n          allTemplates.push(...extractWikiTemplates(passive.effects));\n        }\n      });\n    }\n    if (item.active && Array.isArray(item.active) && item.active.length > 0) {\n      item.active.forEach((actv) => {\n        if (actv.effects) {\n          allTemplates.push(...extractWikiTemplates(actv.effects));\n        }\n      });\n    }\n  });\n  // Remove duplicates\n  return Array.from(new Set(allTemplates));\n};\n\n// To be used in https://leagueoflegends.fandom.com/wiki/Template:Tip\nconst extractTooltipInfo = (liElement: HTMLLIElement, type: string) => {\n  const name = liElement.querySelector(\"span\")?.getAttribute(\"data-tip\");\n  const icon =\n    liElement.querySelector(\"img\")?.getAttribute(\"src\")?.split(\"png\")[0] +\n    \"png\";\n\n  // Alias is the text content of the li element (e.g. \"(or Bush)\")\n  // It is in the last child node of the li element\n  let alias = \"\";\n  const lastChild = liElement.childNodes[liElement.childNodes.length - 1];\n  // Check if the last child is a text node\n  if (lastChild.nodeType === 3) {\n    alias = (lastChild.textContent ?? \"\")\n      .trim()\n      .replace(/[()]/g, \"\")\n      .replace(\"or \", \"\");\n  }\n\n  return { name: name, alias: alias, type: type, icon: icon };\n};\nconst getTooltipInfo = (liElements: HTMLLIElement[], type: string) => {\n  let tooltipInfo: {\n    name: string | null | undefined;\n    alias: string;\n    icon: string;\n  }[] = [];\n  liElements.forEach((liElement) => {\n    tooltipInfo.push(extractTooltipInfo(liElement, type));\n  });\n  return tooltipInfo;\n};\nconst getTooltip = (ulElement: HTMLUListElement, type: string) => {\n  const liElements = ulElement.querySelectorAll(\"li\");\n  return getTooltipInfo(Array.from(liElements), type);\n};\n\n// After extracting the tooltip info, we can use the following function to\n// Download the images and save them to our /data/img/tooltips folder\n// The path of the image will be the name of the tooltip (e.g. \"Ahri.png\")\n// The image will be used in the tooltip component of the item page\nexport const downloadTooltipImages = async (tooltips: TooltipData[]) => {\n  createDirectory(\"data/img/tooltips\");\n  let tooltipIconPromises: Promise<void>[] = [];\n  tooltips.forEach((tooltip) => {\n    if (tooltip.icon) {\n      const snakeCaseName = tooltip.name.replace(/ /g, \"_\").toLowerCase();\n      let promise = downloadImage(\n        `data/img/tooltips/${snakeCaseName}.png`,\n        tooltip.icon\n      )\n        .then(() => {\n          console.log(\"Downloaded icon for tooltip \" + tooltip.name);\n        })\n        .catch((error) => {\n          console.error(\n            `Error downloading icon for tooltip ${tooltip.name}: ${error}`\n          );\n        });\n      tooltipIconPromises.push(promise);\n    } else {\n      console.log(`No icon for tooltip ${tooltip.name}, skipping...`);\n    }\n  });\n\n  await Promise.all(tooltipIconPromises);\n};\n\n// Save tooltip data with the icon path to the /data folder\nexport const saveTooltipData = (tooltips: TooltipData[]) => {\n  let tooltipData = JSON.stringify(tooltips, null, 2);\n  const path = \"data/tooltips.json\";\n  writeFileSync(path, tooltipData);\n  console.log(`Tooltip data saved to ${path}`);\n};\n\nexport const saveTooltips = () => {\n  downloadTooltipImages(tooltipData);\n  // Modify the tooltipData to include the icon path\n  let newTooltipData = tooltipData.map((tooltip) => {\n    const snakeCaseName = tooltip.name.replace(/ /g, \"_\").toLowerCase();\n    if (tooltip.icon) {\n      return {\n        ...tooltip,\n        icon: `data/img/tooltips/${snakeCaseName}.png`,\n      };\n    }\n    return tooltip;\n  });\n\n  saveTooltipData(newTooltipData);\n\n  console.log(\"Successfully downloaded and saved tooltip images.\");\n};\n\n// Passive Progression\n// https://leagueoflegends.fandom.com/wiki/Template:Passive_progression/doc\n// LUA Code source:\n// https://leagueoflegends.fandom.com/wiki/Module:Passive_progression\n// There are two generated outputs: the visible text output, and the table embedded within the tooltip. (in our case, the table is an array of level:value pairs)\n// Syntax\n// The abbreviated link {{t|pp|}} is used for brevity.\n\n// However, there are numerous optional parameters of variable usefulness:\n\n// {{t|pp|1|2|changedisplay|showtype|label1|type|label|formula|key|key1|round|round1|color}}\n\n// 1\n//  The first parameter specifies the progression's values, separated using semicolons and up to a maximum of 30. (bottom row of table)\n// 2\n//  The second parameter specifies the values' associated levels (or other basis of scaling), again separated using semicolons and capped at 30. (top row of table)\n//  If left blank, this will automatically be populated using counting numbers.\n// changedisplay\n//  If parameter 1 includes 5 or fewer values, the default in-line display is separated by slashes. If there are more than five values, then the in-line output will be abbreviated to a range only displaying the initial and final values.\n//  If this parameter is set to true, it will reverse the display settings from the default, established by the previous point.\n// showtype\n//  The display includes an in-line text describing the type of scaling in parentheses, which defaults to \"(based on level)\".\n//  Setting this parameter to false will disable the in-line text.\n// label1, type\n//  Overwrites the label of the tooltip's top row and the in-line text's scaling factor.\n//  If both parameters are present, type will over-write the in-line text, and label1 will override top row's label.\n// label\n//  Overwrites the label of the tooltip's bottom row.\n// formula\n//  Formulas are displayed automatically in tooltip if available.\n//  Can be set to a custom string.\n//  Operator symbols are switched with operator characters.\n// key, key1\n//  Used to add units to values.\n//  key appends text to each value of parameter 1.\n//  key1 appends text to each value of parameter 2.\n//  Both keys are appended only if the value is a number.\n// round, round1\n//  Sets the number of decimal places. Defaults to 2 decimal places.\n//  Can be set to a positive integer value, abs, ceil, floor or trunc.\n// color\n//  Used to set the color of in-line text, based on the keywordColors array.\n\n// Example\n// {{pp|5;5.5 to 10 for 10|1;8 to 17|formula=5 + 0.5 starting at level 8 and until level 17}}\n\nexport interface PassiveProgressionValues {\n  level: number;\n  value: number;\n}\n\n// We only care to output the values, the text label, and the formula\nexport interface PassiveProgression {\n  values: PassiveProgressionValues[];\n  label: string;\n  formula: string;\n}\n\nconst parseVerboseProgression = (text: string) => {\n  // Parse the verbose progression (e.g. \"5.5 to 10 for 10\")\n  // This means that the value is 5.5 at the initial level, and it increases by equal increments until it reaches 10 at 10 levels or steps\n  // We can parse this by splitting the string by \" to \" and \" for \"\n  const [initialValue, rest] = text.split(\" to \");\n  const [finalValue, steps] = rest.split(\" for \");\n  // Generate the progression\n  let progression: string[] = [];\n  for (let i = 0; i <= parseInt(steps); i++) {\n    progression.push(\n      (\n        parseFloat(initialValue) +\n        (parseFloat(finalValue) - parseFloat(initialValue)) *\n          (i / parseInt(steps))\n      ).toFixed(2)\n    );\n  }\n  return progression;\n};\n\nexport const parsePassiveProgression = (text: string): PassiveProgression => {\n  const progressionRegex = /{{pp\\|(.+?)}}/g;\n  let match = progressionRegex.exec(text);\n  if (match) {\n    const [values, levels, ...rest] = match[1].split(\"|\");\n    // Parse the value skip by semicolon\n    let valueArray = values.split(\";\");\n    let levelArray = levels.split(\";\");\n\n    let valueProgression: string[] = [];\n\n    // If there's a verbose progression, parse it\n    valueArray.map((value) => {\n      if (value.includes(\" to \")) {\n        valueProgression.push(...parseVerboseProgression(value));\n      } else {\n        valueProgression.push(value);\n      }\n    });\n\n    let progression: PassiveProgressionValues[] = [];\n    valueProgression.forEach((value, index) => {\n      progression.push({\n        level: parseInt(levelArray[index]),\n        value: parseFloat(value),\n      });\n    });\n    const label = rest[rest.length - 2];\n    const formula = rest[rest.length - 1].split(\"=\")[1];\n    return {\n      values: progression,\n      label: label,\n      formula: formula,\n    };\n  }\n  throw new Error(\"Error parsing passive progression\");\n};\n","export const keywordColors = [\n  { name: \"health\", value: \"#1F995C\" },\n  { name: \"hp\", value: \"#1F995C\" },\n  { name: \"haste\", value: \"#FFFDC9\" },\n  { name: \"ah\", value: \"#FFFDC9\" },\n  { name: \"radiant\", value: \"#EABE3F\" },\n  { name: \"attack damage\", value: \"orange\" },\n  { name: \"attack's damage\", value: \"orange\" },\n  { name: \"ad\", value: \"orange\" },\n  { name: \"physical damage\", value: \"#FF8C34\" },\n  { name: \"pd\", value: \"#FF8C34\" },\n  { name: \"ability power\", value: \"#7A6DFF\" },\n  { name: \"ap\", value: \"#7A6DFF\" },\n  { name: \"magic damage\", value: \"#00B0F0\" },\n  { name: \"md\", value: \"#00B0F0\" },\n  { name: \"true damage\", value: \"#F9966B\" },\n  { name: \"td\", value: \"#F9966B\" },\n  { name: \"armor\", value: \"yellow\" },\n  { name: \"armor penetration\", value: \"tomato\" },\n  { name: \"lethality\", value: \"tomato\" },\n  { name: \"omnivamp\", value: \"#CC2051\" },\n  { name: \"leech\", value: \"#CC2051\" },\n  { name: \"life steal\", value: \"#CC2051\" },\n  { name: \"ls\", value: \"#CC2051\" },\n  { name: \"magic resist\", value: \"#00FFFF\" },\n  { name: \"mr\", value: \"#00FFFF\" },\n  { name: \"resist\", value: \"#00FFFF\" },\n  { name: \"magic penetration\", value: \"turquoise\" },\n  { name: \"mana\", value: \"#0099CC\" },\n  { name: \"energy\", value: \"yellow\" },\n  { name: \"critical strike chance\", value: \"orangered\" },\n  { name: \"critical chance\", value: \"orangered\" },\n  { name: \"critical strike damage\", value: \"orangered\" },\n  { name: \"critical damage\", value: \"#944B00\" },\n  { name: \"crit\", value: \"#944B00\" },\n  { name: \"movement speed\", value: \"#F5EE99\" },\n  { name: \"move speed\", value: \"#F5EE99\" },\n  { name: \"ms\", value: \"#F5EE99\" },\n  { name: \"xp\", value: \"#883FD1\" },\n  { name: \"gold\", value: \"#FFD700\" },\n  { name: \"siphoning strike\", value: \"#594BDD\" },\n  { name: \"soul\", value: \"#5C58C9\" },\n  { name: \"buzzword4\", value: \"#BB76AC\" },\n  { name: \"buzzword3\", value: \"#E34D4C\" },\n  { name: \"buzzword2\", value: \"#56C456\" },\n  { name: \"buzzword\", value: \"#AF1AAF\" },\n  { name: \"mist\", value: \"#26DFB0\" },\n  { name: \"wild\", value: \"#A01D7A\" },\n  { name: \"placed\", value: \"#883FD1\" },\n  { name: \"attack speed\", value: \"orangered\" },\n  { name: \"as\", value: \"orangered\" },\n  { name: \"fury\", value: \"#FA6533\" },\n  { name: \"river\", value: \"#43D9FB\" },\n  { name: \"terrain\", value: \"#B36F21\" },\n  { name: \"brush\", value: \"#96FB97\" },\n  { name: \"life point\", value: \"#56C456\" },\n  { name: \"main\", value: \"#CA2697\" },\n  { name: \"off%-hand\", value: \"#E34D4C\" },\n  { name: \"sweetspot\", value: \"#E34D4C\" },\n  { name: \"exalted\", value: \"#FF7F00\" },\n  { name: \"steel\", value: \"#748DD0\" },\n  { name: \"azakana\", value: \"#E34D4C\" },\n  { name: \"stardust\", value: \"#4262F0\" },\n  { name: \"overcharge\", value: \"deeppink\" },\n  { name: \"heal\", value: \"#60E08F\" },\n  { name: \"range\", value: \"#FFFDC9\" },\n  { name: \"ar\", value: \"yellow\" },\n];\n\nexport interface TooltipData {\n  name: string;\n  alias?: string;\n  type: string;\n  icon?: string;\n}\n\nexport const tooltipData = [\n  {\n    name: \"Acquisition radius\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/1/1e/Acquisition_range.png\",\n  },\n  {\n    name: \"Adaptive damage\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/0/07/Attack_damage.png\",\n  },\n  {\n    name: \"Adaptive force\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/bd/Adaptive_Force_icon.png\",\n  },\n  {\n    name: \"Attached\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/b2/Yuumi_You_and_Me%21.png\",\n  },\n  {\n    name: \"Bandit\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/70/Bandit_mastery_2016.png\",\n  },\n  {\n    name: \"Basic attack\",\n    type: \"General\",\n  },\n  {\n    name: \"Basic attack reset\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/f/f4/Fiora_Bladework.png\",\n  },\n  {\n    name: \"Blink\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/74/Flash.png\",\n  },\n  {\n    name: \"Block\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/0/0a/Shen_Spirit%27s_Refuge.png\",\n  },\n  {\n    name: \"Brittle\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/c3/Brittle_icon.png\",\n  },\n  {\n    name: \"Cc-immune\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/b1/Cc-immune_icon.png\",\n  },\n  {\n    name: \"Centered range\",\n    alias: \"cr\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/cf/Range_center.png\",\n  },\n  {\n    name: \"Champion\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/2/25/Champion_icon.png\",\n  },\n  {\n    name: \"Channel\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/bb/Channeling_icon.png\",\n  },\n  {\n    name: \"Cleanse\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/3/3e/Gangplank_Remove_Scurvy.png\",\n  },\n  {\n    name: \"Complete crowd control\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/5/5f/Suppression_icon.png\",\n  },\n  {\n    name: \"Critical strike\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/41/Critical_strike_icon.png\",\n  },\n  {\n    name: \"Crowd control\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/9/9d/Stun_icon.png\",\n  },\n  {\n    name: \"Dash\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/5/55/Dash.png\",\n  },\n  {\n    name: \"Death\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/c3/Death.png\",\n  },\n  {\n    name: \"Disarming crowd control\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/e/ed/Disarm_icon.png\",\n  },\n  {\n    name: \"Dispel\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/79/Anivia_Rebirth.png\",\n  },\n  {\n    name: \"Dodge\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/6/62/Jax_Counter_Strike_old.png\",\n  },\n  {\n    name: \"Drain\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/2/24/Ravenous_Hunter_rune.png\",\n  },\n  {\n    name: \"Edge range\",\n    alias: \"er\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/71/Range_model.png\",\n  },\n  {\n    name: \"Energized\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/d1/Kircheis_Shard_item.png\",\n  },\n  {\n    name: \"Energy\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/e/ea/Energy_resource.png\",\n  },\n  {\n    name: \"Execute\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/1/19/Pyke_Death_from_Below.png\",\n  },\n  {\n    name: \"Forced action\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/e/ea/Forced_action_icons.png\",\n  },\n  {\n    name: \"Fury\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/d7/Fury_resource.png\",\n  },\n  {\n    name: \"Gameplay radius\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/48/Gameplay_radius.png\",\n  },\n  {\n    name: \"Ghosted\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/a/ab/Ghost.png\",\n  },\n  {\n    name: \"Grievous wounds\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/bf/Grievous_Wounds_icon.png\",\n  },\n  {\n    name: \"Health resource\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/1/15/Health_resource.png\",\n  },\n  {\n    name: \"Immobilize\",\n    alias: \"Impaired\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/9/9d/Stun_icon.png\",\n  },\n  {\n    name: \"Interrupt\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/49/Silence_icon.png\",\n  },\n  {\n    name: \"Invulnerability\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/49/Taric_Cosmic_Radiance.png\",\n  },\n  {\n    name: \"Lockout\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/72/Lockout_icon_2.png\",\n  },\n  {\n    name: \"Lunge\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/e/ec/Udyr_Bear_Stance.png\",\n  },\n  {\n    name: \"Manaless\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/cd/Manaless_resource.png\",\n  },\n  {\n    name: \"Mutilator\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/2/26/Mutilator.png\",\n  },\n  {\n    name: \"Omnivamp\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/a/a7/Omnivamp_colored_icon.png\",\n  },\n  {\n    name: \"Pathing radius\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/7b/Pathing_radius.png\",\n  },\n  {\n    name: \"Poison\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/8/84/Poison_icon.png\",\n  },\n  {\n    name: \"Projectile\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/6/6b/Projectile.png\",\n  },\n  {\n    name: \"Resurrection\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/7c/Revival_icon.png\",\n  },\n  {\n    name: \"Selection radius\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/4a/Selection_radius.png\",\n  },\n  {\n    name: \"Spell shield\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/a/a0/Sivir_Spell_Shield.png\",\n  },\n  {\n    name: \"Stasis\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/e/e2/Stasis_icon.png\",\n  },\n  {\n    name: \"Takedown\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/0/07/Damage_rating.png\",\n  },\n  {\n    name: \"Tenacity\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/3/33/Tenacity_icon.png\",\n  },\n  {\n    name: \"Displacement immunity\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/42/Unstoppable_icon.png\",\n  },\n  {\n    name: \"Uncancellable windup\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/5/5b/Vi_Relentless_Force_2.png\",\n  },\n  {\n    name: \"Untargetable\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/41/Untargetable_icon.png\",\n  },\n  {\n    name: \"Vanish\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/6/65/Shaco_Hallucinate.png\",\n  },\n  {\n    name: \"Dragon locked\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/0/06/Locked_Dragon_buff.png\",\n  },\n  {\n    name: \"Zombie state\",\n    type: \"General\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/b9/Zombie_icon.png\",\n  },\n  {\n    name: \"Brush\",\n    alias: \"Bush\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/e/ef/Ivern_Brushmaker.png\",\n  },\n  {\n    name: \"Sight\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/0/0e/Sight_icon.png\",\n  },\n  {\n    name: \"Unobstructed vision\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/b5/Stealth_Ward_icon.png\",\n  },\n  {\n    name: \"True sight\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/1/18/True_Sight_icon.png\",\n  },\n  {\n    name: \"Exposed\",\n    alias: \"Expose\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/2/2b/Exposed_icon.png\",\n  },\n  {\n    name: \"Disabled ward\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/c3/Disabled_Ward_icon.png\",\n  },\n  {\n    name: \"Control ward\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/9/95/Control_Ward_icon.png\",\n  },\n  {\n    name: \"Farsight ward\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/2/29/Farsight_Ward_icon.png\",\n  },\n  {\n    name: \"Siege ward\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/46/Totem_Ward_icon.png\",\n  },\n  {\n    name: \"Stealth ward\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/b/b5/Stealth_Ward_icon.png\",\n  },\n  {\n    name: \"Sweeper drone\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/db/Sweeper_Drone_icon.png\",\n  },\n  {\n    name: \"Totem ward\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/46/Totem_Ward_icon.png\",\n  },\n  {\n    name: \"Zombie ward\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/2/29/Farsight_Ward_icon.png\",\n  },\n  {\n    name: \"Ghost poro\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/46/Totem_Ward_icon.png\",\n  },\n  {\n    name: \"Ward rubble\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/6/69/Ward_Rubble_icon.png\",\n  },\n  {\n    name: \"Stealth\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/3/3a/Teemo_Guerrilla_Warfare.png\",\n  },\n  {\n    name: \"Camouflage\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/3/32/Twitch_Ambush_2.png\",\n  },\n  {\n    name: \"Invisibility\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/3/34/Akali_Twilight_Shroud_old2.png\",\n  },\n  {\n    name: \"Obscured vision\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/db/Sweeper_Drone_icon.png\",\n  },\n  {\n    name: \"Stealthed trap\",\n    type: \"Vision and Wards\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/5/5e/Teemo_Noxious_Trap.png\",\n  },\n  {\n    name: \"Unit-targeted\",\n    type: \"Targeting paradigms\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/ca/Jax_Leap_Strike.png\",\n  },\n  {\n    name: \"Direction-targeted\",\n    type: \"Targeting paradigms\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/43/Brand_Sear.png\",\n  },\n  {\n    name: \"Ground-targeted\",\n    type: \"Targeting paradigms\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/c3/Xerath_Eye_of_Destruction.png\",\n  },\n  {\n    name: \"Auto-targeted\",\n    type: \"Targeting paradigms\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/2/20/Kennen_Electrical_Surge.png\",\n  },\n  {\n    name: \"Aura\",\n    type: \"Targeting paradigms\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/8/8d/Sona_Aria_of_Perseverance.png\",\n  },\n  {\n    name: \"Krugs\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/f/fe/Ancient_KrugSquare.png\",\n  },\n  {\n    name: \"Murk wolves\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/d6/Greater_Murk_WolfSquare.png\",\n  },\n  {\n    name: \"Raptors\",\n    alias: \"chickens\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/9/94/Crimson_RaptorSquare.png\",\n  },\n  {\n    name: \"Golems\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/f/fb/Ancient_Golem_Icon_profileicon.jpg/revision/latest/scale-to-width-down/20?cb=20221125202548png\",\n  },\n  {\n    name: \"Wraiths\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/44/Wraith_Icon_profileicon.jpg/revision/latest/scale-to-width-down/20?cb=20221125215430png\",\n  },\n  {\n    name: \"Wolves\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/c/c6/Level_Two_Critter_Icon_profileicon.jpg/revision/latest/scale-to-width-down/20?cb=20221125215315png\",\n  },\n  {\n    name: \"Impatience\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/de/Frenzy_mastery_2013.png\",\n  },\n  {\n    name: \"Minion\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/3/30/Minion_icon.png\",\n  },\n  {\n    name: \"Monster\",\n    type: \"Jungle & Minions\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/d1/Monster_icon.png\",\n  },\n  {\n    name: \"Pet\",\n    type: \"Pets and other unit types\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/9/92/Annie_Summon-_Tibbers.png\",\n  },\n  {\n    name: \"Clone\",\n    type: \"Pets and other unit types\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/d7/Shaco_Command-_Hallucinate.png\",\n  },\n  {\n    name: \"Effigy\",\n    type: \"Pets and other unit types\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/4/46/Totem_Ward_icon.png\",\n  },\n  {\n    name: \"Turret\",\n    type: \"Turret\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/8/82/Turret_icon.png\",\n  },\n  {\n    name: \"Nexus obelisk\",\n    type: \"Turret\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/d/d2/Nexus_Obelisk.png\",\n  },\n  {\n    name: \"Penetrating bullets\",\n    type: \"Turret\",\n    icon: \"https://static.wikia.nocookie.net/leagueoflegends/images/7/7c/Penetrating_Bullets.png\",\n  },\n];\n"],"mappings":"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ACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,EACR;AACF;;;ADjj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","names":["existsSync","mkdirSync","axios","info","axios","response","path","axios","existsSync","mkdirSync","axios","_","_","_","ChampionClass","ItemRank","ItemTag","_","value","writeFileSync","writeFileSync","tooltipData","path","writeFileSync","writeFileSync","axios","_"]}