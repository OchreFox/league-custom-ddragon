{"version":3,"sources":["../src/index.ts","../src/parsers/champions.ts","../src/utils/downloadImages.ts","../src/utils/blurhashDataURL.ts","../src/utils/endpointUtils.ts","../src/utils/getLatestVersion.ts","../endpoints/champions.json","../src/utils/championQuery.ts","../src/parsers/items.ts","../src/utils/sanitizeText.ts","../src/utils/itemUtils.ts","../src/types/items.ts","../src/schemas/meraki-item-zod-schema.ts","../src/utils/constants.ts","../endpoints/items.json","../src/utils/extractTags.ts"],"sourcesContent":["import { info } from \"@actions/core\";\r\nimport { getChampions } from \"./parsers/champions.js\";\r\nimport { getItems } from \"./parsers/items.js\";\r\n\r\nconst main = async () => {\r\n  await getItems();\r\n  info(\"Successfully merged items.json\\n\");\r\n  await getChampions();\r\n  info(\"Successfully merged champions.json\\n\");\r\n  info(\"Successfully generated custom files.\");\r\n};\r\n\r\nmain();\r\n","import { writeFileSync, existsSync, mkdirSync } from \"fs\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\n// Load env variables from .env file\r\nimport \"dotenv/config\";\r\nimport { downloadImage } from \"src/utils/downloadImages.js\";\r\nimport { getLatestVersion } from \"src/utils/getLatestVersion.js\";\r\nimport championsConfig from \"endpoints/champions.json\";\r\n\r\nimport {\r\n  Endpoint,\r\n  EndpointChampionData,\r\n  EndpointNames,\r\n} from \"src/types/global.js\";\r\n\r\nimport { queryString } from \"src/utils/championQuery.js\";\r\nimport { MergedChampionDataObject } from \"src/types/champions.js\";\r\nimport { getEndpoints, readJsonFile } from \"../utils/endpointUtils.js\";\r\n\r\nconst mergeChampions = async (endpoints: Endpoint[], latestVersion: string) => {\r\n  let mobalyticsConfig = {\r\n    method: \"post\",\r\n    url: \"https://app.mobalytics.gg/api/league/gql/static/v1\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n      \"Accept-Encoding\": \"identity\",\r\n    },\r\n    data: queryString,\r\n  };\r\n  let championEndpoints: EndpointChampionData[] = [];\r\n  let championPromises: Promise<void>[] = [];\r\n  let mobalyticsData: _.Dictionary<any> = [];\r\n  let mergedChampionData: MergedChampionDataObject = {};\r\n\r\n  // Fetch the champions.json from the endpoints\r\n  endpoints.forEach((endpoint) => {\r\n    let promise = axios\r\n      .get(endpoint.url, {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          \"Accept-Encoding\": \"identity\",\r\n        },\r\n      })\r\n      .then((response) => {\r\n        championEndpoints.push({ name: endpoint.name, data: response.data });\r\n      });\r\n    championPromises.push(promise);\r\n  });\r\n\r\n  await Promise.all(championPromises);\r\n  championPromises = [];\r\n\r\n  // Get data from Mobalytics GraphQL API\r\n  let mobalyticsPromise = axios(mobalyticsConfig)\r\n    .then(function (response) {\r\n      mobalyticsData = _.chain(response.data.data.info)\r\n        .flatMap(({ flatData }) => flatData)\r\n        .keyBy(\"riotSlug\")\r\n        .value();\r\n\r\n      console.log(\"Mobalytics data fetched\");\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });\r\n\r\n  championPromises.push(mobalyticsPromise);\r\n  await Promise.all(championPromises);\r\n\r\n  // Get data from endpoints\r\n  championEndpoints.forEach((endpoint) => {\r\n    if (endpoint.name === EndpointNames.MerakiAnalytics) {\r\n      let data = endpoint.data;\r\n      Object.assign(mergedChampionData, data);\r\n    }\r\n  });\r\n\r\n  // Merge mobalytics data with mergedChampionData\r\n  mergedChampionData = _.merge(mergedChampionData, mobalyticsData);\r\n  let championIconPromises: Promise<void>[] = [];\r\n  for (const key of Object.keys(mergedChampionData)) {\r\n    // Save champion images\r\n    let icon = mergedChampionData[key].icon;\r\n    if (icon) {\r\n      let iconName = icon.split(\"/\").pop()?.split(\".\")[0] || \"\";\r\n      if (iconName && iconName.length > 0) {\r\n        let promise = downloadImage(\r\n          `data/img/champions/${iconName}.webp`,\r\n          icon\r\n        ).then((placeholder) => {\r\n          mergedChampionData[key].icon = `data/img/champions/${iconName}.webp`;\r\n          mergedChampionData[key].placeholder = placeholder;\r\n          console.log(\r\n            \"Downloaded icon for champion \" + mergedChampionData[key].name\r\n          );\r\n        });\r\n        championIconPromises.push(promise);\r\n      }\r\n    }\r\n  }\r\n\r\n  await Promise.all(championIconPromises);\r\n\r\n  // Create a copy of the mergedChampionData\r\n  let lightweightChampionData = _.cloneDeep(mergedChampionData);\r\n\r\n  Object.keys(lightweightChampionData).forEach((key) => {\r\n    // Delete unneeded keys (abilities, skins, stats, key, slug)\r\n    delete lightweightChampionData[key].abilities;\r\n    delete lightweightChampionData[key].skins;\r\n    delete lightweightChampionData[key].stats;\r\n    delete lightweightChampionData[key].key;\r\n    delete lightweightChampionData[key].slug;\r\n  });\r\n\r\n  console.info(\"Writing champions data to file...\");\r\n\r\n  // Write the merged champions.json file\r\n  // deepcode ignore PT: Wont fix this right away\r\n  writeFileSync(\r\n    `data/${latestVersion}/champions.json`,\r\n    JSON.stringify(mergedChampionData)\r\n  );\r\n  writeFileSync(\r\n    `data/latest/champions.json`,\r\n    JSON.stringify(mergedChampionData)\r\n  );\r\n  // deepcode ignore PT: Wont fix this right away\r\n  writeFileSync(\r\n    `data/${latestVersion}/champions-summary.json`,\r\n    JSON.stringify(lightweightChampionData)\r\n  );\r\n  writeFileSync(\r\n    `data/latest/champions-summary.json`,\r\n    JSON.stringify(lightweightChampionData)\r\n  );\r\n};\r\n\r\n// Get the champions.json file from the different endpoints specified in champions.json\r\n// Return the custom merged champions.json file\r\nexport async function getChampions() {\r\n  const latestVersion = await getLatestVersion();\r\n  // const championsConfig = readJsonFile(\"endpoints/champions.json\");\r\n  let endpoints: Endpoint[] = getEndpoints(championsConfig, latestVersion);\r\n  // Create a folder in /data if it doesn't exist for the latest version\r\n  if (!existsSync(`data/${latestVersion}`)) {\r\n    mkdirSync(`data/${latestVersion}`);\r\n  }\r\n  // Create the folder latest in /data if it doesn't exist\r\n  if (!existsSync(`data/latest`)) {\r\n    mkdirSync(`data/latest`);\r\n  }\r\n  await mergeChampions(endpoints, latestVersion);\r\n}\r\n\r\n// const main = async () => {\r\n//   try {\r\n//     await getChampions();\r\n//     info(\"Successfully merged champions.json\");\r\n//   } catch (error) {\r\n//     setFailed(error.message);\r\n//   }\r\n// };\r\n\r\n// // Only run main if running locally\r\n// if (process.env.GITHUB_ACTIONS !== \"true\") {\r\n//   main();\r\n// }\r\n","import sharp from \"sharp\";\r\nimport axios from \"axios\";\r\nimport { encode } from \"blurhash\";\r\n\r\nimport { blurHashToDataURL } from \"./blurhashDataURL.js\";\r\nimport { createDirectory } from \"./endpointUtils.js\";\r\n\r\n/**\r\n * &gt;&gt;&gt; downloadImage(\"data/img/items/image.png\", \"http://www.example.com/image.png\")\r\n * @param {string} filename - The path of the file to be downloaded. Include the subfolder for champion or items\r\n * @param {string} url - The URL path to the image you want to download.\r\n * @returns {Promise<string>} Blurhash placeholder with a 4x4 size.\r\n */\r\nexport async function downloadImage(\r\n  filename: string,\r\n  url: string\r\n): Promise<string> {\r\n  if (!filename || !url) {\r\n    console.warn(\"No filename or url specified\");\r\n    return \"\";\r\n  }\r\n  let placeholder = \"\";\r\n\r\n  // Create folders\r\n  createDirectory(\"data/img/champions\", true);\r\n  createDirectory(\"data/img/items\", true);\r\n\r\n  let axiosResponse = await axios\r\n    .get(url, {\r\n      responseType: \"arraybuffer\",\r\n      headers: {\r\n        \"Accept-Encoding\": \"identity\",\r\n      },\r\n    })\r\n    .catch((err) => console.error(err));\r\n\r\n  // Save the image as a file\r\n  if (axiosResponse) {\r\n    console.log(\"Saving image \" + filename);\r\n    await sharp(axiosResponse.data)\r\n      .toFile(filename)\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n    // Create a placeholder\r\n    const { data, info } = await sharp(filename)\r\n      .raw()\r\n      .ensureAlpha()\r\n      .toBuffer({ resolveWithObject: true });\r\n\r\n    const clamped = new Uint8ClampedArray(data);\r\n    const blurhash = encode(clamped, info.width, info.height, 4, 4);\r\n    placeholder = blurhash;\r\n  }\r\n\r\n  return placeholder;\r\n}\r\n\r\n// test\r\n// eslint-disable-next-line no-unused-vars\r\nconst test = async () => {\r\n  let placeholder = \"\";\r\n  let blurhash = await downloadImage(\r\n    \"data/img/champions/Aatrox.png\",\r\n    \"https://ddragon.leagueoflegends.com/cdn/12.13.1/img/champion/Aatrox.png\"\r\n  );\r\n  console.log(\"Blurhash: \" + blurhash);\r\n  // Generate a 32x32 image from the blurhash\r\n  const base64 = blurHashToDataURL(blurhash, 32, 32);\r\n  if (base64) placeholder = base64;\r\n  console.log(\"Converted (base64): \" + placeholder);\r\n};\r\n\r\n// Run only if this file is called directly\r\n// if (!process.env.GITHUB_ACTIONS || process.env.GITHUB_ACTIONS === \"false\") {\r\n//   test();\r\n// }\r\n","import { decodeBlurHash } from \"fast-blurhash\";\r\n\r\nconst cache: Record<string, string> = {};\r\n\r\nexport function blurHashToDataURL(\r\n  hash: string | undefined,\r\n  width: number,\r\n  height: number\r\n): string | undefined {\r\n  if (!hash) return undefined;\r\n\r\n  const cachedBlurDataURL = cache[hash];\r\n\r\n  if (cachedBlurDataURL) {\r\n    return cachedBlurDataURL;\r\n  }\r\n\r\n  const pixels = decodeBlurHash(hash, width, height);\r\n  const dataURL = parsePixels(pixels, width, height);\r\n  cache[hash] = dataURL;\r\n  return dataURL;\r\n}\r\n\r\n// thanks to https://github.com/wheany/js-png-encoder\r\nfunction parsePixels(pixels: Uint8ClampedArray, width: number, height: number) {\r\n  const pixelsString = [...pixels]\r\n    .map((byte) => String.fromCharCode(byte))\r\n    .join(\"\");\r\n  const pngString = generatePng(width, height, pixelsString);\r\n  const dataURL =\r\n    typeof Buffer !== \"undefined\"\r\n      ? Buffer.from(getPngArray(pngString)).toString(\"base64\")\r\n      : btoa(pngString);\r\n  return \"data:image/png;base64,\" + dataURL;\r\n}\r\n\r\nfunction getPngArray(pngString: string) {\r\n  const pngArray = new Uint8Array(pngString.length);\r\n  for (let i = 0; i < pngString.length; i++) {\r\n    pngArray[i] = pngString.charCodeAt(i);\r\n  }\r\n  return pngArray;\r\n}\r\n\r\nfunction generatePng(width: number, height: number, rgbaString: string) {\r\n  const DEFLATE_METHOD = String.fromCharCode(0x78, 0x01);\r\n  const CRC_TABLE: number[] = [];\r\n  const SIGNATURE = String.fromCharCode(137, 80, 78, 71, 13, 10, 26, 10);\r\n  const NO_FILTER = String.fromCharCode(0);\r\n\r\n  let n, c, k;\r\n\r\n  // make crc table\r\n  for (n = 0; n < 256; n++) {\r\n    c = n;\r\n    for (k = 0; k < 8; k++) {\r\n      if (c & 1) {\r\n        c = 0xedb88320 ^ (c >>> 1);\r\n      } else {\r\n        c = c >>> 1;\r\n      }\r\n    }\r\n    CRC_TABLE[n] = c;\r\n  }\r\n\r\n  // Functions\r\n  function inflateStore(data: string) {\r\n    const MAX_STORE_LENGTH = 65535;\r\n    let storeBuffer = \"\";\r\n    let remaining;\r\n    let blockType;\r\n\r\n    for (let i = 0; i < data.length; i += MAX_STORE_LENGTH) {\r\n      remaining = data.length - i;\r\n      blockType = \"\";\r\n\r\n      if (remaining <= MAX_STORE_LENGTH) {\r\n        blockType = String.fromCharCode(0x01);\r\n      } else {\r\n        remaining = MAX_STORE_LENGTH;\r\n        blockType = String.fromCharCode(0x00);\r\n      }\r\n      // little-endian\r\n      storeBuffer +=\r\n        blockType +\r\n        String.fromCharCode(remaining & 0xff, (remaining & 0xff00) >>> 8);\r\n      storeBuffer += String.fromCharCode(\r\n        ~remaining & 0xff,\r\n        (~remaining & 0xff00) >>> 8\r\n      );\r\n\r\n      storeBuffer += data.substring(i, i + remaining);\r\n    }\r\n\r\n    return storeBuffer;\r\n  }\r\n\r\n  function adler32(data: string) {\r\n    let MOD_ADLER = 65521;\r\n    let a = 1;\r\n    let b = 0;\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      a = (a + data.charCodeAt(i)) % MOD_ADLER;\r\n      b = (b + a) % MOD_ADLER;\r\n    }\r\n\r\n    return (b << 16) | a;\r\n  }\r\n\r\n  function updateCrc(crc: number, buf: string) {\r\n    let c = crc;\r\n    let b: number;\r\n\r\n    for (let n = 0; n < buf.length; n++) {\r\n      b = buf.charCodeAt(n);\r\n      c = CRC_TABLE[(c ^ b) & 0xff] ^ (c >>> 8);\r\n    }\r\n    return c;\r\n  }\r\n\r\n  function crc(buf: string) {\r\n    return updateCrc(0xffffffff, buf) ^ 0xffffffff;\r\n  }\r\n\r\n  function dwordAsString(dword: number) {\r\n    return String.fromCharCode(\r\n      (dword & 0xff000000) >>> 24,\r\n      (dword & 0x00ff0000) >>> 16,\r\n      (dword & 0x0000ff00) >>> 8,\r\n      dword & 0x000000ff\r\n    );\r\n  }\r\n\r\n  function createChunk(length: number, type: string, data: string) {\r\n    const CRC = crc(type + data);\r\n\r\n    return dwordAsString(length) + type + data + dwordAsString(CRC);\r\n  }\r\n\r\n  function createIHDR(width: number, height: number) {\r\n    const IHDRdata =\r\n      dwordAsString(width) +\r\n      dwordAsString(height) +\r\n      // bit depth\r\n      String.fromCharCode(8) +\r\n      // color type: 6=truecolor with alpha\r\n      String.fromCharCode(6) +\r\n      // compression method: 0=deflate, only allowed value\r\n      String.fromCharCode(0) +\r\n      // filtering: 0=adaptive, only allowed value\r\n      String.fromCharCode(0) +\r\n      // interlacing: 0=none\r\n      String.fromCharCode(0);\r\n\r\n    return createChunk(13, \"IHDR\", IHDRdata);\r\n  }\r\n\r\n  // PNG creations\r\n\r\n  const IEND = createChunk(0, \"IEND\", \"\");\r\n  const IHDR = createIHDR(width, height);\r\n\r\n  let scanlines = \"\";\r\n  let scanline;\r\n\r\n  for (let y = 0; y < rgbaString.length; y += width * 4) {\r\n    scanline = NO_FILTER;\r\n    if (Array.isArray(rgbaString)) {\r\n      for (let x = 0; x < width * 4; x++) {\r\n        scanline += String.fromCharCode(rgbaString[y + x] & 0xff);\r\n      }\r\n    } else {\r\n      scanline += rgbaString.substr(y, width * 4);\r\n    }\r\n    scanlines += scanline;\r\n  }\r\n\r\n  const compressedScanlines =\r\n    DEFLATE_METHOD +\r\n    inflateStore(scanlines) +\r\n    dwordAsString(adler32(scanlines));\r\n  const IDAT = createChunk(\r\n    compressedScanlines.length,\r\n    \"IDAT\",\r\n    compressedScanlines\r\n  );\r\n\r\n  const pngString = SIGNATURE + IHDR + IDAT + IEND;\r\n  return pngString;\r\n}\r\n","import { EndpointSpec } from \"../types/endpoints.js\";\r\nimport { Endpoint } from \"../types/global.js\";\r\nimport { existsSync, mkdirSync, readFileSync } from \"fs\";\r\n\r\nexport const getEndpointUrl = (endpoint: EndpointSpec, version: string) => {\r\n  if (!version) {\r\n    throw new Error(\"Version is undefined\");\r\n  }\r\n  return `${endpoint.baseUrl}${endpoint.needsLatest ? version : \"\"}${\r\n    endpoint.resource\r\n  }`;\r\n};\r\n\r\nexport const getEndpoints = (\r\n  endpoints: EndpointSpec[],\r\n  version: string\r\n): Endpoint[] => {\r\n  if (!version) {\r\n    throw new Error(\"Version is undefined\");\r\n  }\r\n  return endpoints.map((endpoint) => ({\r\n    name: endpoint.name,\r\n    url: getEndpointUrl(endpoint, version),\r\n  }));\r\n};\r\n\r\nexport const readJsonFile = (path: string) => {\r\n  return JSON.parse(readFileSync(path, \"utf8\"));\r\n};\r\n\r\nexport const createDirectory = (path: string, recursive: boolean = false) => {\r\n  if (!existsSync(path)) {\r\n    mkdirSync(path, { recursive });\r\n  }\r\n};\r\n","import axios, { AxiosRequestConfig } from \"axios\";\r\n\r\n/**\r\n * Gets the latest version of DDragon from https://ddragon.leagueoflegends.com/api/versions.json\r\n * @returns {string} The latest version of the game.\r\n */\r\nexport const getLatestVersion = async () => {\r\n  const versionsEndpoints = [\r\n    {\r\n      method: \"get\",\r\n      url: \"https://ddragon.leagueoflegends.com/api/versions.json\",\r\n      name: \"DDragon (Riot)\",\r\n    },\r\n    {\r\n      method: \"get\",\r\n      url: \"https://utils.iesdev.com/static/json/lol/riot/versions\",\r\n      name: \"Blitz\",\r\n    },\r\n  ];\r\n  // Try to get the latest version from the first endpoint, if it fails, try the second endpoint\r\n  for (const endpoint of versionsEndpoints) {\r\n    try {\r\n      console.log(`Getting latest version from ${endpoint.name}...`);\r\n      const config: AxiosRequestConfig = {\r\n        method: endpoint.method,\r\n        url: endpoint.url,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n          \"Accept-Encoding\": \"identity\",\r\n        },\r\n      };\r\n      const response = await axios(config)\r\n        .then((response) => {\r\n          return response.data[0];\r\n        })\r\n        .catch((error) => {\r\n          throw error;\r\n        });\r\n      console.log(`Got latest version from ${endpoint.name}`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error(`Failed to get latest version from ${endpoint.name}`);\r\n      console.error(error);\r\n    }\r\n  }\r\n  // If both endpoints fail, throw an error\r\n  throw new Error(\"Failed to get latest version\");\r\n};\r\n","[\r\n  {\r\n    \"name\": \"MerakiAnalytics\",\r\n    \"baseUrl\": \"http://cdn.merakianalytics.com/riot/lol/resources/latest\",\r\n    \"resource\": \"/en-US/champions.json\",\r\n    \"needsLatest\": false\r\n  }\r\n]\r\n","export const queryString = {\r\n  query: `query ChampionsInfo{\r\n      info: queryChampionsV1Contents(top: 0){\r\n          flatData{\r\n              name\r\n              slug\r\n              antiDive\r\n              burst\r\n              control\r\n              damage\r\n              damageType\r\n              divePotential\r\n              engage\r\n              gankDenial\r\n              gankReliability\r\n              gankTurnAround\r\n              kite\r\n              mobility\r\n              pick\r\n              poke\r\n              preControl\r\n              preDamage\r\n              preMobility\r\n              preToughness\r\n              postControl\r\n              postDamage\r\n              postMobility\r\n              postToughness\r\n              skirmish\r\n              split\r\n              sustained\r\n              tags\r\n              toughness\r\n              utility\r\n              waveclear\r\n              powerSpikes{\r\n                  early\r\n                  mid\r\n                  late\r\n                }\r\n              key: riotId\r\n              riotSlug\r\n              difficultyLevel\r\n              difficulty{\r\n                  flatData{\r\n                      slug\r\n                      name\r\n                      level\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }`,\r\n  variables: {},\r\n};\r\n","import axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport { getLatestVersion } from \"~/src/utils/getLatestVersion.js\";\r\nimport { sanitizeText, toPascalCase } from \"~/src/utils/sanitizeText.js\";\r\nimport {\r\n  getCommunityDragonItemData,\r\n  getMerakiItemData,\r\n  getBlitzItemData,\r\n  writeItems,\r\n} from \"~/src/utils/itemUtils.js\";\r\nimport { defaultValues } from \"~/src/utils/constants.js\";\r\nimport { downloadImage } from \"~/src/utils/downloadImages.js\";\r\n// Load env variables from .env file\r\nimport \"dotenv/config\";\r\nimport { Endpoint, EndpointItemData } from \"~/src/types/global.js\";\r\nimport { CommunityDragonItem, Item, ItemObject } from \"~/src/types/items.js\";\r\nimport itemsConfig from \"~/endpoints/items.json\";\r\nimport { createDirectory, getEndpoints } from \"~/src/utils/endpointUtils.js\";\r\nimport { extractTags } from \"../utils/extractTags\";\r\n\r\n// Main function to merge the items from the different endpoints\r\nconst mergeItems = async (\r\n  endpoints: Endpoint[],\r\n  latestVersion: string\r\n): Promise<void> => {\r\n  let fetchedItemData: EndpointItemData[] = [];\r\n  let itemPromises: Promise<void>[] = [];\r\n\r\n  // Fetch all the items from the different endpoints\r\n  endpoints.forEach((endpoint) => {\r\n    console.log(`Fetching ${endpoint.name} items...`);\r\n    let promise = axios\r\n      .get(endpoint.url, {\r\n        headers: {\r\n          \"Accept-Encoding\": \"identity\",\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(`Fetched ${endpoint.name} items`);\r\n        fetchedItemData.push({ name: endpoint.name, data: response.data });\r\n      });\r\n    itemPromises.push(promise);\r\n  });\r\n  await Promise.all(itemPromises);\r\n\r\n  // Merge the items from the different endpoints\r\n  let mergedItems: ItemObject = {};\r\n  let blitzItems;\r\n  let allowedTags: string[] = [];\r\n  fetchedItemData.forEach((endpointData) => {\r\n    switch (endpointData.name) {\r\n      case \"Blitz\":\r\n        blitzItems = getBlitzItemData(endpointData);\r\n        allowedTags = extractTags(blitzItems);\r\n        Object.assign(mergedItems, blitzItems);\r\n        break;\r\n\r\n      case \"MerakiAnalytics\":\r\n        mergedItems = getMerakiItemData(endpointData, mergedItems);\r\n        break;\r\n\r\n      case \"CommunityDragon\":\r\n        mergedItems = getCommunityDragonItemData(endpointData, mergedItems);\r\n        break;\r\n    }\r\n  });\r\n\r\n  // Merge the default values with every item in mergedItems\r\n  mergedItems = _.mapValues(mergedItems, (item) => {\r\n    return _.defaults(item, defaultValues);\r\n  });\r\n  console.log(`Merged ${Object.keys(mergedItems).length} items`);\r\n\r\n  // Create a separate list of tags converted to PascalCase\r\n  const pascalCaseTags = allowedTags.map((tag) => toPascalCase(tag));\r\n\r\n  // Download item icons and placeholders\r\n  let itemIconPromises: Promise<void>[] = [];\r\n  Object.entries(mergedItems).forEach(([key, item]: [string, Item]) => {\r\n    if (item.description) {\r\n      mergedItems[key].description = sanitizeText(\r\n        item,\r\n        allowedTags,\r\n        pascalCaseTags\r\n      );\r\n    }\r\n    let iconName = item.icon.split(\"/\").pop()?.split(\".\")[0] ?? \"\";\r\n    if (iconName && iconName.length > 0) {\r\n      let promise = downloadImage(`data/img/items/${iconName}.webp`, item.icon)\r\n        .then((placeholder: string) => {\r\n          mergedItems[key].icon = `data/img/items/${iconName}.webp`;\r\n          mergedItems[key].placeholder = placeholder;\r\n          console.log(\"Downloaded icon for item \" + mergedItems[key].name);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\r\n            `Error downloading icon for item ${item.name}: ${error}`\r\n          );\r\n        });\r\n      itemIconPromises.push(promise);\r\n    }\r\n  });\r\n\r\n  await Promise.all(itemIconPromises);\r\n\r\n  console.info(\"Writing items data to file...\");\r\n  writeItems(latestVersion, mergedItems);\r\n};\r\n\r\n// Get the items.json file from the different endpoints specified in items.json\r\n// Return the custom merged items.json file\r\nexport const getItems = async () => {\r\n  const latestVersion = await getLatestVersion();\r\n  let endpoints = getEndpoints(itemsConfig, latestVersion);\r\n  console.log(\"Endpoints: \", endpoints);\r\n\r\n  // Create the data directory if it doesn't exist for the current patch\r\n  createDirectory(`data/${latestVersion}`);\r\n  createDirectory(\"data/latest\");\r\n  await mergeItems(endpoints, latestVersion);\r\n};\r\n\r\n// const test = async () => {\r\n//   try {\r\n//     await getItems();\r\n//     console.log(\"Successfully merged items.json\");\r\n//   } catch (error: any) {\r\n//     console.error(\"Error: \" + error.message);\r\n//   }\r\n// };\r\n\r\n// // Only run test if running locally\r\n// if (!process.env.GITHUB_ACTIONS || process.env.GITHUB_ACTIONS === \"false\") {\r\n//   test();\r\n// }\r\n","import _ from \"lodash\";\r\nimport DOMPurify from \"isomorphic-dompurify\";\r\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\r\nimport { Item } from \"~/src/types/items.js\";\r\n\r\n/**\r\n * Function to convert a string from camel case or snake case to pascal case\r\n * @param {string} str - The string to convert to PascalCase.\r\n */\r\nexport const toPascalCase = (str: string) => {\r\n  return str\r\n    .split(\"_\")\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\"\");\r\n};\r\n\r\n/**\r\n * It takes a string, sanitizes it, parses it, and returns a string.\r\n * @param {Item} item - {\r\n * @returns {string} A string of XML.\r\n */\r\nexport function sanitizeText(\r\n  item: Item,\r\n  allowedTags: string[],\r\n  pascalCaseTags: string[]\r\n): string {\r\n  if (!item) return \"\";\r\n  let text = item.description;\r\n  if (!text) {\r\n    console.warn(`Item ${item.name} has no description`);\r\n    return \"\";\r\n  }\r\n\r\n  // Sanitize text with dompurify\r\n  let sanitizedText = DOMPurify.sanitize(text, {\r\n    ALLOWED_TAGS: allowedTags,\r\n    FORBID_TAGS: [\"br\", \"attention\", \"{{\", \"{%\", \"{\", \"}\", \"%}\", \"}}\"],\r\n    SAFE_FOR_TEMPLATES: false,\r\n    ALLOW_DATA_ATTR: true,\r\n    KEEP_CONTENT: true, // Preserve content between tags\r\n  });\r\n\r\n  // Replace all lowercase tags with PascalCase tags\r\n  pascalCaseTags.forEach((tag) => {\r\n    sanitizedText = sanitizedText.replace(\r\n      new RegExp(`<${tag.toLowerCase()}>`, \"g\"),\r\n      `<${tag}>`\r\n    );\r\n    sanitizedText = sanitizedText.replace(\r\n      new RegExp(`</${tag.toLowerCase()}>`, \"g\"),\r\n      `</${tag}>`\r\n    );\r\n  });\r\n\r\n  // Parse with fast-xml-parser\r\n  const parser = new XMLParser({\r\n    preserveOrder: true,\r\n  });\r\n  const xml = parser.parse(sanitizedText);\r\n\r\n  // Remove stats from the xml object\r\n  if (xml.mainText?.stats) {\r\n    for (let key in xml.mainText.stats) {\r\n      delete xml.mainText.stats[key];\r\n    }\r\n  }\r\n\r\n  // Convert xml object to XML string\r\n  const builder = new XMLBuilder({\r\n    preserveOrder: true,\r\n  });\r\n  let xmlString = builder.build(xml);\r\n\r\n  // Add stats between <Stats> tag and </Stats> tag\r\n  xmlString = parseStats(xmlString, item);\r\n  // Combine Active tags\r\n  xmlString = parseActives(xmlString);\r\n\r\n  // Replace in xmlString:\r\n  // Add a whitespace (' ') before a less than character ('<') if the preceding character is a letter (a-z, A-Z) or a colon (':')\r\n  const lessThanRegex = /([a-zA-Z,:])</g;\r\n  xmlString = xmlString.replace(lessThanRegex, \"$1 <\");\r\n\r\n  return xmlString;\r\n}\r\n\r\n/**\r\n * Takes an XML string and an item object, and replaces the string with a JSX element\r\n * @param {string} xmlString - The string of the xml file\r\n * @param {Item} item - The item object that contains the stats\r\n * @returns {string} The xmlString is being returned with the stats of the item.\r\n * @example\r\n * Returns: <Stats><Stat name=\"Attack Speed\">1.5</Stat></Stats>\r\n */\r\nexport function parseStats(xmlString: string, item: Item): string {\r\n  const statsRegex = /<Stats>(.*?)<\\/Stats>/g;\r\n  const statsMatch = xmlString.match(statsRegex);\r\n  if (statsMatch) {\r\n    const statsTag = statsMatch[0];\r\n    let statsString = \"\";\r\n\r\n    // Create the stats string with the stats of the item\r\n    if (item.stats) {\r\n      Object.entries(item.stats).forEach(([keyItem, value]) => {\r\n        Object.entries(value).forEach(([key2, value2]) => {\r\n          let statName = toPascalCase(key2) + toPascalCase(keyItem);\r\n          statsString += `<Stat name=\"${statName}\">${value2}${\r\n            key2.includes(\"percent\") ? \"%\" : \"\"\r\n          }</Stat>`;\r\n        });\r\n      });\r\n    }\r\n\r\n    const statText = `<Stats>${statsString}</Stats>`;\r\n    xmlString = _.replace(xmlString, statsTag, statText);\r\n  }\r\n  return xmlString;\r\n}\r\n\r\n/** Combine all two adjacent Active tags when the first one is \"Active -\"\r\n * @param {string} xmlString - The string of the xml file\r\n * @returns {string} Parsed string\r\n * @example\r\n * Input: <Active>Active -</Active><Active>Lorem ipsum</Active>\r\n * Result:  <Active>Active - Lorem ipsum</Active>\r\n */\r\nexport function parseActives(xmlString: string): string {\r\n  const activeRegex = /<Active>(.*?)<\\/Active>/g;\r\n  const activeMatch = xmlString.match(activeRegex);\r\n  let skipNext = false;\r\n  if (activeMatch) {\r\n    // Loop through each match\r\n    for (const match of activeMatch) {\r\n      // If skipNext is set to true, skip the next match\r\n      if (skipNext === true) {\r\n        skipNext = false;\r\n        // Delete the match from the xmlString\r\n        xmlString = _.replace(xmlString, match, \"\");\r\n        continue;\r\n      }\r\n      // Get the content of the match\r\n      const tagContent = match.replace(/<\\/?Active>/g, \"\");\r\n      // Check if the content is \"Active -\"\r\n      if (tagContent === \"Active -\") {\r\n        // Replace the match with the \"Active - \" and the content of the next match\r\n        const nextTagContent = activeMatch[activeMatch.indexOf(match) + 1]\r\n          .replace(/<\\/?Active>/g, \"\")\r\n          .trim();\r\n\r\n        xmlString = _.replace(\r\n          xmlString,\r\n          match,\r\n          `<Active>Active - ${nextTagContent}</Active>`\r\n        );\r\n        // Skip the next match\r\n        skipNext = true;\r\n      }\r\n    }\r\n  }\r\n  return xmlString;\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs\";\r\nimport _ from \"lodash\";\r\nimport { EndpointItemData } from \"~/src/types/global.js\";\r\nimport {\r\n  BlitzData,\r\n  BlitzRoot,\r\n  ChampionClass,\r\n  CommunityDragonItem,\r\n  MerakiItem,\r\n  MerakiItemObject,\r\n  MerakiStats,\r\n  MerakiTag,\r\n  Passive,\r\n} from \"~/src/types/items.js\";\r\nimport camelcaseKeys from \"camelcase-keys\";\r\nimport { merakiItemSchema } from \"../schemas/meraki-item-zod-schema\";\r\n\r\n// Function to convert a string from snake case to camel case\r\nexport function snakeToCamel(str: string) {\r\n  return str.replace(/(_\\w)/g, (m) => m[1].toUpperCase());\r\n}\r\n\r\n// This code writes the merged items.json file in the latestVersion folder \"./data/\" + latestVersion + \"/items.json\";\r\nexport function writeItems(latestVersion: string, mergedItems: {}) {\r\n  let rootPath = \"data/\";\r\n  let latestVersionPath = path.join(rootPath, latestVersion, \"/items.json\");\r\n  latestVersionPath = path.normalize(latestVersionPath);\r\n  fs.writeFileSync(latestVersionPath, JSON.stringify(mergedItems));\r\n  // Also save a copy in the latest folder\r\n  fs.writeFileSync(`data/latest/items.json`, JSON.stringify(mergedItems));\r\n}\r\n\r\n// Filter passive stats to remove empty values or zero values\r\nfunction filterPassives(passives: Passive[]): Passive[] {\r\n  return passives.map((passive) => {\r\n    let filteredStats = filterStats(passive.stats);\r\n    if (filteredStats) {\r\n      passive.stats = filteredStats;\r\n    }\r\n    return passive;\r\n  });\r\n}\r\n\r\n// Filter stats to remove empty values or zero values\r\nfunction filterStats(stats: MerakiStats): MerakiStats {\r\n  return _.mapValues(stats, (value) => {\r\n    if (value) {\r\n      // Remove empty values from the stats object\r\n      return _.pickBy(value, (value) => {\r\n        return value !== 0;\r\n      });\r\n    }\r\n  }) as MerakiStats;\r\n}\r\n\r\n// Returns the champion classes of the item. (e.g. \"Fighter\", \"Tank\")\r\nfunction getChampionClasses(itemValues: MerakiItem) {\r\n  let classes = _.get(itemValues, \"shop.tags\");\r\n  if (classes.length > 0) {\r\n    // Filter class names that are defined in the ChampionClass enum\r\n    classes = _.filter(classes, (className: MerakiTag | ChampionClass) => {\r\n      return _.includes(Object.values(ChampionClass), className);\r\n    });\r\n  }\r\n  return classes;\r\n}\r\n\r\nexport function getCommunityDragonItemData(\r\n  endpointData: EndpointItemData,\r\n  mergedItems: { [x: string]: any }\r\n) {\r\n  let { data } = endpointData as { data: CommunityDragonItem[] };\r\n  const requiredKeysCD: (keyof CommunityDragonItem)[] = [\r\n    \"categories\",\r\n    \"inStore\",\r\n    \"maxStacks\",\r\n  ];\r\n\r\n  data.forEach((item) => {\r\n    const key = item.id;\r\n    let filteredItem = _.pick(item, requiredKeysCD);\r\n\r\n    // Strip text after Icons2d/ from the icon path\r\n    let CDragonIconPath = item.iconPath.split(\"Icons2D/\")[1].toLowerCase();\r\n    if (mergedItems[key]) {\r\n      // Set icon\r\n      mergedItems[key].icon =\r\n        \"https://raw.communitydragon.org/latest/game/assets/items/icons2d/\" +\r\n        CDragonIconPath;\r\n\r\n      // Append the filteredItem to the mergedItems in the corresponding key\r\n      mergedItems[key] = { ...mergedItems[key], ...filteredItem };\r\n    } else {\r\n      console.log(\"Item \" + key + \" not found in mergedItems\");\r\n    }\r\n  });\r\n\r\n  // Save mergedItems to a file for debugging\r\n  fs.writeFileSync(\"data/mergedItems.json\", JSON.stringify(mergedItems));\r\n\r\n  return mergedItems;\r\n}\r\n\r\nexport function getMerakiItemData(\r\n  endpointData: EndpointItemData,\r\n  mergedItems: { [x: string]: any }\r\n) {\r\n  let { data } = endpointData as { data: MerakiItemObject };\r\n  // Remove the mythic property from the passives\r\n  Object.entries(data).forEach(([key, item]) => {\r\n    item.passives.forEach((passive) => {\r\n      delete passive.mythic;\r\n    });\r\n  });\r\n\r\n  let merakiItemData: MerakiItemObject = camelcaseKeys(data, { deep: true });\r\n\r\n  // Check schema\r\n  Object.entries(merakiItemData).forEach(([key, item]) => {\r\n    try {\r\n      merakiItemSchema.parse(item);\r\n    } catch (error) {\r\n      throw new Error(\r\n        `Meraki item with key ${key} does not match the schema: ${error}`\r\n      );\r\n    }\r\n  });\r\n  console.log(\"Meraki schema check complete\");\r\n\r\n  // Save meraki data to a file for debugging\r\n  fs.writeFileSync(\"data/meraki.json\", JSON.stringify(merakiItemData));\r\n\r\n  const requiredKeysMeraki: (keyof MerakiItem)[] = [\r\n    \"iconOverlay\",\r\n    \"nicknames\",\r\n    \"requiredChampion\",\r\n    \"simpleDescription\",\r\n    \"stats\",\r\n    \"passives\",\r\n    \"active\",\r\n  ];\r\n  // Loop through each item in the MerakiAnalytics endpoint\r\n  Object.entries(merakiItemData).forEach(([itemKey, itemValues]) => {\r\n    let filteredItem = _.pick(itemValues, requiredKeysMeraki);\r\n    // Get an array of champion classes from nested object property\r\n    let classes = getChampionClasses(itemValues);\r\n    // Remove empty keys from stats to reduce the size of the json file\r\n    let stats = _.get(itemValues, \"stats\");\r\n    if (stats) {\r\n      let newStats = filterStats(stats);\r\n      if (newStats) {\r\n        data[itemKey].stats = newStats;\r\n        filteredItem.stats = newStats;\r\n      }\r\n    }\r\n\r\n    // Remove empty passives and active nested values\r\n    let passives = _.get(itemValues, \"passives\");\r\n    if (passives && passives.length > 0) {\r\n      // Filter passive stats to remove empty values\r\n      let newPassives = filterPassives(passives);\r\n      if (newPassives) {\r\n        data[itemKey].passives = newPassives;\r\n        filteredItem.passives = newPassives;\r\n      }\r\n    }\r\n\r\n    // Append the filteredItem and the classes to the mergedItems in the corresponding key\r\n    mergedItems[itemKey] = {\r\n      ...mergedItems[itemKey],\r\n      ...filteredItem,\r\n      classes: classes,\r\n    };\r\n  });\r\n\r\n  return mergedItems;\r\n}\r\n\r\nexport function getBlitzItemData(endpoint: EndpointItemData) {\r\n  let { data } = endpoint.data as BlitzRoot;\r\n  // Parse numbers\r\n  Object.entries(data).forEach(([key, itemData]) => {\r\n    Object.entries(itemData).forEach(([propKey, itemValue]) => {\r\n      if (propKey === \"id\") {\r\n        // Convert id to number\r\n        data[key][propKey] = parseInt(itemValue, 10);\r\n      } else if (\r\n        (propKey === \"maps\" || propKey === \"from\" || propKey === \"into\") &&\r\n        itemValue !== null\r\n      ) {\r\n        // Convert maps, from and into to numbers\r\n        data[key][propKey] = itemValue.map(Number);\r\n      } else if (propKey === \"stats\") {\r\n        // Delete stats from blitzEndpoint\r\n        delete data[key][\"stats\"];\r\n      }\r\n    });\r\n  });\r\n\r\n  // Make a list of all valid item ids from the blitz data\r\n  // That is, all items that have in maps 11 (SR) or 12 (HA)\r\n  const validMapIds = [11, 12];\r\n  let validItemIds: string[] = [];\r\n  Object.entries(data).forEach(([key, itemData]) => {\r\n    if (itemData.maps.some((mapId) => validMapIds.includes(mapId))) {\r\n      validItemIds.push(key);\r\n    }\r\n  });\r\n\r\n  // Filter the blitz data to only include the valid item ids\r\n  let blitzData: BlitzData = {};\r\n  validItemIds.forEach((key) => {\r\n    blitzData[key] = data[key];\r\n  });\r\n\r\n  // Save blitz data to a file for debugging\r\n  fs.writeFileSync(\"data/blitz.json\", JSON.stringify(blitzData));\r\n\r\n  return blitzData;\r\n}\r\n","export type ItemObject = Record<string, Item>;\r\n\r\nexport interface Item {\r\n  id: number;\r\n  name: string;\r\n  description: null | string;\r\n  maps: number[];\r\n  gold: Gold;\r\n  into: number[];\r\n  icon: string;\r\n  iconOverlay: boolean;\r\n  nicknames: string[];\r\n  requiredChampion: RequiredChampion;\r\n  simpleDescription: null | string;\r\n  tier: number;\r\n  stats: Stats;\r\n  classes: ChampionClass[];\r\n  categories: Category[];\r\n  inStore: boolean;\r\n  maxStacks: number;\r\n  from: number[];\r\n  placeholder: string;\r\n  type: string[];\r\n}\r\n\r\nexport enum Category {\r\n  AbilityHaste = \"AbilityHaste\",\r\n  Active = \"Active\",\r\n  Armor = \"Armor\",\r\n  ArmorPenetration = \"ArmorPenetration\",\r\n  AttackSpeed = \"AttackSpeed\",\r\n  Aura = \"Aura\",\r\n  Boots = \"Boots\",\r\n  Consumable = \"Consumable\",\r\n  CooldownReduction = \"CooldownReduction\",\r\n  CriticalStrike = \"CriticalStrike\",\r\n  Damage = \"Damage\",\r\n  GoldPer = \"GoldPer\",\r\n  Health = \"Health\",\r\n  HealthRegen = \"HealthRegen\",\r\n  Jungle = \"Jungle\",\r\n  Lane = \"Lane\",\r\n  LifeSteal = \"LifeSteal\",\r\n  MagicPenetration = \"MagicPenetration\",\r\n  MagicResist = \"MagicResist\",\r\n  Mana = \"Mana\",\r\n  ManaRegen = \"ManaRegen\",\r\n  NonbootsMovement = \"NonbootsMovement\",\r\n  OnHit = \"OnHit\",\r\n  Slow = \"Slow\",\r\n  SpellBlock = \"SpellBlock\",\r\n  SpellDamage = \"SpellDamage\",\r\n  SpellVamp = \"SpellVamp\",\r\n  Stealth = \"Stealth\",\r\n  Tenacity = \"Tenacity\",\r\n  Trinket = \"Trinket\",\r\n  Vision = \"Vision\",\r\n}\r\n\r\nexport interface Gold {\r\n  base: number;\r\n  purchasable: boolean;\r\n  total: number;\r\n  sell: number;\r\n}\r\n\r\nexport enum RequiredChampion {\r\n  Empty = \"\",\r\n  FiddleSticks = \"FiddleSticks\",\r\n  Gangplank = \"Gangplank\",\r\n}\r\n\r\nexport interface Stats {\r\n  abilityPower?: FlatNumber;\r\n  armor?: FlatNumber;\r\n  armorPenetration?: PercentNumber;\r\n  attackDamage?: FlatNumber;\r\n  attackSpeed?: FlatNumber;\r\n  cooldownReduction?: CooldownReduction;\r\n  criticalStrikeChance?: PercentNumber;\r\n  healAndShieldPower?: FlatNumber;\r\n  health?: FlatNumber;\r\n  healthRegen?: MixedNumber;\r\n  lethality?: FlatNumber;\r\n  lifesteal?: PercentNumber;\r\n  magicPenetration?: MixedNumber;\r\n  magicResistance?: FlatNumber;\r\n  mana?: FlatNumber;\r\n  manaRegen?: PercentNumber;\r\n  movespeed?: MixedNumber;\r\n  abilityHaste?: FlatNumber;\r\n  omnivamp?: PercentNumber;\r\n  tenacity?: FlatNumber;\r\n  goldPer10?: FlatNumber;\r\n}\r\n\r\nexport interface FlatNumber {\r\n  flat?: number;\r\n}\r\n\r\nexport interface PercentNumber {\r\n  percent?: number;\r\n}\r\n\r\nexport interface CooldownReduction {}\r\n\r\nexport interface MixedNumber {\r\n  percent?: number;\r\n  flat?: number;\r\n}\r\n\r\n// CommunityDragon types\r\n\r\nexport interface CommunityDragonItem {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  active: boolean;\r\n  inStore: boolean;\r\n  from: number[];\r\n  to: number[];\r\n  categories: Category[];\r\n  maxStacks: number;\r\n  requiredChampion: RequiredChampion;\r\n  requiredAlly: string;\r\n  requiredBuffCurrencyName: string;\r\n  requiredBuffCurrencyCost: number;\r\n  specialRecipe: number;\r\n  isEnchantment: boolean;\r\n  price: number;\r\n  priceTotal: number;\r\n  iconPath: string;\r\n}\r\n\r\n// Meraki types\r\nexport type MerakiItemObject = Record<string, MerakiItem>;\r\n\r\nexport enum Rank {\r\n  Basic = \"BASIC\",\r\n  Boots = \"BOOTS\",\r\n  Consumable = \"CONSUMABLE\",\r\n  Distributed = \"DISTRIBUTED\",\r\n  Epic = \"EPIC\",\r\n  Legendary = \"LEGENDARY\",\r\n  Minion = \"MINION\",\r\n  Potion = \"POTION\",\r\n  Starter = \"STARTER\",\r\n  Trinket = \"TRINKET\",\r\n  Turret = \"TURRET\",\r\n}\r\n\r\nexport interface MerakiItem {\r\n  name: string;\r\n  id: number;\r\n  tier: number;\r\n  rank: Rank[];\r\n  buildsFrom?: number[];\r\n  buildsInto?: number[];\r\n  specialRecipe?: number;\r\n  noEffects?: boolean;\r\n  removed: boolean;\r\n  requiredChampion?: string;\r\n  requiredAlly?: string;\r\n  icon: string;\r\n  simpleDescription?: null | string;\r\n  nicknames: string[];\r\n  passives: Passive[];\r\n  active: Active[];\r\n  stats: MerakiStats;\r\n  shop: Shop;\r\n  iconOverlay: boolean;\r\n}\r\n\r\nexport interface Active {\r\n  unique: boolean;\r\n  name: null | string;\r\n  effects: string;\r\n  range: number | null;\r\n  cooldown: null;\r\n}\r\n\r\nexport interface Passive {\r\n  unique: boolean;\r\n  mythic?: boolean;\r\n  name: null | string;\r\n  effects: null | string;\r\n  cooldown: null | string;\r\n  range: number | null;\r\n  stats: MerakiStats;\r\n}\r\n\r\nexport interface Shop {\r\n  prices: Prices;\r\n  purchasable: boolean;\r\n  tags: MerakiTag[];\r\n}\r\n\r\nexport interface Prices {\r\n  total: number;\r\n  combined: number;\r\n  sell: number;\r\n}\r\n\r\nexport enum MerakiTag {\r\n  AbilityPower = \"ABILITY_POWER\",\r\n  ArmorPen = \"ARMOR_PEN\",\r\n  Assassin = \"ASSASSIN\",\r\n  AttackDamage = \"ATTACK_DAMAGE\",\r\n  AttackSpeed = \"ATTACK_SPEED\",\r\n  Fighter = \"FIGHTER\",\r\n  HealthAndReg = \"HEALTH_AND_REG\",\r\n  LifestealVamp = \"LIFESTEAL_VAMP\",\r\n  Mage = \"MAGE\",\r\n  MagicPen = \"MAGIC_PEN\",\r\n  ManaAndReg = \"MANA_AND_REG\",\r\n  Marksman = \"MARKSMAN\",\r\n  Movement = \"MOVEMENT\",\r\n  OnhitEffects = \"ONHIT_EFFECTS\",\r\n  Support = \"SUPPORT\",\r\n  Tank = \"TANK\",\r\n}\r\n\r\nexport enum ChampionClass {\r\n  Assassin = \"ASSASSIN\",\r\n  Fighter = \"FIGHTER\",\r\n  Mage = \"MAGE\",\r\n  Marksman = \"MARKSMAN\",\r\n  Support = \"SUPPORT\",\r\n  Tank = \"TANK\",\r\n}\r\n\r\nexport interface MerakiStats {\r\n  abilityPower?: ItemStats;\r\n  armor: ItemStats;\r\n  armorPenetration?: ItemStats;\r\n  attackDamage?: ItemStats;\r\n  attackSpeed?: ItemStats;\r\n  cooldownReduction?: ItemStats;\r\n  criticalStrikeChance?: ItemStats;\r\n  goldPer10?: ItemStats;\r\n  healAndShieldPower?: ItemStats;\r\n  health: ItemStats;\r\n  healthRegen?: ItemStats;\r\n  lethality: ItemStats;\r\n  lifesteal: ItemStats;\r\n  magicPenetration?: ItemStats;\r\n  magicResistance?: ItemStats;\r\n  mana: ItemStats;\r\n  manaRegen?: ItemStats;\r\n  movespeed: ItemStats;\r\n  abilityHaste?: ItemStats;\r\n  omnivamp: ItemStats;\r\n  tenacity: ItemStats;\r\n  [x: string]: ItemStats | undefined;\r\n}\r\n\r\nexport interface ItemStats {\r\n  flat?: number;\r\n  percent?: number;\r\n  perLevel?: number;\r\n  percentPerLevel?: number;\r\n  percentBase?: number;\r\n  percentBonus?: number;\r\n}\r\n\r\n// Blitz types\r\nexport interface BlitzRoot {\r\n  type: string;\r\n  version: string;\r\n  basic: Basic;\r\n  data: BlitzData;\r\n  groups: Group[];\r\n  tree: Tree[];\r\n}\r\n\r\nexport interface Basic {\r\n  name: string;\r\n  rune: Rune;\r\n  gold: Gold;\r\n  group: string;\r\n  description: string;\r\n  colloq: string;\r\n  plaintext: string;\r\n  consumed: boolean;\r\n  stacks: number;\r\n  depth: number;\r\n  consumeOnFull: boolean;\r\n  from: any[];\r\n  into: any[];\r\n  specialRecipe: number;\r\n  inStore: boolean;\r\n  hideFromAll: boolean;\r\n  requiredChampion: string;\r\n  requiredAlly: string;\r\n  stats: { [key: string]: number };\r\n  tags: any[];\r\n  maps: { [key: string]: boolean };\r\n}\r\n\r\nexport interface Gold {\r\n  base: number;\r\n  total: number;\r\n  sell: number;\r\n  purchasable: boolean;\r\n}\r\n\r\nexport interface Rune {\r\n  isrune: boolean;\r\n  tier: number;\r\n  type: string;\r\n}\r\n\r\nexport type BlitzData = Record<string, BlitzItem>;\r\n\r\nexport interface BlitzItem {\r\n  id: number | string;\r\n  name: string;\r\n  description: string;\r\n  stats?: BlitzStats;\r\n  maps: number[];\r\n  gold: Gold;\r\n  into?: number[];\r\n  from?: number[];\r\n  depth?: number;\r\n  tier?: number;\r\n}\r\n\r\nexport interface BlitzStats {\r\n  FlatArmorMod?: number;\r\n  FlatCritChanceMod?: number;\r\n  FlatHPPoolMod?: number;\r\n  FlatHPRegenMod?: number;\r\n  FlatMagicDamageMod?: number;\r\n  FlatMovementSpeedMod?: number;\r\n  FlatMPPoolMod?: number;\r\n  FlatPhysicalDamageMod?: number;\r\n  FlatSpellBlockMod?: number;\r\n  PercentAttackSpeedMod?: number;\r\n  PercentLifeStealMod?: number;\r\n  PercentMovementSpeedMod?: number;\r\n}\r\n\r\nexport interface Group {\r\n  id: string;\r\n  MaxGroupOwnable: string;\r\n}\r\n\r\nexport interface Tree {\r\n  header: string;\r\n  tags: string[];\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport enum ItemRank {\r\n  Basic = \"BASIC\",\r\n  Boots = \"BOOTS\",\r\n  Consumable = \"CONSUMABLE\",\r\n  Distributed = \"DISTRIBUTED\",\r\n  Epic = \"EPIC\",\r\n  Legendary = \"LEGENDARY\",\r\n  Minion = \"MINION\",\r\n  Potion = \"POTION\",\r\n  Starter = \"STARTER\",\r\n  Trinket = \"TRINKET\",\r\n  Turret = \"TURRET\",\r\n}\r\n\r\nexport enum ItemTag {\r\n  AbilityPower = \"ABILITY_POWER\",\r\n  ArmorPen = \"ARMOR_PEN\",\r\n  Assassin = \"ASSASSIN\",\r\n  AttackDamage = \"ATTACK_DAMAGE\",\r\n  AttackSpeed = \"ATTACK_SPEED\",\r\n  Fighter = \"FIGHTER\",\r\n  HealthAndReg = \"HEALTH_AND_REG\",\r\n  LifestealVamp = \"LIFESTEAL_VAMP\",\r\n  Mage = \"MAGE\",\r\n  MagicPen = \"MAGIC_PEN\",\r\n  ManaAndReg = \"MANA_AND_REG\",\r\n  Marksman = \"MARKSMAN\",\r\n  Movement = \"MOVEMENT\",\r\n  OnhitEffects = \"ONHIT_EFFECTS\",\r\n  Support = \"SUPPORT\",\r\n  Tank = \"TANK\",\r\n}\r\n\r\nexport const activeSchema = z.object({\r\n  unique: z.boolean(),\r\n  name: z.string().nullable(),\r\n  effects: z.string(),\r\n  range: z.number().nullable(),\r\n  cooldown: z.null(),\r\n});\r\n\r\nexport const itemStatsSchema = z.object({\r\n  flat: z.number(),\r\n  percent: z.number(),\r\n  perLevel: z.number().optional(),\r\n  percentPerLevel: z.number().optional(),\r\n  percentBase: z.number().optional(),\r\n  percentBonus: z.number().optional(),\r\n});\r\n\r\nexport const rankSchema = z.nativeEnum(ItemRank);\r\n\r\nexport const pricesSchema = z.object({\r\n  total: z.number(),\r\n  combined: z.number(),\r\n  sell: z.number(),\r\n});\r\n\r\nexport const tagSchema = z.nativeEnum(ItemTag);\r\n\r\nexport const merakiItemStatsSchema = z.object({\r\n  abilityPower: itemStatsSchema.optional(),\r\n  armor: itemStatsSchema,\r\n  armorPenetration: itemStatsSchema.optional(),\r\n  attackDamage: itemStatsSchema.optional(),\r\n  attackSpeed: itemStatsSchema.optional(),\r\n  cooldownReduction: itemStatsSchema.optional(),\r\n  criticalStrikeChance: itemStatsSchema.optional(),\r\n  goldPer10: itemStatsSchema.optional(),\r\n  healAndShieldPower: itemStatsSchema.optional(),\r\n  health: itemStatsSchema,\r\n  healthRegen: itemStatsSchema.optional(),\r\n  lethality: itemStatsSchema,\r\n  lifesteal: itemStatsSchema,\r\n  magicPenetration: itemStatsSchema.optional(),\r\n  magicResistance: itemStatsSchema.optional(),\r\n  mana: itemStatsSchema,\r\n  manaRegen: itemStatsSchema.optional(),\r\n  movespeed: itemStatsSchema,\r\n  abilityHaste: itemStatsSchema.optional(),\r\n  omnivamp: itemStatsSchema,\r\n  tenacity: itemStatsSchema,\r\n});\r\n\r\nexport const shopSchema = z.object({\r\n  prices: pricesSchema,\r\n  purchasable: z.boolean(),\r\n  tags: z.array(tagSchema),\r\n});\r\n\r\nexport const passiveSchema = z.object({\r\n  unique: z.boolean(),\r\n  mythic: z.boolean().optional(),\r\n  name: z.string().nullable(),\r\n  effects: z.string(),\r\n  range: z.number().nullable(),\r\n  cooldown: z.string().nullable(),\r\n  stats: merakiItemStatsSchema,\r\n});\r\n\r\nexport const merakiItemSchema = z.object({\r\n  name: z.string(),\r\n  id: z.number(),\r\n  tier: z.number(),\r\n  rank: z.array(rankSchema),\r\n  buildsFrom: z.array(z.number()).optional(),\r\n  buildsInto: z.array(z.number()).optional(),\r\n  specialRecipe: z.number().optional(),\r\n  noEffects: z.boolean().optional(),\r\n  removed: z.boolean(),\r\n  requiredChampion: z.string().optional(),\r\n  requiredAlly: z.string().optional(),\r\n  icon: z.string(),\r\n  simpleDescription: z.string().optional().nullable(),\r\n  nicknames: z.array(z.string()),\r\n  passives: z.array(passiveSchema),\r\n  active: z.array(activeSchema),\r\n  stats: merakiItemStatsSchema,\r\n  shop: shopSchema,\r\n  iconOverlay: z.boolean(),\r\n});\r\n","import { Item, RequiredChampion } from \"../types/items\";\r\n\r\n// Set default values for required keys\r\nexport const defaultValues: Item = {\r\n  categories: [],\r\n  classes: [],\r\n  description: null,\r\n  from: [],\r\n  gold: { base: 0, purchasable: false, total: 0, sell: 0 },\r\n  icon: \"\",\r\n  iconOverlay: false,\r\n  id: -1,\r\n  inStore: false,\r\n  into: [],\r\n  maps: [],\r\n  maxStacks: 0,\r\n  name: \"\",\r\n  nicknames: [],\r\n  placeholder: \"\",\r\n  requiredChampion: RequiredChampion.Empty,\r\n  simpleDescription: \"\",\r\n  stats: {},\r\n  tier: 0,\r\n  type: [],\r\n};\r\n","[\r\n  {\r\n    \"name\": \"Blitz\",\r\n    \"baseUrl\": \"https://blitz-cdn-plain.blitz.gg/blitz/ddragon/\",\r\n    \"resource\": \"/data/en_US/items.json\",\r\n    \"needsLatest\": true\r\n  },\r\n  {\r\n    \"name\": \"MerakiAnalytics\",\r\n    \"baseUrl\": \"https://cdn.merakianalytics.com/riot/lol/resources/latest\",\r\n    \"resource\": \"/en-US/items.json\",\r\n    \"needsLatest\": false\r\n  },\r\n  {\r\n    \"name\": \"CommunityDragon\",\r\n    \"baseUrl\": \"https://raw.communitydragon.org/latest\",\r\n    \"resource\": \"/plugins/rcp-be-lol-game-data/global/default/v1/items.json\",\r\n    \"needsLatest\": false\r\n  }\r\n]\r\n","import { BlitzData } from \"../types/items\";\r\nimport { writeFileSync } from \"fs\";\r\n\r\nexport const extractTags = (blitzItemData: BlitzData) => {\r\n  // Iterate through the items and extract the description of each item, then extract all the tags used in the description\r\n  // tags are in the format <tag> and are case insensitive\r\n  let tags: string[] = [];\r\n\r\n  Object.entries(blitzItemData).forEach(([key, value]) => {\r\n    if (value.description) {\r\n      const description = value.description;\r\n      const regex = /<([a-zA-Z]+)>/g;\r\n      let match;\r\n      while ((match = regex.exec(description)) !== null) {\r\n        tags.push(match[1]);\r\n      }\r\n    }\r\n  });\r\n\r\n  // Remove duplicates\r\n  tags = [...new Set(tags)];\r\n  // Remove the forbidden tags\r\n  const forbiddenTags = [\"br\", \"attention\"];\r\n  tags = tags.filter((tag) => !forbiddenTags.includes(tag));\r\n  // Sort the tags\r\n  tags.sort((a, b) => a.localeCompare(b));\r\n  // Save the tags to a file\r\n  writeFileSync(\"data/tags.json\", JSON.stringify(tags));\r\n  console.log(\"Tags extracted and saved to data/tags.json\");\r\n\r\n  return tags;\r\n};\r\n"],"mappings":"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","names":["existsSync","mkdirSync","axios","path","info","axios","response","axios","existsSync","mkdirSync","axios","_","_","_","ChampionClass","ItemRank","ItemTag","_","value","writeFileSync","axios","_"]}